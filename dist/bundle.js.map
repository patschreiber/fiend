{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/atlases/MapBase.ts","src/atlases/Overworld.ts","src/engine/AssetLoader.ts","src/engine/Command/Command.ts","src/engine/Command/MoveEastCommand.ts","src/engine/Command/MoveNorthCommand.ts","src/engine/Command/MoveSouthCommand.ts","src/engine/Command/MoveWestCommand.ts","src/engine/Command/NullCommand.ts","src/engine/Command/index.ts","src/engine/FiendGame.ts","src/engine/GameObject/GameActor/Enemy.ts","src/engine/GameObject/GameActor/GameActor.ts","src/engine/GameObject/GameActor/Player.ts","src/engine/GameObject/GameObject.ts","src/engine/GameObject/index.ts","src/engine/Input/InputHandler.ts","src/engine/Render/Camera/Camera.ts","src/engine/Renderer.ts","src/main.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class MapBase {\n  SM: HTMLImageElement;\n  cols: number;\n  rows: number;\n  tsize: number;\n  tiles: Array<any>;\n  \n  constructor() {\n    this.cols = 0;\n    this.rows = 0;\n    this.tsize = 0;\n    this.tiles = null;\n  }\n\n  /**\n   * Gets the tile value located by the column and row (x,y) coordinates.\n   * This is trivial with a 2D array, but this method allows us to use a 1D\n   * array instead.\n   *\n   * @param {integer} x   The x-axis position of the requested tile.\n   * @param {integer} y   The y-axis position of the requested tile.\n   */\n  getTile(x: number, y: number): number {\n    if (\n      this.cols === 0\n      || this.rows === 0\n      || this.tsize === 0\n    ) {\n      throw new Error(\"Map size needs to have proper dimensions.\");\n    }\n\n    return this.tiles[y * this.cols + x];\n  }\n}\n","import { MapBase } from \"./MapBase\";\n\nexport class Overworld extends MapBase {\n  SM: HTMLImageElement;\n  tiles: Array<any>;\n  layers: Array<any>;\n  cols: number;\n  rows: number;\n  tsize: number;\n  \n  constructor() {\n    super();\n\n    /**\n     * The spritemap to be used.\n     * @var {HTMLImageElement}\n     */\n    this.SM = window.F_LOADER.getImage('TESTNUMBERED');\n\n    this.cols = 20;\n    this.rows = 15;\n    this.tsize = 300;\n    this.tiles = [\n        1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n       21,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,\n    ];\n    this.layers = [\n      [\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n      ], [\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n      ]\n    ]\n  }\n\n}\n","export class AssetLoader {\n  private _assetList: Array<any>;\n\n  constructor() {\n    this._assetList = [];\n  }\n\n  public initAssets(): Array<any> {\n    return [\n      this.loadImage(\"testTileset\", \"./DAT/1bittest.png\"),\n      this.loadImage(\"testTileset2\", \"./DAT/psychic-swamp.png\"),\n      this.loadImage(\"TESTORIG\", \"./DAT/low-res-spritesheet.png\"),\n      this.loadImage(\"TESTNUMBERED\", \"./DAT/pixel_art_tileset_test.png\"),\n    ];\n  }\n\n  public loadImage(key: string, src: string) {\n    let img = new Image();\n\n    let d = new Promise(function (resolve, reject) {\n      img.onload = function () {\n        this._assetList[key] = img;\n        resolve(img);\n      }.bind(this);\n\n      img.onerror = function () {\n        reject('Could not load image: ' + src);\n      };\n    }.bind(this));\n  \n    img.src = src;\n  \n    return d;\n  }\n\n  public getImage(key: string): HTMLImageElement {\n    return (key in this._assetList) ? this._assetList[key] : null;\n  };\n}","import { GameActor } from \"../GameObject\";\n\nexport abstract class Command {\n  public abstract execute(actor: GameActor, delta: number): void;\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveEastCommand class.\n */\nexport class MoveEastCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveE(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveNorthCommand class.\n */\nexport class MoveNorthCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveN(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveSouthCommand class.\n */\nexport class MoveSouthCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveS(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveWestCommand class.\n */\nexport class MoveWestCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveW(delta);\n  }\n}\n","import { Command } from \"./Command\";\n\n/**\n * The NullCommand class.\n * This class is special in that it intentionally doesn't execute anything, in\n * so if a user doesn't have a mapped button, we don't have to check fo `null`.\n */\nexport class NullCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(): void {}\n}\n","/**\n * @file The Command Barrel. Re-exports Command files for easier import\n * elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * The base command class.\n */\nexport * from './Command';\n\nexport * from './NullCommand';\n\nexport * from './MoveNorthCommand';\n\nexport * from './MoveSouthCommand';\n\nexport * from './MoveEastCommand';\n\nexport * from './MoveWestCommand';\n\n","import { InputHandler } from \"./Input/InputHandler\";\nimport { Camera } from \"./Render/Camera/Camera\";\nimport { Renderer } from \"./Renderer\";\n\n// Player\nimport { Player } from './GameObject';\n\n// Enemies\n// TODO: Might remove\nimport { Enemy } from './GameObject';\n\n/**\n * The Game superclass. Operations to act upon the main game thread are found\n * here.\n */\nexport class FiendGame {\n\n  /**\n   * The input handler that accepts player input.\n   */\n  public InputHandler: InputHandler;\n\n  /**\n   * The instance of the Player's character.\n   */\n  public Player: Player;\n\n  /**\n   * The renderer responsible for drawing to the screen.\n   */\n  public Renderer: Renderer;\n\n  /**\n   * The main camera\n   */\n  public Camera: Camera;\n\n  /**\n   * The canvas in the DOM. What the game is rendered on.\n   */\n  public canvas: HTMLCanvasElement;\n\n  /**\n   * The number of currently-active game objects.\n   *\n   * @type {number}\n   */\n  public gameObjectCount: number;\n\n  /**\n   * The list of active game objects. Every game object in this list will have\n   * their state updated every frame, if possible.\n   */\n  public gameObjects: Array<any>;\n\n  /**\n   * The max amount of active game objects that can be present in the game.\n   * TODO: Figure out what happens if this limit is reached.\n   * @internal This could be an \"importance weight\" where less important game\n   * objects are purged.\n   */\n  public maxEntities: number;\n\n  /**\n   * The HTML wrapper for the game. Assume everything in this container is part\n   * of the game.\n   */\n  public container: HTMLElement;\n\n  /**\n   * How frequently the game state updates, ideally. Defaults to 60 Hz, 16.6\n   * frames-per-second.\n   */\n  public tickLength: number;\n\n  /**\n   * The most recently elapsed tick of the game clock.\n   */\n  public lastFrameTime: number;\n\n  /**\n   * The ID returned from our main loop's most recent call to\n   * requestAnimationFrame(). The token can then be used when we call\n   * cancelAnimationFrame() to stop the main loop by telling the browser to\n   * cancel the request that corresponds to our token.\n   */\n  public stopToken: number|null;\n\n  constructor(gamePaneWidth: number, gamePaneHeight: number) {\n\n    /**\n     * Create the game pane and canvas.\n     */\n    this.canvas = this.genCanvas(gamePaneWidth, gamePaneHeight);\n    this.container = document.getElementById(\"fiend-game\");\n    this.container.insertBefore(this.canvas, this.container.firstChild);\n\n    this.stopToken = null;\n\n    this.tickLength = 60;\n\n    this.lastFrameTime = 0;\n\n    this.maxEntities = 1000;\n\n    this.Player = new Player({x:125,y:125});\n\n    this.Renderer = new Renderer(this.canvas);\n\n    this.InputHandler = new InputHandler();\n\n    this.Camera = new Camera();\n\n    this.gameObjectCount = 0;\n\n    this.gameObjects = [\n      // TODO This is a test, do should be empty on init.\n      // new Enemy(),\n      this.Player,\n    ];\n\n    // Let's kick off the game loop!\n    this.main(performance.now());\n  }\n\n  /**\n   * Generates a new canvas DOM canvas element. The game will run in this\n   * canvas.\n   *\n   * @param {number} w The width of the canvas, in pixels.\n   * @param {number} h The height of the canvas, in pixels.\n   */\n  private genCanvas(w: number, h: number): HTMLCanvasElement {\n    let canvas = document.createElement('canvas');\n    canvas.id = \"game-pane\";\n    canvas.width = w;\n    canvas.height = h;\n    canvas.tabIndex = 1;\n\n    return canvas;\n  }\n\n  /**\n   * Calculates the game state as of a given point in time. It is the authority\n   * for game state. The delta should be used in calculations to make the game\n   * simulation framerate independent.\n   *\n   * @param {float} delta  The difference in time between this frame and last\n   * frame, in seconds.\n   */\n  private _update(delta: number): void {\n    // TODO Remove clog.\n    // console.log('delta :', delta);\n    for (let i=0; i<this.gameObjectCount; i++) {\n      this.gameObjects[i].update(delta);\n    }\n\n    this.gameObjectCount = this.gameObjects.length;\n  }\n\n  /**\n   * Responsible for drawing the current game state to the screen.\n   */\n  private _draw(): void {\n\n    // Draw the scene.\n    this.Renderer.draw(this.gameObjectCount, this.gameObjects);\n  }\n\n  /**\n   * Stops the main game loop.\n   */\n  private stopMainLoop(): void {\n    window.cancelAnimationFrame(this.stopToken);\n    console.log(\"Goodbye...\");\n  }\n\n  /**\n   * Attempts to gracefully tear down the game.\n   */\n  public shutdownGame(): void {\n    this.stopMainLoop();\n  }\n\n/**\n  * The main game loop. We use requestAnimationFrame to be thread-safe and not\n  * dominate the browser when the player blurs focus on our tab.\n  *\n  * render() is passed tFrame because it is assumed that the render method will\n  *          calculate how long it has been since the most recently passed\n  *          update tick for extrapolation (purely cosmetic for fast devices).\n  *          It draws the scene.\n  *\n  * update() calculates the game state as of a given point in time.\n  *\n  * init()   Performs whatever tasks are needed before the main loop can run.\n  *\n  *\n  * @param {DOMHighResTimeStamp} tFrame The number of milliseconds since\n  * navigationStart (when the previous document is unloaded.\n  * window.requestAnimationFrame() always provides a DOMHighResTimeStamp to\n  * callbacks as an argument when they are executed.\n  */\n  public main(tFrame: DOMHighResTimeStamp): void {\n    // Store the ID returned from our main loop's most recent call to\n    // requestAnimationFrame().\n    this.stopToken = window.requestAnimationFrame(this.main.bind(this));\n\n    // Delta should be in seconds, not ms, so we divide by 1000.\n    let delta = (tFrame - this.lastFrameTime) / 1000.0;\n    // Keep track of when the last frame happened.\n    this.lastFrameTime = tFrame;\n\n    this.InputHandler.handleInput(this.Player, delta);\n    this._update(delta);\n    this._draw();\n  }\n}\n","import { GameActor } from './GameActor';\n\n/**\n * The Enemy base class.\n */\nexport class Enemy extends GameActor {\n  public HP: number;\n  public ATK: number;\n  public speed: number;\n\n  /**\n   * The position of the GameObject\n   *\n   * @type {Coordinate}\n   */\n  public position: Coordinate;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.name = \"Black Bat\";\n\n    this.HP = 100;\n    this.ATK = 1;\n    this.speed = 100;\n    this.position = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  /**\n   *\n   * {@inheritdoc}\n   */\n  update(delta: number) {\n    this.position.x += this.speed * delta;\n    this.position.y += this.speed * delta;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(this.position.x, this.position.y, 10, 0, Math.PI*2);\n    ctx.fillStyle = \"#0095DD\";\n    ctx.fill();\n    ctx.closePath();\n  }\n}\n","import { GameObject } from '../GameObject';\n\n/**\n * The interface for the [[GameActor]] class.\n *\n * @interface IGameActor\n */\ninterface IGameActor {\n\n  /**\n   * The position member. Signifies the location of the of the GameObject.\n   *\n   * @type {Coordinate}\n   */\n  position: Coordinate;\n\n  /**\n   * Defines the signature for the update method for the GameActor.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  update(delta: number): void;\n}\n\n/**\n * The base GameActor class. All GameObjects that can influence things in the\n * environment will derive from the GameActor class.\n * @abstract\n * @extends [[GameObject]] The GameObject base abstract class.\n * @implements [[IGameActor]]\n */\nexport abstract class GameActor extends GameObject implements IGameActor {\n\n  /**\n   * The position of the GameObject.\n   *\n   * @type {Coordinate}\n   */\n  public position: Coordinate;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * The update method for the abstract GameActor class.\n   *\n   * @abstract\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public abstract update(delta: number): void;\n\n  // TODO: Make a subclass that has movement. Not all actors will, I dont think.\n  public moveN(delta: number): void {}\n  public moveS(delta: number): void {}\n  public moveE(delta: number): void {}\n  public moveW(delta: number): void {}\n}\n","import { GameActor } from './GameActor';\n\n/**\n * The interface for the [[Player]] class.\n *\n * @interface IPlayer\n */\ninterface IPlayer {\n\n  moveN(delta: number): void;\n  moveS(delta: number): void;\n  moveE(delta: number): void;\n  moveW(delta: number): void;\n}\n\n/**\n * The Player class. Keeps track of the state of the player including all\n * attributes and stats.\n *\n * @abstract\n * @extends [[GameActor]] The GameObject base abstract class.\n * @implements [[IPlayer]]\n */\nexport class Player extends GameActor implements IPlayer {\n\n  public HP: number;\n\n  public EXP: number;\n\n  public speed: number;\n\n  /**\n   * @constructor\n   */\n   constructor(position: Coordinate) {\n    super();\n\n    this.position = {x:100,y:100};\n\n    this.HP = 100;\n    this.EXP = 0;\n    this.speed = 100;\n  }\n\n  /**\n   * Updates the Player's state. Intended to be run in the main game loop.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public update(delta: number): void {\n    console.log('this.position :', this.position);\n  }\n\n\n  /**\n   * Draws the Player entity\n   * @param ctx The canvas context.\n   */\n   public draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(this.position.x, this.position.y, 10, 0, Math.PI*2);\n    ctx.fillStyle = \"#0095DD\";\n    ctx.fill();\n    ctx.closePath();\n  }\n\n\n  /**\n   *    |               .    ||\n   *   |||      ....  .||.  ...    ...   .. ...    ....\n   *  |  ||   .|   ''  ||    ||  .|  '|.  ||  ||  ||. '\n   *  .''''|.  ||       ||    ||  ||   ||  ||  ||  . '|..\n   * .|.  .||.  '|...'  '|.' .||.  '|..|' .||. ||. |'..|'\n   */\n\n  /**\n   * Move the Player north.\n   * @param delta The game's delta between frames.\n   */\n  public moveN(delta: number): void {\n    // Decrementing {y} makes the actor move south, since we're dealing with a\n    // 2D array and not an actual mathematical grid plane.\n    this.position.y -= this.speed * delta;\n  }\n\n  /**\n   * Move the Player south.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveS(delta: number): void {\n    // Increasing {y} makes the actor move south, since we're dealing with a 2D\n    // array and not an actual mathematical grid plane.\n    this.position.y += this.speed * delta;\n  }\n\n  /**\n   * Move the Player east.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveE(delta: number): void {\n    this.position.x += this.speed * delta;\n  }\n\n    /**\n   * Move the Player west.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveW(delta: number): void {\n    this.position.x -= this.speed * delta;\n  }\n\n}\n\n","/**\n * The interface for the [[GameActor]] class.\n *\n * @interface IGameActor\n */\ninterface IGameObject {\n\n  /**\n   * Keeps track of the `id` of the last GameObject instantiated.\n   *\n   * @static\n   * @type {number}\n   */\n  idIncrementor: number;\n\n  /**\n   * The `id` of the GameObject.\n   *\n   * @type {number}\n   */\n  id: number;\n\n  /**\n   * The type of the GameObject.\n   *\n   * @type {string}\n   */\n  type: string;\n\n  /**\n   * The human-readable name of the GameObject. This will appear in-game.\n   *\n   * @type {string}\n   */\n  name: string;\n\n  /**\n   * Defines the signature for the update method for the GameActor.\n   *\n   * @abstract\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  update(delta: number): void;\n}\n\n/**\n * The GameObject abstract class. All game entities inherit from this class.\n * On instantiation, the class will generate an auto-incrementing id for use\n * in identifying the newly-created GameObject.\n *\n * @abstract\n */\nexport abstract class GameObject {\n\n  /**\n   * Keeps track of the `id` of the last GameObject instantiated.\n   *\n   * @static\n   * @type {number}\n   */\n  private static idIncrementor: number;\n\n  /**\n   * The id of the instance of the GameObject.\n   *\n   * @type {number}\n   */\n  private id: number;\n\n  /**\n    * @var type The name of the type of the GameObject.\n    */\n  protected type: string;\n\n  /**\n   * @var name The humanized name of the GameObject.\n   */\n  public name: string;\n\n  /**\n   * The GameObject constructor. Auto-increments the GameOject id for the new\n   * GameObject being created.\n   */\n  public constructor() {\n    this.id = GameObject.idIncrementor++;\n  }\n\n  /**\n   * Accessor for the private member `id`.\n   *\n   * @returns The id of the GameObject\n   */\n  public getId(): number {\n    return this.id;\n  }\n\n  /**\n   * Updates the GameObject's state. Intended to be run in the main game loop.\n   *\n   * @abstract\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  protected abstract update(delta: number): void;\n}\n","/**\n * @file The GameObject Barrel. Re-exports GameObject files for easier import\n * elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * Progenitor classes for all entities in the game.\n */\nexport * from './GameObject';\n\n/**\n * The base GameActor class. All GameObjects that can influence things in the\n * environment will derive from the GameActor class.\n */\nexport * from './GameActor/GameActor';\n\n/**\n * The player character class.\n */\nexport * from './GameActor/Player';\n\n/**\n * The base enemy class. TODO: Might be deprecated in the future.\n */\nexport * from './GameActor/Enemy';\n","import { Command } from \"../Command\";\nimport { GameActor } from '../GameObject';\n\nimport { NullCommand } from \"../Command\";\nimport { MoveNorthCommand } from \"../Command\";\nimport { MoveSouthCommand } from \"../Command\";\nimport { MoveEastCommand } from \"../Command\";\nimport { MoveWestCommand } from \"../Command\";\n\n/**\n * The interface for the InputHandler\n */\ninterface IInputHandler {\n\n  /**\n   * Binds an input to a command.\n   *\n   * @param event The user interaction with a keyboard.\n   * @param command\n   */\n  keyBind(event: KeyboardEvent, command: Command): void;\n\n  /**\n   * Handles any input if a mapped button is pressed. Run once per game update\n   * tick.\n   *\n   * @param actor The game actor entity to handle input. Most likely will be the\n   * Player(s).\n   * @param delta The\n   */\n  handleInput(actor: GameActor, delta: number): void;\n}\n\n/**\n * The IInputMap interface.\n * @keys\n * [key]: The name of the key pressed, sent by the browser.header\n * [command]: The mapped command to be executed.\n * [status]: The button's current status\n */\ninterface IInputMap {\n  [key: string]: {\n    command: Command,\n    status: ButtonStatus\n  }\n}\n\n/**\n * The built-in control scheme types. Allows a user to change the control scheme\n * without remapping all the keys individually.\n *\n * @type {enum} ControlSchemes\n */\nenum ControlSchemes {\n  DEFAULT,\n  FPS,\n  ONEHANDED_RIGHT,\n  ONEHANDED_LEFT,\n}\n\n/**\n * Maps a button to a keyboard input key.\n *\n * @type {enum} Button\n */\nenum Button {\n  UP = \"ArrowUp\",\n  DOWN = \"ArrowDown\",\n  LEFT = \"ArrowLeft\",\n  RIGHT = \"ArrowRight\",\n  E = \"e\",\n  Q = \"q\",\n  BSPACE = \"Backspace\",\n  ENTER = \"Enter\",\n  SHIFT = \"Shift\",\n}\n\n/**\n * The ButtonStatus enum.\n * @values\n * [PRESSED]: The button is pressed.\n * [RAISED]: The button is NOT pressed, it is raised. Also can be considered\n * \"untouched\" by the player.\n * [HELD]: The button is held down.\n * [RELEASED]: The button has been released from a pressed state.\n * [DISABLED]: The button has been disabled and will not fire events.\n *\n * @type {enum} ButtonStatus\n */\n enum ButtonStatus {\n  PRESSED,\n  RAISED,\n  HELD,\n  RELEASED,\n  DISABLED,\n}\n\n/**\n * The InputHandler class.\n */\nexport class InputHandler implements IInputHandler {\n\n  /**\n   * TODO Structure should add [\"context\"] so we can have context-independent\n   * buttons\n   * @type {IInputMap} The inputMap instance.\n   */\n  private inputMap: IInputMap;\n\n  /**\n   * The InputHandler constructor.\n   * Attaches the keydown and keyup KeyboardEvent to the document.\n   */\n  constructor() {\n\n    document.getElementById('game-pane').addEventListener(\n      'keydown', (event) => this.buttonPressed(event), false\n    );\n\n    document.getElementById('game-pane').addEventListener(\n      'keyup', (event) => this.buttonReleased(event), false\n    );\n\n    this.inputMap = this.initInputMap();\n\n    // TODO: This should read in user-defined input mappings, otheriwse load\n    // default settings. (if user has saved control scheme, else load default)\n    this.loadControlScheme(ControlSchemes.DEFAULT);\n  }\n\n  /**\n   * Binds an input to a command.\n   *\n   * @param {KeyboardEvent} event The key to bind the event to\n   * @param {Command} command The command to bind to the button\n   */\n  public keyBind(event: KeyboardEvent, command: Command): void {\n    this.inputMap[event.key].command = command;\n  }\n\n  /**\n   * Determins if a button was pressed. Callback for when a button is pressed by\n   * the user.\n   *\n   * @param {KeyboardEvent} event The user interaction with a keyboard.\n   */\n  public buttonPressed(event: KeyboardEvent): void {\n    event.preventDefault();\n\n    if (this.inputMap[event.key]) {\n      this.inputMap[event.key].status = ButtonStatus.PRESSED;\n    }\n  }\n\n  /**\n   * Callback for when a button is released by the user.\n   *\n   * @param {KeyboardEvent} event The user interaction with a keyboard.\n   */\n  private buttonReleased(event: KeyboardEvent): void {\n    event.preventDefault();\n\n    if (this.inputMap[event.key]) {\n      this.inputMap[event.key].status = ButtonStatus.RAISED;\n    }\n  }\n\n  /**\n   * Handles user input. Runs once per game loop.\n   */\n  public handleInput(actor: GameActor, delta: number): void {\n\n    if (this.inputMap[Button.UP].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.UP].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.DOWN].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.DOWN].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.LEFT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.LEFT].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.RIGHT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.RIGHT].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.E].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.E].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.Q].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.Q].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.BSPACE].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.BSPACE].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.ENTER].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.ENTER].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.SHIFT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.SHIFT].command.execute(actor, delta);\n    }\n  }\n\n  /**\n   * Initializes an input map so the structure is available when needed.\n   *\n   * @return {IInputMap} The IInputMap interface.\n   */\n  private initInputMap(): IInputMap {\n    let ip = {};\n\n    for(let buttonKey in Button) {\n      ip[Button[buttonKey]] = {\n        command: NullCommand,\n        status: ButtonStatus.RAISED\n      }\n    }\n\n    return ip;\n  }\n\n  /**\n   * Loads a control scheme when the game first initializes, so the player can\n   * have some input. Supports multiple control schemes so players can re-map\n   * controls without having to re-map each button individually.\n   *\n   * @param controlScheme\n   */\n  private loadControlScheme(controlScheme: ControlSchemes): void {\n    switch(controlScheme) {\n      case 1:\n        break;\n      default:\n        // this.inputMap[Button.UP].command = new MoveNorthCommand(player: GameActor);\n        this.inputMap[Button.UP].command = new MoveNorthCommand();\n        this.inputMap[Button.DOWN].command = new MoveSouthCommand();\n        this.inputMap[Button.LEFT].command = new MoveWestCommand();\n        this.inputMap[Button.RIGHT].command = new MoveEastCommand();\n        this.inputMap[Button.E].command = new NullCommand();\n        this.inputMap[Button.Q].command = new NullCommand();\n        this.inputMap[Button.BSPACE].command = new NullCommand();\n        this.inputMap[Button.ENTER].command = new NullCommand();\n        this.inputMap[Button.SHIFT].command = new NullCommand();\n    }\n  }\n}\n\n// var key = {\n//   BACKSPACE: 8,\n//   TAB:       9,\n//   RETURN:   13,\n//   ESC:      27,\n//   SPACE:    32,\n//   PAGEUP:   33,\n//   PAGEDOWN: 34,\n//   END:      35,\n//   HOME:     36,\n//   LEFT:     37,\n//   UP:       38,\n//   RIGHT:    39,\n//   DOWN:     40,\n//   INSERT:   45,\n//   DELETE:   46,\n//   ZERO:     48, ONE: 49, TWO: 50, THREE: 51, FOUR: 52, FIVE: 53, SIX: 54, SEVEN: 55, EIGHT: 56, NINE: 57,\n//   A:        65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90,\n//   TILDA:    192\n// };\n","interface ICamera {\n\n  /**\n   * The current position of the camera.\n   */\n  position: Coordinate;\n\n  /**\n   * The width of the Camera's viewport.\n   */\n  width: number;\n\n  /**\n   * The height of the Camera's viewport.\n   */\n  height: number;\n\n  /**\n   * The limit for the camera's position — The lower limit will nearly always be\n   * (0,0). The upper limit is equal to the size of the world minus the size of\n   * the camera's viewport.\n   */\n  maxX: number;\n\n  /**\n   * The limit for the camera's position — The lower limit will nearly always be\n   * (0,0). The upper limit is equal to the size of the world minus the size of\n   * the camera's viewport.\n   */\n  maxY: number;\n\n}\n\nexport class Camera implements ICamera {\n\n  position: Coordinate;\n  width: number;\n  height: number;\n  maxX: number;\n  maxY: number;\n\n  constructor() {}\n\n}\n","import { MapBase } from \"../atlases/MapBase\";\nimport { Overworld } from \"../atlases/Overworld\";\n\nexport class Renderer {\n\n  EMPTY_TILE: number;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  pixels: number;\n  scale: number;\n  sceneWidth: number;\n  sceneHeight: number;\n\n  /**\n   * TODO: Change this to be the scene. Recreate the Renderer when a new scene\n   * is loaded.\n   */\n  protected _currentMap: MapBase;\n\n  constructor(canvas: HTMLCanvasElement) {\n\n    this.canvas = canvas;\n\n    /**\n     * The canvas context.\n     *\n     * @var {CanvasRenderingContext2D}\n     */\n     this.ctx = this.canvas.getContext('2d');\n\n    /**\n     * Prevent anti-aliasing in the event a tile gets scaled.\n     *\n     * @property {CanvasRenderingContext2D.imageSmoothingEnabled}\n     */\n     this.ctx.imageSmoothingEnabled = false;\n\n    /**\n     * The empty tile value. If this value is set for a position in a map's\n     * array, it will not be rendered.\n     * TODO: Move this to the Scene.\n     *\n     * @var {integer}\n     */\n    this.EMPTY_TILE = 0;\n\n    /**\n     * Multiplier for x,y position to pixels. What size the tiles for the game\n     * will be rendered at. Always use a power of 2 so the scaling prevents\n     * blurring.\n     *\n     * @var {integer}\n     */\n    this.pixels = 32;\n\n    /**\n     * The scale at which the tile will be rendered. 1 = 1x scaling, 2 = 2x\n     * scaling, etc.\n     *\n     * @var {integer}\n     */\n    this.scale = 1;\n\n    this._currentMap = new Overworld();\n  }\n\n  draw(gameObjectCount: number, gameObjects: Array<any>) {\n\n    // Clear the screen\n    // TODO: Pull this out. Put in renderer.\n    this.ctx.clearRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height\n    );\n\n    // Always store the texture in a var so we don't call \"new Foo()\" multiple\n    // times a second.\n    this.drawTileMap(this._currentMap);\n\n    for (let i=0; i<gameObjectCount; i++) {\n      gameObjects[i].draw(this.ctx);\n    }\n  }\n\n  /**\n   * Renders a map according to the coordinates given in the map's file by\n   * translating the coordinates to a spritesheet.\n   *\n   * If a tile is 32x32 pixels, the 1st tile will start at (0,0) on\n   * the spritesheet, the 2nd tile will start at (32,0), the 34d at (64,0) and\n   * so on.\n   *\n   * +---+---+---+---+\n   * | 1 | 2 | 3 | 4 |\n   * +---+---+---+---+\n   * | 5 | 6 | 7 | 8 |\n   * +---+---+---+---+\n   *\n   * 'source x' and 'source y' will get the correct coords in the image file.\n   * So for our first tile, '1', drawImage will grab the subimage at (32,0).\n   * drawImage would get the subimage at (64,32) for tile '7'.\n   *\n   * TODO  https://hashrocket.com/blog/posts/using-tiled-and-canvas-to-render-game-screens\n   *\n   * @param {Object} map  The map object that extends MapBase.\n   */\n  drawTileMap(map: MapBase): void {\n    for (let x=0; x<map.cols; x++) {\n      for (let y=0; y<map.rows; y++) {\n        let tile = map.getTile(x, y);\n\n        // Let's skip rendering empty tiles.\n        if (tile !== this.EMPTY_TILE) {\n          this.ctx.drawImage(\n            // Image Source\n            map.SM,\n            // Source x (See example in comment block)\n            ((tile - 1) % map.cols) * this.pixels,\n            // Source y (See example in comment block)\n            Math.floor(((tile - 1) / map.rows)) * this.pixels,\n            // Source width\n            this.pixels,\n            // Source height\n            this.pixels,\n            // Target x\n            x * (this.pixels * this.scale),\n            // Target y\n            y * (this.pixels * this.scale),\n            // Target width\n            this.pixels * this.scale,\n             // Target height\n            this.pixels * this.scale,\n          );\n        }\n      }\n    }\n  }\n}\n","import { FiendGame } from \"./engine/FiendGame\";\nimport { AssetLoader } from \"./engine/AssetLoader\";\n\n/**\n * We need some global variables so we can load the game and the assets. Let's\n * consider moving the F_LOADER to it's own class so we don't need a global for\n * the assets.\n */\ndeclare global {\n  interface Window {\n    F_LOADER: AssetLoader;\n  }\n}\n\n/**\n * Create a new instance of FiendGame, which loads the game.\n */\nfunction init() {\n\n  // Init functionality, for now.\n  new FiendGame(640, 480);\n  // Focus the game pane on page load.\n  document.getElementById('game-pane').focus();\n};\n\n/**\n * Ensure the assets are loaded before we initialize the game. We do this with a\n * promise to ensure all the images are loaded and ready to be used.\n * TODO Make this better, more TypeScript-y.\n */\n window.onload = function() {\n\n  window.F_LOADER = new AssetLoader();\n  var p = window.F_LOADER.initAssets();\n  Promise.all(p).then( () => {\n    init();\n  });\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXRsYXNlcy9NYXBCYXNlLnRzIiwic3JjL2F0bGFzZXMvT3ZlcndvcmxkLnRzIiwic3JjL2VuZ2luZS9Bc3NldExvYWRlci50cyIsInNyYy9lbmdpbmUvQ29tbWFuZC9Db21tYW5kLnRzIiwic3JjL2VuZ2luZS9Db21tYW5kL01vdmVFYXN0Q29tbWFuZC50cyIsInNyYy9lbmdpbmUvQ29tbWFuZC9Nb3ZlTm9ydGhDb21tYW5kLnRzIiwic3JjL2VuZ2luZS9Db21tYW5kL01vdmVTb3V0aENvbW1hbmQudHMiLCJzcmMvZW5naW5lL0NvbW1hbmQvTW92ZVdlc3RDb21tYW5kLnRzIiwic3JjL2VuZ2luZS9Db21tYW5kL051bGxDb21tYW5kLnRzIiwic3JjL2VuZ2luZS9Db21tYW5kL2luZGV4LnRzIiwic3JjL2VuZ2luZS9GaWVuZEdhbWUudHMiLCJzcmMvZW5naW5lL0dhbWVPYmplY3QvR2FtZUFjdG9yL0VuZW15LnRzIiwic3JjL2VuZ2luZS9HYW1lT2JqZWN0L0dhbWVBY3Rvci9HYW1lQWN0b3IudHMiLCJzcmMvZW5naW5lL0dhbWVPYmplY3QvR2FtZUFjdG9yL1BsYXllci50cyIsInNyYy9lbmdpbmUvR2FtZU9iamVjdC9HYW1lT2JqZWN0LnRzIiwic3JjL2VuZ2luZS9HYW1lT2JqZWN0L2luZGV4LnRzIiwic3JjL2VuZ2luZS9JbnB1dC9JbnB1dEhhbmRsZXIudHMiLCJzcmMvZW5naW5lL1JlbmRlci9DYW1lcmEvQ2FtZXJhLnRzIiwic3JjL2VuZ2luZS9SZW5kZXJlci50cyIsInNyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQ0FhLE8sV0FBQSxPO0FBT1gsdUJBQUE7QUFBQTs7QUFDRSxhQUFLLElBQUwsR0FBWSxDQUFaO0FBQ0EsYUFBSyxJQUFMLEdBQVksQ0FBWjtBQUNBLGFBQUssS0FBTCxHQUFhLENBQWI7QUFDQSxhQUFL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QWE7QUFFWDtBQUNBLFFBQUksb0JBQUosQ0FBYyxHQUFkLEVBQW1CLEdBQW5CO0FBQ0E7QUFDQSxhQUFTLGNBQVQsQ0FBd0IsV0FBeEIsRUFBcUMsS0FBckM7QUFDRDtBQUFBO0FBRUQ7Ozs7O0FBS0MsT0FBTyxNQUFQLEdBQWdCLFlBQUE7QUFFZixXQUFPLFFBQVAsR0FBa0IsSUFBSSx3QkFBSixFQUFsQjtBQUNBLFFBQUksSUFBSSxPQUFPLFFBQVAsQ0FBZ0IsVUFBaEIsRUFBUjtBQUNBLFlBQVEsR0FBUixDQUFZLENBQVosRUFBZSxJQUFmLENBQXFCLFlBQUs7QUFDeEI7QUFDRCxLQUZEO0FBR0QsQ0FQQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImV4cG9ydCBjbGFzcyBNYXBCYXNlIHtcbiAgU006IEhUTUxJbWFnZUVsZW1lbnQ7XG4gIGNvbHM6IG51bWJlcjtcbiAgcm93czogbnVtYmVyO1xuICB0c2l6ZTogbnVtYmVyO1xuICB0aWxlczogQXJyYXk8YW55PjtcbiAgXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29scyA9IDA7XG4gICAgdGhpcy5yb3dzID0gMDtcbiAgICB0aGlzLnRzaXplID0gMDtcbiAgICB0aGlzLnRpbGVzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0aWxlIHZhbHVlIGxvY2F0ZWQgYnkgdGhlIGNvbHVtbiBhbmQgcm93ICh4LHkpIGNvb3JkaW5hdGVzLlxuICAgKiBUaGlzIGlzIHRyaXZpYWwgd2l0aCBhIDJEIGFycmF5LCBidXQgdGhpcyBtZXRob2QgYWxsb3dzIHVzIHRvIHVzZSBhIDFEXG4gICAqIGFycmF5IGluc3RlYWQuXG4gICAqXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0geCAgIFRoZSB4LWF4aXMgcG9zaXRpb24gb2YgdGhlIHJlcXVlc3RlZCB0aWxlLlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHkgICBUaGUgeS1heGlzIHBvc2l0aW9uIG9mIHRoZSByZXF1ZXN0ZWQgdGlsZS5cbiAgICovXG4gIGdldFRpbGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmIChcbiAgICAgIHRoaXMuY29scyA9PT0gMFxuICAgICAgfHwgdGhpcy5yb3dzID09PSAwXG4gICAgICB8fCB0aGlzLnRzaXplID09PSAwXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNYXAgc2l6ZSBuZWVkcyB0byBoYXZlIHByb3BlciBkaW1lbnNpb25zLlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50aWxlc1t5ICogdGhpcy5jb2xzICsgeF07XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hcEJhc2UgfSBmcm9tIFwiLi9NYXBCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBPdmVyd29ybGQgZXh0ZW5kcyBNYXBCYXNlIHtcbiAgU006IEhUTUxJbWFnZUVsZW1lbnQ7XG4gIHRpbGVzOiBBcnJheTxhbnk+O1xuICBsYXllcnM6IEFycmF5PGFueT47XG4gIGNvbHM6IG51bWJlcjtcbiAgcm93czogbnVtYmVyO1xuICB0c2l6ZTogbnVtYmVyO1xuICBcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzcHJpdGVtYXAgdG8gYmUgdXNlZC5cbiAgICAgKiBAdmFyIHtIVE1MSW1hZ2VFbGVtZW50fVxuICAgICAqL1xuICAgIHRoaXMuU00gPSB3aW5kb3cuRl9MT0FERVIuZ2V0SW1hZ2UoJ1RFU1ROVU1CRVJFRCcpO1xuXG4gICAgdGhpcy5jb2xzID0gMjA7XG4gICAgdGhpcy5yb3dzID0gMTU7XG4gICAgdGhpcy50c2l6ZSA9IDMwMDtcbiAgICB0aGlzLnRpbGVzID0gW1xuICAgICAgICAxLCAgMiwgIDMsICA0LCAgNSwgIDYsICA3LCAgOCwgIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCxcbiAgICAgICAyMSwgIDIsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsXG4gICAgICAgIDgsICA4LCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLFxuICAgICAgICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCxcbiAgICAgICAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsXG4gICAgICAgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgNSwgIDUsICA1LCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLFxuICAgICAgICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDUsICAwLCAgNSwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCxcbiAgICAgICAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICA1LCAgNSwgIDUsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsXG4gICAgICAgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLFxuICAgICAgICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCxcbiAgICAgICAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsXG4gICAgICAgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLFxuICAgICAgICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCxcbiAgICAgICAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsXG4gICAgICAgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsIDEwLFxuICAgIF07XG4gICAgdGhpcy5sYXllcnMgPSBbXG4gICAgICBbXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICBdLCBbXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICBdXG4gICAgXVxuICB9XG5cbn1cbiIsImV4cG9ydCBjbGFzcyBBc3NldExvYWRlciB7XG4gIHByaXZhdGUgX2Fzc2V0TGlzdDogQXJyYXk8YW55PjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9hc3NldExpc3QgPSBbXTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0QXNzZXRzKCk6IEFycmF5PGFueT4ge1xuICAgIHJldHVybiBbXG4gICAgICB0aGlzLmxvYWRJbWFnZShcInRlc3RUaWxlc2V0XCIsIFwiLi9EQVQvMWJpdHRlc3QucG5nXCIpLFxuICAgICAgdGhpcy5sb2FkSW1hZ2UoXCJ0ZXN0VGlsZXNldDJcIiwgXCIuL0RBVC9wc3ljaGljLXN3YW1wLnBuZ1wiKSxcbiAgICAgIHRoaXMubG9hZEltYWdlKFwiVEVTVE9SSUdcIiwgXCIuL0RBVC9sb3ctcmVzLXNwcml0ZXNoZWV0LnBuZ1wiKSxcbiAgICAgIHRoaXMubG9hZEltYWdlKFwiVEVTVE5VTUJFUkVEXCIsIFwiLi9EQVQvcGl4ZWxfYXJ0X3RpbGVzZXRfdGVzdC5wbmdcIiksXG4gICAgXTtcbiAgfVxuXG4gIHB1YmxpYyBsb2FkSW1hZ2Uoa2V5OiBzdHJpbmcsIHNyYzogc3RyaW5nKSB7XG4gICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xuXG4gICAgbGV0IGQgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9hc3NldExpc3Rba2V5XSA9IGltZztcbiAgICAgICAgcmVzb2x2ZShpbWcpO1xuICAgICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVqZWN0KCdDb3VsZCBub3QgbG9hZCBpbWFnZTogJyArIHNyYyk7XG4gICAgICB9O1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIFxuICAgIGltZy5zcmMgPSBzcmM7XG4gIFxuICAgIHJldHVybiBkO1xuICB9XG5cbiAgcHVibGljIGdldEltYWdlKGtleTogc3RyaW5nKTogSFRNTEltYWdlRWxlbWVudCB7XG4gICAgcmV0dXJuIChrZXkgaW4gdGhpcy5fYXNzZXRMaXN0KSA/IHRoaXMuX2Fzc2V0TGlzdFtrZXldIDogbnVsbDtcbiAgfTtcbn0iLCJpbXBvcnQgeyBHYW1lQWN0b3IgfSBmcm9tIFwiLi4vR2FtZU9iamVjdFwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tbWFuZCB7XG4gIHB1YmxpYyBhYnN0cmFjdCBleGVjdXRlKGFjdG9yOiBHYW1lQWN0b3IsIGRlbHRhOiBudW1iZXIpOiB2b2lkO1xufVxuIiwiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCIuL0NvbW1hbmRcIjtcbmltcG9ydCB7IEdhbWVBY3RvciB9IGZyb20gXCIuLi9HYW1lT2JqZWN0XCI7XG5cbi8qKlxuICogVGhlIE1vdmVFYXN0Q29tbWFuZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vdmVFYXN0Q29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgY29tbWFuZC5cbiAgICovXG4gIHB1YmxpYyBleGVjdXRlKGFjdG9yOiBHYW1lQWN0b3IsIGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICBhY3Rvci5tb3ZlRShkZWx0YSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi9Db21tYW5kXCI7XG5pbXBvcnQgeyBHYW1lQWN0b3IgfSBmcm9tIFwiLi4vR2FtZU9iamVjdFwiO1xuXG4vKipcbiAqIFRoZSBNb3ZlTm9ydGhDb21tYW5kIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgTW92ZU5vcnRoQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgY29tbWFuZC5cbiAgICovXG4gIHB1YmxpYyBleGVjdXRlKGFjdG9yOiBHYW1lQWN0b3IsIGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICBhY3Rvci5tb3ZlTihkZWx0YSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi9Db21tYW5kXCI7XG5pbXBvcnQgeyBHYW1lQWN0b3IgfSBmcm9tIFwiLi4vR2FtZU9iamVjdFwiO1xuXG4vKipcbiAqIFRoZSBNb3ZlU291dGhDb21tYW5kIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgTW92ZVNvdXRoQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgY29tbWFuZC5cbiAgICovXG4gIHB1YmxpYyBleGVjdXRlKGFjdG9yOiBHYW1lQWN0b3IsIGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICBhY3Rvci5tb3ZlUyhkZWx0YSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi9Db21tYW5kXCI7XG5pbXBvcnQgeyBHYW1lQWN0b3IgfSBmcm9tIFwiLi4vR2FtZU9iamVjdFwiO1xuXG4vKipcbiAqIFRoZSBNb3ZlV2VzdENvbW1hbmQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb3ZlV2VzdENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGNvbW1hbmQuXG4gICAqL1xuICBwdWJsaWMgZXhlY3V0ZShhY3RvcjogR2FtZUFjdG9yLCBkZWx0YTogbnVtYmVyKTogdm9pZCB7XG4gICAgYWN0b3IubW92ZVcoZGVsdGEpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcIi4vQ29tbWFuZFwiO1xuXG4vKipcbiAqIFRoZSBOdWxsQ29tbWFuZCBjbGFzcy5cbiAqIFRoaXMgY2xhc3MgaXMgc3BlY2lhbCBpbiB0aGF0IGl0IGludGVudGlvbmFsbHkgZG9lc24ndCBleGVjdXRlIGFueXRoaW5nLCBpblxuICogc28gaWYgYSB1c2VyIGRvZXNuJ3QgaGF2ZSBhIG1hcHBlZCBidXR0b24sIHdlIGRvbid0IGhhdmUgdG8gY2hlY2sgZm8gYG51bGxgLlxuICovXG5leHBvcnQgY2xhc3MgTnVsbENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGNvbW1hbmQuXG4gICAqL1xuICBwdWJsaWMgZXhlY3V0ZSgpOiB2b2lkIHt9XG59XG4iLCIvKipcbiAqIEBmaWxlIFRoZSBDb21tYW5kIEJhcnJlbC4gUmUtZXhwb3J0cyBDb21tYW5kIGZpbGVzIGZvciBlYXNpZXIgaW1wb3J0XG4gKiBlbHNld2hlcmUuXG4gKiBAc2VlIEBsaW5rIGh0dHBzOi8vYmFzYXJhdC5naXRib29rcy5pby90eXBlc2NyaXB0L2RvY3MvdGlwcy9iYXJyZWwuaHRtbFxuICovXG5cbi8qKlxuICogVGhlIGJhc2UgY29tbWFuZCBjbGFzcy5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9Db21tYW5kJztcblxuZXhwb3J0ICogZnJvbSAnLi9OdWxsQ29tbWFuZCc7XG5cbmV4cG9ydCAqIGZyb20gJy4vTW92ZU5vcnRoQ29tbWFuZCc7XG5cbmV4cG9ydCAqIGZyb20gJy4vTW92ZVNvdXRoQ29tbWFuZCc7XG5cbmV4cG9ydCAqIGZyb20gJy4vTW92ZUVhc3RDb21tYW5kJztcblxuZXhwb3J0ICogZnJvbSAnLi9Nb3ZlV2VzdENvbW1hbmQnO1xuXG4iLCJpbXBvcnQgeyBJbnB1dEhhbmRsZXIgfSBmcm9tIFwiLi9JbnB1dC9JbnB1dEhhbmRsZXJcIjtcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gXCIuL1JlbmRlci9DYW1lcmEvQ2FtZXJhXCI7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gXCIuL1JlbmRlcmVyXCI7XG5cbi8vIFBsYXllclxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnLi9HYW1lT2JqZWN0JztcblxuLy8gRW5lbWllc1xuLy8gVE9ETzogTWlnaHQgcmVtb3ZlXG5pbXBvcnQgeyBFbmVteSB9IGZyb20gJy4vR2FtZU9iamVjdCc7XG5cbi8qKlxuICogVGhlIEdhbWUgc3VwZXJjbGFzcy4gT3BlcmF0aW9ucyB0byBhY3QgdXBvbiB0aGUgbWFpbiBnYW1lIHRocmVhZCBhcmUgZm91bmRcbiAqIGhlcmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWVuZEdhbWUge1xuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgaGFuZGxlciB0aGF0IGFjY2VwdHMgcGxheWVyIGlucHV0LlxuICAgKi9cbiAgcHVibGljIElucHV0SGFuZGxlcjogSW5wdXRIYW5kbGVyO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5zdGFuY2Ugb2YgdGhlIFBsYXllcidzIGNoYXJhY3Rlci5cbiAgICovXG4gIHB1YmxpYyBQbGF5ZXI6IFBsYXllcjtcblxuICAvKipcbiAgICogVGhlIHJlbmRlcmVyIHJlc3BvbnNpYmxlIGZvciBkcmF3aW5nIHRvIHRoZSBzY3JlZW4uXG4gICAqL1xuICBwdWJsaWMgUmVuZGVyZXI6IFJlbmRlcmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbWFpbiBjYW1lcmFcbiAgICovXG4gIHB1YmxpYyBDYW1lcmE6IENhbWVyYTtcblxuICAvKipcbiAgICogVGhlIGNhbnZhcyBpbiB0aGUgRE9NLiBXaGF0IHRoZSBnYW1lIGlzIHJlbmRlcmVkIG9uLlxuICAgKi9cbiAgcHVibGljIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgY3VycmVudGx5LWFjdGl2ZSBnYW1lIG9iamVjdHMuXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBwdWJsaWMgZ2FtZU9iamVjdENvdW50OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGFjdGl2ZSBnYW1lIG9iamVjdHMuIEV2ZXJ5IGdhbWUgb2JqZWN0IGluIHRoaXMgbGlzdCB3aWxsIGhhdmVcbiAgICogdGhlaXIgc3RhdGUgdXBkYXRlZCBldmVyeSBmcmFtZSwgaWYgcG9zc2libGUuXG4gICAqL1xuICBwdWJsaWMgZ2FtZU9iamVjdHM6IEFycmF5PGFueT47XG5cbiAgLyoqXG4gICAqIFRoZSBtYXggYW1vdW50IG9mIGFjdGl2ZSBnYW1lIG9iamVjdHMgdGhhdCBjYW4gYmUgcHJlc2VudCBpbiB0aGUgZ2FtZS5cbiAgICogVE9ETzogRmlndXJlIG91dCB3aGF0IGhhcHBlbnMgaWYgdGhpcyBsaW1pdCBpcyByZWFjaGVkLlxuICAgKiBAaW50ZXJuYWwgVGhpcyBjb3VsZCBiZSBhbiBcImltcG9ydGFuY2Ugd2VpZ2h0XCIgd2hlcmUgbGVzcyBpbXBvcnRhbnQgZ2FtZVxuICAgKiBvYmplY3RzIGFyZSBwdXJnZWQuXG4gICAqL1xuICBwdWJsaWMgbWF4RW50aXRpZXM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIEhUTUwgd3JhcHBlciBmb3IgdGhlIGdhbWUuIEFzc3VtZSBldmVyeXRoaW5nIGluIHRoaXMgY29udGFpbmVyIGlzIHBhcnRcbiAgICogb2YgdGhlIGdhbWUuXG4gICAqL1xuICBwdWJsaWMgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcblxuICAvKipcbiAgICogSG93IGZyZXF1ZW50bHkgdGhlIGdhbWUgc3RhdGUgdXBkYXRlcywgaWRlYWxseS4gRGVmYXVsdHMgdG8gNjAgSHosIDE2LjZcbiAgICogZnJhbWVzLXBlci1zZWNvbmQuXG4gICAqL1xuICBwdWJsaWMgdGlja0xlbmd0aDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbW9zdCByZWNlbnRseSBlbGFwc2VkIHRpY2sgb2YgdGhlIGdhbWUgY2xvY2suXG4gICAqL1xuICBwdWJsaWMgbGFzdEZyYW1lVGltZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgcmV0dXJuZWQgZnJvbSBvdXIgbWFpbiBsb29wJ3MgbW9zdCByZWNlbnQgY2FsbCB0b1xuICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKS4gVGhlIHRva2VuIGNhbiB0aGVuIGJlIHVzZWQgd2hlbiB3ZSBjYWxsXG4gICAqIGNhbmNlbEFuaW1hdGlvbkZyYW1lKCkgdG8gc3RvcCB0aGUgbWFpbiBsb29wIGJ5IHRlbGxpbmcgdGhlIGJyb3dzZXIgdG9cbiAgICogY2FuY2VsIHRoZSByZXF1ZXN0IHRoYXQgY29ycmVzcG9uZHMgdG8gb3VyIHRva2VuLlxuICAgKi9cbiAgcHVibGljIHN0b3BUb2tlbjogbnVtYmVyfG51bGw7XG5cbiAgY29uc3RydWN0b3IoZ2FtZVBhbmVXaWR0aDogbnVtYmVyLCBnYW1lUGFuZUhlaWdodDogbnVtYmVyKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGdhbWUgcGFuZSBhbmQgY2FudmFzLlxuICAgICAqL1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5nZW5DYW52YXMoZ2FtZVBhbmVXaWR0aCwgZ2FtZVBhbmVIZWlnaHQpO1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaWVuZC1nYW1lXCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZSh0aGlzLmNhbnZhcywgdGhpcy5jb250YWluZXIuZmlyc3RDaGlsZCk7XG5cbiAgICB0aGlzLnN0b3BUb2tlbiA9IG51bGw7XG5cbiAgICB0aGlzLnRpY2tMZW5ndGggPSA2MDtcblxuICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IDA7XG5cbiAgICB0aGlzLm1heEVudGl0aWVzID0gMTAwMDtcblxuICAgIHRoaXMuUGxheWVyID0gbmV3IFBsYXllcih7eDoxMjUseToxMjV9KTtcblxuICAgIHRoaXMuUmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIodGhpcy5jYW52YXMpO1xuXG4gICAgdGhpcy5JbnB1dEhhbmRsZXIgPSBuZXcgSW5wdXRIYW5kbGVyKCk7XG5cbiAgICB0aGlzLkNhbWVyYSA9IG5ldyBDYW1lcmEoKTtcblxuICAgIHRoaXMuZ2FtZU9iamVjdENvdW50ID0gMDtcblxuICAgIHRoaXMuZ2FtZU9iamVjdHMgPSBbXG4gICAgICAvLyBUT0RPIFRoaXMgaXMgYSB0ZXN0LCBkbyBzaG91bGQgYmUgZW1wdHkgb24gaW5pdC5cbiAgICAgIC8vIG5ldyBFbmVteSgpLFxuICAgICAgdGhpcy5QbGF5ZXIsXG4gICAgXTtcblxuICAgIC8vIExldCdzIGtpY2sgb2ZmIHRoZSBnYW1lIGxvb3AhXG4gICAgdGhpcy5tYWluKHBlcmZvcm1hbmNlLm5vdygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBuZXcgY2FudmFzIERPTSBjYW52YXMgZWxlbWVudC4gVGhlIGdhbWUgd2lsbCBydW4gaW4gdGhpc1xuICAgKiBjYW52YXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3IFRoZSB3aWR0aCBvZiB0aGUgY2FudmFzLCBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoIFRoZSBoZWlnaHQgb2YgdGhlIGNhbnZhcywgaW4gcGl4ZWxzLlxuICAgKi9cbiAgcHJpdmF0ZSBnZW5DYW52YXModzogbnVtYmVyLCBoOiBudW1iZXIpOiBIVE1MQ2FudmFzRWxlbWVudCB7XG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy5pZCA9IFwiZ2FtZS1wYW5lXCI7XG4gICAgY2FudmFzLndpZHRoID0gdztcbiAgICBjYW52YXMuaGVpZ2h0ID0gaDtcbiAgICBjYW52YXMudGFiSW5kZXggPSAxO1xuXG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBnYW1lIHN0YXRlIGFzIG9mIGEgZ2l2ZW4gcG9pbnQgaW4gdGltZS4gSXQgaXMgdGhlIGF1dGhvcml0eVxuICAgKiBmb3IgZ2FtZSBzdGF0ZS4gVGhlIGRlbHRhIHNob3VsZCBiZSB1c2VkIGluIGNhbGN1bGF0aW9ucyB0byBtYWtlIHRoZSBnYW1lXG4gICAqIHNpbXVsYXRpb24gZnJhbWVyYXRlIGluZGVwZW5kZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge2Zsb2F0fSBkZWx0YSAgVGhlIGRpZmZlcmVuY2UgaW4gdGltZSBiZXR3ZWVuIHRoaXMgZnJhbWUgYW5kIGxhc3RcbiAgICogZnJhbWUsIGluIHNlY29uZHMuXG4gICAqL1xuICBwcml2YXRlIF91cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIFRPRE8gUmVtb3ZlIGNsb2cuXG4gICAgLy8gY29uc29sZS5sb2coJ2RlbHRhIDonLCBkZWx0YSk7XG4gICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuZ2FtZU9iamVjdENvdW50OyBpKyspIHtcbiAgICAgIHRoaXMuZ2FtZU9iamVjdHNbaV0udXBkYXRlKGRlbHRhKTtcbiAgICB9XG5cbiAgICB0aGlzLmdhbWVPYmplY3RDb3VudCA9IHRoaXMuZ2FtZU9iamVjdHMubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3BvbnNpYmxlIGZvciBkcmF3aW5nIHRoZSBjdXJyZW50IGdhbWUgc3RhdGUgdG8gdGhlIHNjcmVlbi5cbiAgICovXG4gIHByaXZhdGUgX2RyYXcoKTogdm9pZCB7XG5cbiAgICAvLyBEcmF3IHRoZSBzY2VuZS5cbiAgICB0aGlzLlJlbmRlcmVyLmRyYXcodGhpcy5nYW1lT2JqZWN0Q291bnQsIHRoaXMuZ2FtZU9iamVjdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIHRoZSBtYWluIGdhbWUgbG9vcC5cbiAgICovXG4gIHByaXZhdGUgc3RvcE1haW5Mb29wKCk6IHZvaWQge1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnN0b3BUb2tlbik7XG4gICAgY29uc29sZS5sb2coXCJHb29kYnllLi4uXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHRzIHRvIGdyYWNlZnVsbHkgdGVhciBkb3duIHRoZSBnYW1lLlxuICAgKi9cbiAgcHVibGljIHNodXRkb3duR2FtZSgpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3BNYWluTG9vcCgpO1xuICB9XG5cbi8qKlxuICAqIFRoZSBtYWluIGdhbWUgbG9vcC4gV2UgdXNlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB0byBiZSB0aHJlYWQtc2FmZSBhbmQgbm90XG4gICogZG9taW5hdGUgdGhlIGJyb3dzZXIgd2hlbiB0aGUgcGxheWVyIGJsdXJzIGZvY3VzIG9uIG91ciB0YWIuXG4gICpcbiAgKiByZW5kZXIoKSBpcyBwYXNzZWQgdEZyYW1lIGJlY2F1c2UgaXQgaXMgYXNzdW1lZCB0aGF0IHRoZSByZW5kZXIgbWV0aG9kIHdpbGxcbiAgKiAgICAgICAgICBjYWxjdWxhdGUgaG93IGxvbmcgaXQgaGFzIGJlZW4gc2luY2UgdGhlIG1vc3QgcmVjZW50bHkgcGFzc2VkXG4gICogICAgICAgICAgdXBkYXRlIHRpY2sgZm9yIGV4dHJhcG9sYXRpb24gKHB1cmVseSBjb3NtZXRpYyBmb3IgZmFzdCBkZXZpY2VzKS5cbiAgKiAgICAgICAgICBJdCBkcmF3cyB0aGUgc2NlbmUuXG4gICpcbiAgKiB1cGRhdGUoKSBjYWxjdWxhdGVzIHRoZSBnYW1lIHN0YXRlIGFzIG9mIGEgZ2l2ZW4gcG9pbnQgaW4gdGltZS5cbiAgKlxuICAqIGluaXQoKSAgIFBlcmZvcm1zIHdoYXRldmVyIHRhc2tzIGFyZSBuZWVkZWQgYmVmb3JlIHRoZSBtYWluIGxvb3AgY2FuIHJ1bi5cbiAgKlxuICAqXG4gICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSB0RnJhbWUgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2VcbiAgKiBuYXZpZ2F0aW9uU3RhcnQgKHdoZW4gdGhlIHByZXZpb3VzIGRvY3VtZW50IGlzIHVubG9hZGVkLlxuICAqIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSBhbHdheXMgcHJvdmlkZXMgYSBET01IaWdoUmVzVGltZVN0YW1wIHRvXG4gICogY2FsbGJhY2tzIGFzIGFuIGFyZ3VtZW50IHdoZW4gdGhleSBhcmUgZXhlY3V0ZWQuXG4gICovXG4gIHB1YmxpYyBtYWluKHRGcmFtZTogRE9NSGlnaFJlc1RpbWVTdGFtcCk6IHZvaWQge1xuICAgIC8vIFN0b3JlIHRoZSBJRCByZXR1cm5lZCBmcm9tIG91ciBtYWluIGxvb3AncyBtb3N0IHJlY2VudCBjYWxsIHRvXG4gICAgLy8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkuXG4gICAgdGhpcy5zdG9wVG9rZW4gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMubWFpbi5iaW5kKHRoaXMpKTtcblxuICAgIC8vIERlbHRhIHNob3VsZCBiZSBpbiBzZWNvbmRzLCBub3QgbXMsIHNvIHdlIGRpdmlkZSBieSAxMDAwLlxuICAgIGxldCBkZWx0YSA9ICh0RnJhbWUgLSB0aGlzLmxhc3RGcmFtZVRpbWUpIC8gMTAwMC4wO1xuICAgIC8vIEtlZXAgdHJhY2sgb2Ygd2hlbiB0aGUgbGFzdCBmcmFtZSBoYXBwZW5lZC5cbiAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSB0RnJhbWU7XG5cbiAgICB0aGlzLklucHV0SGFuZGxlci5oYW5kbGVJbnB1dCh0aGlzLlBsYXllciwgZGVsdGEpO1xuICAgIHRoaXMuX3VwZGF0ZShkZWx0YSk7XG4gICAgdGhpcy5fZHJhdygpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBHYW1lQWN0b3IgfSBmcm9tICcuL0dhbWVBY3Rvcic7XG5cbi8qKlxuICogVGhlIEVuZW15IGJhc2UgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBFbmVteSBleHRlbmRzIEdhbWVBY3RvciB7XG4gIHB1YmxpYyBIUDogbnVtYmVyO1xuICBwdWJsaWMgQVRLOiBudW1iZXI7XG4gIHB1YmxpYyBzcGVlZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIEdhbWVPYmplY3RcbiAgICpcbiAgICogQHR5cGUge0Nvb3JkaW5hdGV9XG4gICAqL1xuICBwdWJsaWMgcG9zaXRpb246IENvb3JkaW5hdGU7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMubmFtZSA9IFwiQmxhY2sgQmF0XCI7XG5cbiAgICB0aGlzLkhQID0gMTAwO1xuICAgIHRoaXMuQVRLID0gMTtcbiAgICB0aGlzLnNwZWVkID0gMTAwO1xuICAgIHRoaXMucG9zaXRpb24gPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICpcbiAgICoge0Bpbmhlcml0ZG9jfVxuICAgKi9cbiAgdXBkYXRlKGRlbHRhOiBudW1iZXIpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnggKz0gdGhpcy5zcGVlZCAqIGRlbHRhO1xuICAgIHRoaXMucG9zaXRpb24ueSArPSB0aGlzLnNwZWVkICogZGVsdGE7XG4gIH1cblxuICBkcmF3KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmModGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnksIDEwLCAwLCBNYXRoLlBJKjIpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBcIiMwMDk1RERcIjtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gJy4uL0dhbWVPYmplY3QnO1xuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBbW0dhbWVBY3Rvcl1dIGNsYXNzLlxuICpcbiAqIEBpbnRlcmZhY2UgSUdhbWVBY3RvclxuICovXG5pbnRlcmZhY2UgSUdhbWVBY3RvciB7XG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiBtZW1iZXIuIFNpZ25pZmllcyB0aGUgbG9jYXRpb24gb2YgdGhlIG9mIHRoZSBHYW1lT2JqZWN0LlxuICAgKlxuICAgKiBAdHlwZSB7Q29vcmRpbmF0ZX1cbiAgICovXG4gIHBvc2l0aW9uOiBDb29yZGluYXRlO1xuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzaWduYXR1cmUgZm9yIHRoZSB1cGRhdGUgbWV0aG9kIGZvciB0aGUgR2FtZUFjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIHRpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIGZyYW1lcy4gUHJvdmlkZWQgYnkgdGhlIGdhbWUnc1xuICAgKiBtYWluIGdhbWUgbG9vcC5cbiAgICogQHNlZSBGaWVuZEdhbWUubWFpbigpXG4gICAqL1xuICB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgR2FtZUFjdG9yIGNsYXNzLiBBbGwgR2FtZU9iamVjdHMgdGhhdCBjYW4gaW5mbHVlbmNlIHRoaW5ncyBpbiB0aGVcbiAqIGVudmlyb25tZW50IHdpbGwgZGVyaXZlIGZyb20gdGhlIEdhbWVBY3RvciBjbGFzcy5cbiAqIEBhYnN0cmFjdFxuICogQGV4dGVuZHMgW1tHYW1lT2JqZWN0XV0gVGhlIEdhbWVPYmplY3QgYmFzZSBhYnN0cmFjdCBjbGFzcy5cbiAqIEBpbXBsZW1lbnRzIFtbSUdhbWVBY3Rvcl1dXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHYW1lQWN0b3IgZXh0ZW5kcyBHYW1lT2JqZWN0IGltcGxlbWVudHMgSUdhbWVBY3RvciB7XG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgR2FtZU9iamVjdC5cbiAgICpcbiAgICogQHR5cGUge0Nvb3JkaW5hdGV9XG4gICAqL1xuICBwdWJsaWMgcG9zaXRpb246IENvb3JkaW5hdGU7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdXBkYXRlIG1ldGhvZCBmb3IgdGhlIGFic3RyYWN0IEdhbWVBY3RvciBjbGFzcy5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgdGltZSBkaWZmZXJlbmNlIGJldHdlZW4gZnJhbWVzLiBQcm92aWRlZCBieSB0aGUgZ2FtZSdzXG4gICAqIG1haW4gZ2FtZSBsb29wLlxuICAgKiBAc2VlIEZpZW5kR2FtZS5tYWluKClcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQ7XG5cbiAgLy8gVE9ETzogTWFrZSBhIHN1YmNsYXNzIHRoYXQgaGFzIG1vdmVtZW50LiBOb3QgYWxsIGFjdG9ycyB3aWxsLCBJIGRvbnQgdGhpbmsuXG4gIHB1YmxpYyBtb3ZlTihkZWx0YTogbnVtYmVyKTogdm9pZCB7fVxuICBwdWJsaWMgbW92ZVMoZGVsdGE6IG51bWJlcik6IHZvaWQge31cbiAgcHVibGljIG1vdmVFKGRlbHRhOiBudW1iZXIpOiB2b2lkIHt9XG4gIHB1YmxpYyBtb3ZlVyhkZWx0YTogbnVtYmVyKTogdm9pZCB7fVxufVxuIiwiaW1wb3J0IHsgR2FtZUFjdG9yIH0gZnJvbSAnLi9HYW1lQWN0b3InO1xuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBbW1BsYXllcl1dIGNsYXNzLlxuICpcbiAqIEBpbnRlcmZhY2UgSVBsYXllclxuICovXG5pbnRlcmZhY2UgSVBsYXllciB7XG5cbiAgbW92ZU4oZGVsdGE6IG51bWJlcik6IHZvaWQ7XG4gIG1vdmVTKGRlbHRhOiBudW1iZXIpOiB2b2lkO1xuICBtb3ZlRShkZWx0YTogbnVtYmVyKTogdm9pZDtcbiAgbW92ZVcoZGVsdGE6IG51bWJlcik6IHZvaWQ7XG59XG5cbi8qKlxuICogVGhlIFBsYXllciBjbGFzcy4gS2VlcHMgdHJhY2sgb2YgdGhlIHN0YXRlIG9mIHRoZSBwbGF5ZXIgaW5jbHVkaW5nIGFsbFxuICogYXR0cmlidXRlcyBhbmQgc3RhdHMuXG4gKlxuICogQGFic3RyYWN0XG4gKiBAZXh0ZW5kcyBbW0dhbWVBY3Rvcl1dIFRoZSBHYW1lT2JqZWN0IGJhc2UgYWJzdHJhY3QgY2xhc3MuXG4gKiBAaW1wbGVtZW50cyBbW0lQbGF5ZXJdXVxuICovXG5leHBvcnQgY2xhc3MgUGxheWVyIGV4dGVuZHMgR2FtZUFjdG9yIGltcGxlbWVudHMgSVBsYXllciB7XG5cbiAgcHVibGljIEhQOiBudW1iZXI7XG5cbiAgcHVibGljIEVYUDogbnVtYmVyO1xuXG4gIHB1YmxpYyBzcGVlZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gICBjb25zdHJ1Y3Rvcihwb3NpdGlvbjogQ29vcmRpbmF0ZSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0ge3g6MTAwLHk6MTAwfTtcblxuICAgIHRoaXMuSFAgPSAxMDA7XG4gICAgdGhpcy5FWFAgPSAwO1xuICAgIHRoaXMuc3BlZWQgPSAxMDA7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgUGxheWVyJ3Mgc3RhdGUuIEludGVuZGVkIHRvIGJlIHJ1biBpbiB0aGUgbWFpbiBnYW1lIGxvb3AuXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgdGltZSBkaWZmZXJlbmNlIGJldHdlZW4gZnJhbWVzLiBQcm92aWRlZCBieSB0aGUgZ2FtZSdzXG4gICAqIG1haW4gZ2FtZSBsb29wLlxuICAgKiBAc2VlIEZpZW5kR2FtZS5tYWluKClcbiAgICovXG4gIHB1YmxpYyB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKCd0aGlzLnBvc2l0aW9uIDonLCB0aGlzLnBvc2l0aW9uKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBQbGF5ZXIgZW50aXR5XG4gICAqIEBwYXJhbSBjdHggVGhlIGNhbnZhcyBjb250ZXh0LlxuICAgKi9cbiAgIHB1YmxpYyBkcmF3KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmModGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnksIDEwLCAwLCBNYXRoLlBJKjIpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBcIiMwMDk1RERcIjtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqICAgIHwgICAgICAgICAgICAgICAuICAgIHx8XG4gICAqICAgfHx8ICAgICAgLi4uLiAgLnx8LiAgLi4uICAgIC4uLiAgIC4uIC4uLiAgICAuLi4uXG4gICAqICB8ICB8fCAgIC58ICAgJycgIHx8ICAgIHx8ICAufCAgJ3wuICB8fCAgfHwgIHx8LiAnXG4gICAqICAuJycnJ3wuICB8fCAgICAgICB8fCAgICB8fCAgfHwgICB8fCAgfHwgIHx8ICAuICd8Li5cbiAgICogLnwuICAufHwuICAnfC4uLicgICd8LicgLnx8LiAgJ3wuLnwnIC58fC4gfHwuIHwnLi58J1xuICAgKi9cblxuICAvKipcbiAgICogTW92ZSB0aGUgUGxheWVyIG5vcnRoLlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIGdhbWUncyBkZWx0YSBiZXR3ZWVuIGZyYW1lcy5cbiAgICovXG4gIHB1YmxpYyBtb3ZlTihkZWx0YTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gRGVjcmVtZW50aW5nIHt5fSBtYWtlcyB0aGUgYWN0b3IgbW92ZSBzb3V0aCwgc2luY2Ugd2UncmUgZGVhbGluZyB3aXRoIGFcbiAgICAvLyAyRCBhcnJheSBhbmQgbm90IGFuIGFjdHVhbCBtYXRoZW1hdGljYWwgZ3JpZCBwbGFuZS5cbiAgICB0aGlzLnBvc2l0aW9uLnkgLT0gdGhpcy5zcGVlZCAqIGRlbHRhO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdGhlIFBsYXllciBzb3V0aC5cbiAgICpcbiAgICogQHBhcmFtIGRlbHRhIFRoZSBnYW1lJ3MgZGVsdGEgYmV0d2VlbiBmcmFtZXMuXG4gICAqL1xuICBwdWJsaWMgbW92ZVMoZGVsdGE6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIEluY3JlYXNpbmcge3l9IG1ha2VzIHRoZSBhY3RvciBtb3ZlIHNvdXRoLCBzaW5jZSB3ZSdyZSBkZWFsaW5nIHdpdGggYSAyRFxuICAgIC8vIGFycmF5IGFuZCBub3QgYW4gYWN0dWFsIG1hdGhlbWF0aWNhbCBncmlkIHBsYW5lLlxuICAgIHRoaXMucG9zaXRpb24ueSArPSB0aGlzLnNwZWVkICogZGVsdGE7XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0aGUgUGxheWVyIGVhc3QuXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgZ2FtZSdzIGRlbHRhIGJldHdlZW4gZnJhbWVzLlxuICAgKi9cbiAgcHVibGljIG1vdmVFKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnBvc2l0aW9uLnggKz0gdGhpcy5zcGVlZCAqIGRlbHRhO1xuICB9XG5cbiAgICAvKipcbiAgICogTW92ZSB0aGUgUGxheWVyIHdlc3QuXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgZ2FtZSdzIGRlbHRhIGJldHdlZW4gZnJhbWVzLlxuICAgKi9cbiAgcHVibGljIG1vdmVXKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnBvc2l0aW9uLnggLT0gdGhpcy5zcGVlZCAqIGRlbHRhO1xuICB9XG5cbn1cblxuIiwiLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgW1tHYW1lQWN0b3JdXSBjbGFzcy5cbiAqXG4gKiBAaW50ZXJmYWNlIElHYW1lQWN0b3JcbiAqL1xuaW50ZXJmYWNlIElHYW1lT2JqZWN0IHtcblxuICAvKipcbiAgICogS2VlcHMgdHJhY2sgb2YgdGhlIGBpZGAgb2YgdGhlIGxhc3QgR2FtZU9iamVjdCBpbnN0YW50aWF0ZWQuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGlkSW5jcmVtZW50b3I6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGBpZGAgb2YgdGhlIEdhbWVPYmplY3QuXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBpZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgR2FtZU9iamVjdC5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHR5cGU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGh1bWFuLXJlYWRhYmxlIG5hbWUgb2YgdGhlIEdhbWVPYmplY3QuIFRoaXMgd2lsbCBhcHBlYXIgaW4tZ2FtZS5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc2lnbmF0dXJlIGZvciB0aGUgdXBkYXRlIG1ldGhvZCBmb3IgdGhlIEdhbWVBY3Rvci5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgdGltZSBkaWZmZXJlbmNlIGJldHdlZW4gZnJhbWVzLiBQcm92aWRlZCBieSB0aGUgZ2FtZSdzXG4gICAqIG1haW4gZ2FtZSBsb29wLlxuICAgKiBAc2VlIEZpZW5kR2FtZS5tYWluKClcbiAgICovXG4gIHVwZGF0ZShkZWx0YTogbnVtYmVyKTogdm9pZDtcbn1cblxuLyoqXG4gKiBUaGUgR2FtZU9iamVjdCBhYnN0cmFjdCBjbGFzcy4gQWxsIGdhbWUgZW50aXRpZXMgaW5oZXJpdCBmcm9tIHRoaXMgY2xhc3MuXG4gKiBPbiBpbnN0YW50aWF0aW9uLCB0aGUgY2xhc3Mgd2lsbCBnZW5lcmF0ZSBhbiBhdXRvLWluY3JlbWVudGluZyBpZCBmb3IgdXNlXG4gKiBpbiBpZGVudGlmeWluZyB0aGUgbmV3bHktY3JlYXRlZCBHYW1lT2JqZWN0LlxuICpcbiAqIEBhYnN0cmFjdFxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgR2FtZU9iamVjdCB7XG5cbiAgLyoqXG4gICAqIEtlZXBzIHRyYWNrIG9mIHRoZSBgaWRgIG9mIHRoZSBsYXN0IEdhbWVPYmplY3QgaW5zdGFudGlhdGVkLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBpZEluY3JlbWVudG9yOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgaW5zdGFuY2Ugb2YgdGhlIEdhbWVPYmplY3QuXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBwcml2YXRlIGlkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAgKiBAdmFyIHR5cGUgVGhlIG5hbWUgb2YgdGhlIHR5cGUgb2YgdGhlIEdhbWVPYmplY3QuXG4gICAgKi9cbiAgcHJvdGVjdGVkIHR5cGU6IHN0cmluZztcblxuICAvKipcbiAgICogQHZhciBuYW1lIFRoZSBodW1hbml6ZWQgbmFtZSBvZiB0aGUgR2FtZU9iamVjdC5cbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBHYW1lT2JqZWN0IGNvbnN0cnVjdG9yLiBBdXRvLWluY3JlbWVudHMgdGhlIEdhbWVPamVjdCBpZCBmb3IgdGhlIG5ld1xuICAgKiBHYW1lT2JqZWN0IGJlaW5nIGNyZWF0ZWQuXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pZCA9IEdhbWVPYmplY3QuaWRJbmNyZW1lbnRvcisrO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjY2Vzc29yIGZvciB0aGUgcHJpdmF0ZSBtZW1iZXIgYGlkYC5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGlkIG9mIHRoZSBHYW1lT2JqZWN0XG4gICAqL1xuICBwdWJsaWMgZ2V0SWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBHYW1lT2JqZWN0J3Mgc3RhdGUuIEludGVuZGVkIHRvIGJlIHJ1biBpbiB0aGUgbWFpbiBnYW1lIGxvb3AuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIHRpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIGZyYW1lcy4gUHJvdmlkZWQgYnkgdGhlIGdhbWUnc1xuICAgKiBtYWluIGdhbWUgbG9vcC5cbiAgICogQHNlZSBGaWVuZEdhbWUubWFpbigpXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3QgdXBkYXRlKGRlbHRhOiBudW1iZXIpOiB2b2lkO1xufVxuIiwiLyoqXG4gKiBAZmlsZSBUaGUgR2FtZU9iamVjdCBCYXJyZWwuIFJlLWV4cG9ydHMgR2FtZU9iamVjdCBmaWxlcyBmb3IgZWFzaWVyIGltcG9ydFxuICogZWxzZXdoZXJlLlxuICogQHNlZSBAbGluayBodHRwczovL2Jhc2FyYXQuZ2l0Ym9va3MuaW8vdHlwZXNjcmlwdC9kb2NzL3RpcHMvYmFycmVsLmh0bWxcbiAqL1xuXG4vKipcbiAqIFByb2dlbml0b3IgY2xhc3NlcyBmb3IgYWxsIGVudGl0aWVzIGluIHRoZSBnYW1lLlxuICovXG5leHBvcnQgKiBmcm9tICcuL0dhbWVPYmplY3QnO1xuXG4vKipcbiAqIFRoZSBiYXNlIEdhbWVBY3RvciBjbGFzcy4gQWxsIEdhbWVPYmplY3RzIHRoYXQgY2FuIGluZmx1ZW5jZSB0aGluZ3MgaW4gdGhlXG4gKiBlbnZpcm9ubWVudCB3aWxsIGRlcml2ZSBmcm9tIHRoZSBHYW1lQWN0b3IgY2xhc3MuXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vR2FtZUFjdG9yL0dhbWVBY3Rvcic7XG5cbi8qKlxuICogVGhlIHBsYXllciBjaGFyYWN0ZXIgY2xhc3MuXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vR2FtZUFjdG9yL1BsYXllcic7XG5cbi8qKlxuICogVGhlIGJhc2UgZW5lbXkgY2xhc3MuIFRPRE86IE1pZ2h0IGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9HYW1lQWN0b3IvRW5lbXknO1xuIiwiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCIuLi9Db21tYW5kXCI7XG5pbXBvcnQgeyBHYW1lQWN0b3IgfSBmcm9tICcuLi9HYW1lT2JqZWN0JztcblxuaW1wb3J0IHsgTnVsbENvbW1hbmQgfSBmcm9tIFwiLi4vQ29tbWFuZFwiO1xuaW1wb3J0IHsgTW92ZU5vcnRoQ29tbWFuZCB9IGZyb20gXCIuLi9Db21tYW5kXCI7XG5pbXBvcnQgeyBNb3ZlU291dGhDb21tYW5kIH0gZnJvbSBcIi4uL0NvbW1hbmRcIjtcbmltcG9ydCB7IE1vdmVFYXN0Q29tbWFuZCB9IGZyb20gXCIuLi9Db21tYW5kXCI7XG5pbXBvcnQgeyBNb3ZlV2VzdENvbW1hbmQgfSBmcm9tIFwiLi4vQ29tbWFuZFwiO1xuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBJbnB1dEhhbmRsZXJcbiAqL1xuaW50ZXJmYWNlIElJbnB1dEhhbmRsZXIge1xuXG4gIC8qKlxuICAgKiBCaW5kcyBhbiBpbnB1dCB0byBhIGNvbW1hbmQuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudCBUaGUgdXNlciBpbnRlcmFjdGlvbiB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIEBwYXJhbSBjb21tYW5kXG4gICAqL1xuICBrZXlCaW5kKGV2ZW50OiBLZXlib2FyZEV2ZW50LCBjb21tYW5kOiBDb21tYW5kKTogdm9pZDtcblxuICAvKipcbiAgICogSGFuZGxlcyBhbnkgaW5wdXQgaWYgYSBtYXBwZWQgYnV0dG9uIGlzIHByZXNzZWQuIFJ1biBvbmNlIHBlciBnYW1lIHVwZGF0ZVxuICAgKiB0aWNrLlxuICAgKlxuICAgKiBAcGFyYW0gYWN0b3IgVGhlIGdhbWUgYWN0b3IgZW50aXR5IHRvIGhhbmRsZSBpbnB1dC4gTW9zdCBsaWtlbHkgd2lsbCBiZSB0aGVcbiAgICogUGxheWVyKHMpLlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlXG4gICAqL1xuICBoYW5kbGVJbnB1dChhY3RvcjogR2FtZUFjdG9yLCBkZWx0YTogbnVtYmVyKTogdm9pZDtcbn1cblxuLyoqXG4gKiBUaGUgSUlucHV0TWFwIGludGVyZmFjZS5cbiAqIEBrZXlzXG4gKiBba2V5XTogVGhlIG5hbWUgb2YgdGhlIGtleSBwcmVzc2VkLCBzZW50IGJ5IHRoZSBicm93c2VyLmhlYWRlclxuICogW2NvbW1hbmRdOiBUaGUgbWFwcGVkIGNvbW1hbmQgdG8gYmUgZXhlY3V0ZWQuXG4gKiBbc3RhdHVzXTogVGhlIGJ1dHRvbidzIGN1cnJlbnQgc3RhdHVzXG4gKi9cbmludGVyZmFjZSBJSW5wdXRNYXAge1xuICBba2V5OiBzdHJpbmddOiB7XG4gICAgY29tbWFuZDogQ29tbWFuZCxcbiAgICBzdGF0dXM6IEJ1dHRvblN0YXR1c1xuICB9XG59XG5cbi8qKlxuICogVGhlIGJ1aWx0LWluIGNvbnRyb2wgc2NoZW1lIHR5cGVzLiBBbGxvd3MgYSB1c2VyIHRvIGNoYW5nZSB0aGUgY29udHJvbCBzY2hlbWVcbiAqIHdpdGhvdXQgcmVtYXBwaW5nIGFsbCB0aGUga2V5cyBpbmRpdmlkdWFsbHkuXG4gKlxuICogQHR5cGUge2VudW19IENvbnRyb2xTY2hlbWVzXG4gKi9cbmVudW0gQ29udHJvbFNjaGVtZXMge1xuICBERUZBVUxULFxuICBGUFMsXG4gIE9ORUhBTkRFRF9SSUdIVCxcbiAgT05FSEFOREVEX0xFRlQsXG59XG5cbi8qKlxuICogTWFwcyBhIGJ1dHRvbiB0byBhIGtleWJvYXJkIGlucHV0IGtleS5cbiAqXG4gKiBAdHlwZSB7ZW51bX0gQnV0dG9uXG4gKi9cbmVudW0gQnV0dG9uIHtcbiAgVVAgPSBcIkFycm93VXBcIixcbiAgRE9XTiA9IFwiQXJyb3dEb3duXCIsXG4gIExFRlQgPSBcIkFycm93TGVmdFwiLFxuICBSSUdIVCA9IFwiQXJyb3dSaWdodFwiLFxuICBFID0gXCJlXCIsXG4gIFEgPSBcInFcIixcbiAgQlNQQUNFID0gXCJCYWNrc3BhY2VcIixcbiAgRU5URVIgPSBcIkVudGVyXCIsXG4gIFNISUZUID0gXCJTaGlmdFwiLFxufVxuXG4vKipcbiAqIFRoZSBCdXR0b25TdGF0dXMgZW51bS5cbiAqIEB2YWx1ZXNcbiAqIFtQUkVTU0VEXTogVGhlIGJ1dHRvbiBpcyBwcmVzc2VkLlxuICogW1JBSVNFRF06IFRoZSBidXR0b24gaXMgTk9UIHByZXNzZWQsIGl0IGlzIHJhaXNlZC4gQWxzbyBjYW4gYmUgY29uc2lkZXJlZFxuICogXCJ1bnRvdWNoZWRcIiBieSB0aGUgcGxheWVyLlxuICogW0hFTERdOiBUaGUgYnV0dG9uIGlzIGhlbGQgZG93bi5cbiAqIFtSRUxFQVNFRF06IFRoZSBidXR0b24gaGFzIGJlZW4gcmVsZWFzZWQgZnJvbSBhIHByZXNzZWQgc3RhdGUuXG4gKiBbRElTQUJMRURdOiBUaGUgYnV0dG9uIGhhcyBiZWVuIGRpc2FibGVkIGFuZCB3aWxsIG5vdCBmaXJlIGV2ZW50cy5cbiAqXG4gKiBAdHlwZSB7ZW51bX0gQnV0dG9uU3RhdHVzXG4gKi9cbiBlbnVtIEJ1dHRvblN0YXR1cyB7XG4gIFBSRVNTRUQsXG4gIFJBSVNFRCxcbiAgSEVMRCxcbiAgUkVMRUFTRUQsXG4gIERJU0FCTEVELFxufVxuXG4vKipcbiAqIFRoZSBJbnB1dEhhbmRsZXIgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnB1dEhhbmRsZXIgaW1wbGVtZW50cyBJSW5wdXRIYW5kbGVyIHtcblxuICAvKipcbiAgICogVE9ETyBTdHJ1Y3R1cmUgc2hvdWxkIGFkZCBbXCJjb250ZXh0XCJdIHNvIHdlIGNhbiBoYXZlIGNvbnRleHQtaW5kZXBlbmRlbnRcbiAgICogYnV0dG9uc1xuICAgKiBAdHlwZSB7SUlucHV0TWFwfSBUaGUgaW5wdXRNYXAgaW5zdGFuY2UuXG4gICAqL1xuICBwcml2YXRlIGlucHV0TWFwOiBJSW5wdXRNYXA7XG5cbiAgLyoqXG4gICAqIFRoZSBJbnB1dEhhbmRsZXIgY29uc3RydWN0b3IuXG4gICAqIEF0dGFjaGVzIHRoZSBrZXlkb3duIGFuZCBrZXl1cCBLZXlib2FyZEV2ZW50IHRvIHRoZSBkb2N1bWVudC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWUtcGFuZScpLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAna2V5ZG93bicsIChldmVudCkgPT4gdGhpcy5idXR0b25QcmVzc2VkKGV2ZW50KSwgZmFsc2VcbiAgICApO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWUtcGFuZScpLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAna2V5dXAnLCAoZXZlbnQpID0+IHRoaXMuYnV0dG9uUmVsZWFzZWQoZXZlbnQpLCBmYWxzZVxuICAgICk7XG5cbiAgICB0aGlzLmlucHV0TWFwID0gdGhpcy5pbml0SW5wdXRNYXAoKTtcblxuICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIHJlYWQgaW4gdXNlci1kZWZpbmVkIGlucHV0IG1hcHBpbmdzLCBvdGhlcml3c2UgbG9hZFxuICAgIC8vIGRlZmF1bHQgc2V0dGluZ3MuIChpZiB1c2VyIGhhcyBzYXZlZCBjb250cm9sIHNjaGVtZSwgZWxzZSBsb2FkIGRlZmF1bHQpXG4gICAgdGhpcy5sb2FkQ29udHJvbFNjaGVtZShDb250cm9sU2NoZW1lcy5ERUZBVUxUKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCaW5kcyBhbiBpbnB1dCB0byBhIGNvbW1hbmQuXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgVGhlIGtleSB0byBiaW5kIHRoZSBldmVudCB0b1xuICAgKiBAcGFyYW0ge0NvbW1hbmR9IGNvbW1hbmQgVGhlIGNvbW1hbmQgdG8gYmluZCB0byB0aGUgYnV0dG9uXG4gICAqL1xuICBwdWJsaWMga2V5QmluZChldmVudDogS2V5Ym9hcmRFdmVudCwgY29tbWFuZDogQ29tbWFuZCk6IHZvaWQge1xuICAgIHRoaXMuaW5wdXRNYXBbZXZlbnQua2V5XS5jb21tYW5kID0gY29tbWFuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbnMgaWYgYSBidXR0b24gd2FzIHByZXNzZWQuIENhbGxiYWNrIGZvciB3aGVuIGEgYnV0dG9uIGlzIHByZXNzZWQgYnlcbiAgICogdGhlIHVzZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgVGhlIHVzZXIgaW50ZXJhY3Rpb24gd2l0aCBhIGtleWJvYXJkLlxuICAgKi9cbiAgcHVibGljIGJ1dHRvblByZXNzZWQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKHRoaXMuaW5wdXRNYXBbZXZlbnQua2V5XSkge1xuICAgICAgdGhpcy5pbnB1dE1hcFtldmVudC5rZXldLnN0YXR1cyA9IEJ1dHRvblN0YXR1cy5QUkVTU0VEO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmb3Igd2hlbiBhIGJ1dHRvbiBpcyByZWxlYXNlZCBieSB0aGUgdXNlci5cbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCBUaGUgdXNlciBpbnRlcmFjdGlvbiB3aXRoIGEga2V5Ym9hcmQuXG4gICAqL1xuICBwcml2YXRlIGJ1dHRvblJlbGVhc2VkKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICh0aGlzLmlucHV0TWFwW2V2ZW50LmtleV0pIHtcbiAgICAgIHRoaXMuaW5wdXRNYXBbZXZlbnQua2V5XS5zdGF0dXMgPSBCdXR0b25TdGF0dXMuUkFJU0VEO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHVzZXIgaW5wdXQuIFJ1bnMgb25jZSBwZXIgZ2FtZSBsb29wLlxuICAgKi9cbiAgcHVibGljIGhhbmRsZUlucHV0KGFjdG9yOiBHYW1lQWN0b3IsIGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcblxuICAgIGlmICh0aGlzLmlucHV0TWFwW0J1dHRvbi5VUF0uc3RhdHVzID09PSBCdXR0b25TdGF0dXMuUFJFU1NFRCkge1xuICAgICAgdGhpcy5pbnB1dE1hcFtCdXR0b24uVVBdLmNvbW1hbmQuZXhlY3V0ZShhY3RvciwgZGVsdGEpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pbnB1dE1hcFtCdXR0b24uRE9XTl0uc3RhdHVzID09PSBCdXR0b25TdGF0dXMuUFJFU1NFRCkge1xuICAgICAgdGhpcy5pbnB1dE1hcFtCdXR0b24uRE9XTl0uY29tbWFuZC5leGVjdXRlKGFjdG9yLCBkZWx0YSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlucHV0TWFwW0J1dHRvbi5MRUZUXS5zdGF0dXMgPT09IEJ1dHRvblN0YXR1cy5QUkVTU0VEKSB7XG4gICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5MRUZUXS5jb21tYW5kLmV4ZWN1dGUoYWN0b3IsIGRlbHRhKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXRNYXBbQnV0dG9uLlJJR0hUXS5zdGF0dXMgPT09IEJ1dHRvblN0YXR1cy5QUkVTU0VEKSB7XG4gICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5SSUdIVF0uY29tbWFuZC5leGVjdXRlKGFjdG9yLCBkZWx0YSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlucHV0TWFwW0J1dHRvbi5FXS5zdGF0dXMgPT09IEJ1dHRvblN0YXR1cy5QUkVTU0VEKSB7XG4gICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5FXS5jb21tYW5kLmV4ZWN1dGUoYWN0b3IsIGRlbHRhKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXRNYXBbQnV0dG9uLlFdLnN0YXR1cyA9PT0gQnV0dG9uU3RhdHVzLlBSRVNTRUQpIHtcbiAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLlFdLmNvbW1hbmQuZXhlY3V0ZShhY3RvciwgZGVsdGEpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pbnB1dE1hcFtCdXR0b24uQlNQQUNFXS5zdGF0dXMgPT09IEJ1dHRvblN0YXR1cy5QUkVTU0VEKSB7XG4gICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5CU1BBQ0VdLmNvbW1hbmQuZXhlY3V0ZShhY3RvciwgZGVsdGEpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pbnB1dE1hcFtCdXR0b24uRU5URVJdLnN0YXR1cyA9PT0gQnV0dG9uU3RhdHVzLlBSRVNTRUQpIHtcbiAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLkVOVEVSXS5jb21tYW5kLmV4ZWN1dGUoYWN0b3IsIGRlbHRhKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXRNYXBbQnV0dG9uLlNISUZUXS5zdGF0dXMgPT09IEJ1dHRvblN0YXR1cy5QUkVTU0VEKSB7XG4gICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5TSElGVF0uY29tbWFuZC5leGVjdXRlKGFjdG9yLCBkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGFuIGlucHV0IG1hcCBzbyB0aGUgc3RydWN0dXJlIGlzIGF2YWlsYWJsZSB3aGVuIG5lZWRlZC5cbiAgICpcbiAgICogQHJldHVybiB7SUlucHV0TWFwfSBUaGUgSUlucHV0TWFwIGludGVyZmFjZS5cbiAgICovXG4gIHByaXZhdGUgaW5pdElucHV0TWFwKCk6IElJbnB1dE1hcCB7XG4gICAgbGV0IGlwID0ge307XG5cbiAgICBmb3IobGV0IGJ1dHRvbktleSBpbiBCdXR0b24pIHtcbiAgICAgIGlwW0J1dHRvbltidXR0b25LZXldXSA9IHtcbiAgICAgICAgY29tbWFuZDogTnVsbENvbW1hbmQsXG4gICAgICAgIHN0YXR1czogQnV0dG9uU3RhdHVzLlJBSVNFRFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyBhIGNvbnRyb2wgc2NoZW1lIHdoZW4gdGhlIGdhbWUgZmlyc3QgaW5pdGlhbGl6ZXMsIHNvIHRoZSBwbGF5ZXIgY2FuXG4gICAqIGhhdmUgc29tZSBpbnB1dC4gU3VwcG9ydHMgbXVsdGlwbGUgY29udHJvbCBzY2hlbWVzIHNvIHBsYXllcnMgY2FuIHJlLW1hcFxuICAgKiBjb250cm9scyB3aXRob3V0IGhhdmluZyB0byByZS1tYXAgZWFjaCBidXR0b24gaW5kaXZpZHVhbGx5LlxuICAgKlxuICAgKiBAcGFyYW0gY29udHJvbFNjaGVtZVxuICAgKi9cbiAgcHJpdmF0ZSBsb2FkQ29udHJvbFNjaGVtZShjb250cm9sU2NoZW1lOiBDb250cm9sU2NoZW1lcyk6IHZvaWQge1xuICAgIHN3aXRjaChjb250cm9sU2NoZW1lKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gdGhpcy5pbnB1dE1hcFtCdXR0b24uVVBdLmNvbW1hbmQgPSBuZXcgTW92ZU5vcnRoQ29tbWFuZChwbGF5ZXI6IEdhbWVBY3Rvcik7XG4gICAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLlVQXS5jb21tYW5kID0gbmV3IE1vdmVOb3J0aENvbW1hbmQoKTtcbiAgICAgICAgdGhpcy5pbnB1dE1hcFtCdXR0b24uRE9XTl0uY29tbWFuZCA9IG5ldyBNb3ZlU291dGhDb21tYW5kKCk7XG4gICAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLkxFRlRdLmNvbW1hbmQgPSBuZXcgTW92ZVdlc3RDb21tYW5kKCk7XG4gICAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLlJJR0hUXS5jb21tYW5kID0gbmV3IE1vdmVFYXN0Q29tbWFuZCgpO1xuICAgICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5FXS5jb21tYW5kID0gbmV3IE51bGxDb21tYW5kKCk7XG4gICAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLlFdLmNvbW1hbmQgPSBuZXcgTnVsbENvbW1hbmQoKTtcbiAgICAgICAgdGhpcy5pbnB1dE1hcFtCdXR0b24uQlNQQUNFXS5jb21tYW5kID0gbmV3IE51bGxDb21tYW5kKCk7XG4gICAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLkVOVEVSXS5jb21tYW5kID0gbmV3IE51bGxDb21tYW5kKCk7XG4gICAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLlNISUZUXS5jb21tYW5kID0gbmV3IE51bGxDb21tYW5kKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIHZhciBrZXkgPSB7XG4vLyAgIEJBQ0tTUEFDRTogOCxcbi8vICAgVEFCOiAgICAgICA5LFxuLy8gICBSRVRVUk46ICAgMTMsXG4vLyAgIEVTQzogICAgICAyNyxcbi8vICAgU1BBQ0U6ICAgIDMyLFxuLy8gICBQQUdFVVA6ICAgMzMsXG4vLyAgIFBBR0VET1dOOiAzNCxcbi8vICAgRU5EOiAgICAgIDM1LFxuLy8gICBIT01FOiAgICAgMzYsXG4vLyAgIExFRlQ6ICAgICAzNyxcbi8vICAgVVA6ICAgICAgIDM4LFxuLy8gICBSSUdIVDogICAgMzksXG4vLyAgIERPV046ICAgICA0MCxcbi8vICAgSU5TRVJUOiAgIDQ1LFxuLy8gICBERUxFVEU6ICAgNDYsXG4vLyAgIFpFUk86ICAgICA0OCwgT05FOiA0OSwgVFdPOiA1MCwgVEhSRUU6IDUxLCBGT1VSOiA1MiwgRklWRTogNTMsIFNJWDogNTQsIFNFVkVOOiA1NSwgRUlHSFQ6IDU2LCBOSU5FOiA1Nyxcbi8vICAgQTogICAgICAgIDY1LCBCOiA2NiwgQzogNjcsIEQ6IDY4LCBFOiA2OSwgRjogNzAsIEc6IDcxLCBIOiA3MiwgSTogNzMsIEo6IDc0LCBLOiA3NSwgTDogNzYsIE06IDc3LCBOOiA3OCwgTzogNzksIFA6IDgwLCBROiA4MSwgUjogODIsIFM6IDgzLCBUOiA4NCwgVTogODUsIFY6IDg2LCBXOiA4NywgWDogODgsIFk6IDg5LCBaOiA5MCxcbi8vICAgVElMREE6ICAgIDE5MlxuLy8gfTtcbiIsImludGVyZmFjZSBJQ2FtZXJhIHtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIGNhbWVyYS5cbiAgICovXG4gIHBvc2l0aW9uOiBDb29yZGluYXRlO1xuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIENhbWVyYSdzIHZpZXdwb3J0LlxuICAgKi9cbiAgd2lkdGg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGhlaWdodCBvZiB0aGUgQ2FtZXJhJ3Mgdmlld3BvcnQuXG4gICAqL1xuICBoZWlnaHQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGxpbWl0IGZvciB0aGUgY2FtZXJhJ3MgcG9zaXRpb24g4oCUIFRoZSBsb3dlciBsaW1pdCB3aWxsIG5lYXJseSBhbHdheXMgYmVcbiAgICogKDAsMCkuIFRoZSB1cHBlciBsaW1pdCBpcyBlcXVhbCB0byB0aGUgc2l6ZSBvZiB0aGUgd29ybGQgbWludXMgdGhlIHNpemUgb2ZcbiAgICogdGhlIGNhbWVyYSdzIHZpZXdwb3J0LlxuICAgKi9cbiAgbWF4WDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbGltaXQgZm9yIHRoZSBjYW1lcmEncyBwb3NpdGlvbiDigJQgVGhlIGxvd2VyIGxpbWl0IHdpbGwgbmVhcmx5IGFsd2F5cyBiZVxuICAgKiAoMCwwKS4gVGhlIHVwcGVyIGxpbWl0IGlzIGVxdWFsIHRvIHRoZSBzaXplIG9mIHRoZSB3b3JsZCBtaW51cyB0aGUgc2l6ZSBvZlxuICAgKiB0aGUgY2FtZXJhJ3Mgdmlld3BvcnQuXG4gICAqL1xuICBtYXhZOiBudW1iZXI7XG5cbn1cblxuZXhwb3J0IGNsYXNzIENhbWVyYSBpbXBsZW1lbnRzIElDYW1lcmEge1xuXG4gIHBvc2l0aW9uOiBDb29yZGluYXRlO1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgbWF4WDogbnVtYmVyO1xuICBtYXhZOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG59XG4iLCJpbXBvcnQgeyBNYXBCYXNlIH0gZnJvbSBcIi4uL2F0bGFzZXMvTWFwQmFzZVwiO1xuaW1wb3J0IHsgT3ZlcndvcmxkIH0gZnJvbSBcIi4uL2F0bGFzZXMvT3ZlcndvcmxkXCI7XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJlciB7XG5cbiAgRU1QVFlfVElMRTogbnVtYmVyO1xuICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgcGl4ZWxzOiBudW1iZXI7XG4gIHNjYWxlOiBudW1iZXI7XG4gIHNjZW5lV2lkdGg6IG51bWJlcjtcbiAgc2NlbmVIZWlnaHQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVE9ETzogQ2hhbmdlIHRoaXMgdG8gYmUgdGhlIHNjZW5lLiBSZWNyZWF0ZSB0aGUgUmVuZGVyZXIgd2hlbiBhIG5ldyBzY2VuZVxuICAgKiBpcyBsb2FkZWQuXG4gICAqL1xuICBwcm90ZWN0ZWQgX2N1cnJlbnRNYXA6IE1hcEJhc2U7XG5cbiAgY29uc3RydWN0b3IoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xuXG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FudmFzIGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAdmFyIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9XG4gICAgICovXG4gICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIC8qKlxuICAgICAqIFByZXZlbnQgYW50aS1hbGlhc2luZyBpbiB0aGUgZXZlbnQgYSB0aWxlIGdldHMgc2NhbGVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkfVxuICAgICAqL1xuICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBlbXB0eSB0aWxlIHZhbHVlLiBJZiB0aGlzIHZhbHVlIGlzIHNldCBmb3IgYSBwb3NpdGlvbiBpbiBhIG1hcCdzXG4gICAgICogYXJyYXksIGl0IHdpbGwgbm90IGJlIHJlbmRlcmVkLlxuICAgICAqIFRPRE86IE1vdmUgdGhpcyB0byB0aGUgU2NlbmUuXG4gICAgICpcbiAgICAgKiBAdmFyIHtpbnRlZ2VyfVxuICAgICAqL1xuICAgIHRoaXMuRU1QVFlfVElMRSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVyIGZvciB4LHkgcG9zaXRpb24gdG8gcGl4ZWxzLiBXaGF0IHNpemUgdGhlIHRpbGVzIGZvciB0aGUgZ2FtZVxuICAgICAqIHdpbGwgYmUgcmVuZGVyZWQgYXQuIEFsd2F5cyB1c2UgYSBwb3dlciBvZiAyIHNvIHRoZSBzY2FsaW5nIHByZXZlbnRzXG4gICAgICogYmx1cnJpbmcuXG4gICAgICpcbiAgICAgKiBAdmFyIHtpbnRlZ2VyfVxuICAgICAqL1xuICAgIHRoaXMucGl4ZWxzID0gMzI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2NhbGUgYXQgd2hpY2ggdGhlIHRpbGUgd2lsbCBiZSByZW5kZXJlZC4gMSA9IDF4IHNjYWxpbmcsIDIgPSAyeFxuICAgICAqIHNjYWxpbmcsIGV0Yy5cbiAgICAgKlxuICAgICAqIEB2YXIge2ludGVnZXJ9XG4gICAgICovXG4gICAgdGhpcy5zY2FsZSA9IDE7XG5cbiAgICB0aGlzLl9jdXJyZW50TWFwID0gbmV3IE92ZXJ3b3JsZCgpO1xuICB9XG5cbiAgZHJhdyhnYW1lT2JqZWN0Q291bnQ6IG51bWJlciwgZ2FtZU9iamVjdHM6IEFycmF5PGFueT4pIHtcblxuICAgIC8vIENsZWFyIHRoZSBzY3JlZW5cbiAgICAvLyBUT0RPOiBQdWxsIHRoaXMgb3V0LiBQdXQgaW4gcmVuZGVyZXIuXG4gICAgdGhpcy5jdHguY2xlYXJSZWN0KFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICB0aGlzLmNhbnZhcy53aWR0aCxcbiAgICAgIHRoaXMuY2FudmFzLmhlaWdodFxuICAgICk7XG5cbiAgICAvLyBBbHdheXMgc3RvcmUgdGhlIHRleHR1cmUgaW4gYSB2YXIgc28gd2UgZG9uJ3QgY2FsbCBcIm5ldyBGb28oKVwiIG11bHRpcGxlXG4gICAgLy8gdGltZXMgYSBzZWNvbmQuXG4gICAgdGhpcy5kcmF3VGlsZU1hcCh0aGlzLl9jdXJyZW50TWFwKTtcblxuICAgIGZvciAobGV0IGk9MDsgaTxnYW1lT2JqZWN0Q291bnQ7IGkrKykge1xuICAgICAgZ2FtZU9iamVjdHNbaV0uZHJhdyh0aGlzLmN0eCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgYSBtYXAgYWNjb3JkaW5nIHRvIHRoZSBjb29yZGluYXRlcyBnaXZlbiBpbiB0aGUgbWFwJ3MgZmlsZSBieVxuICAgKiB0cmFuc2xhdGluZyB0aGUgY29vcmRpbmF0ZXMgdG8gYSBzcHJpdGVzaGVldC5cbiAgICpcbiAgICogSWYgYSB0aWxlIGlzIDMyeDMyIHBpeGVscywgdGhlIDFzdCB0aWxlIHdpbGwgc3RhcnQgYXQgKDAsMCkgb25cbiAgICogdGhlIHNwcml0ZXNoZWV0LCB0aGUgMm5kIHRpbGUgd2lsbCBzdGFydCBhdCAoMzIsMCksIHRoZSAzNGQgYXQgKDY0LDApIGFuZFxuICAgKiBzbyBvbi5cbiAgICpcbiAgICogKy0tLSstLS0rLS0tKy0tLStcbiAgICogfCAxIHwgMiB8IDMgfCA0IHxcbiAgICogKy0tLSstLS0rLS0tKy0tLStcbiAgICogfCA1IHwgNiB8IDcgfCA4IHxcbiAgICogKy0tLSstLS0rLS0tKy0tLStcbiAgICpcbiAgICogJ3NvdXJjZSB4JyBhbmQgJ3NvdXJjZSB5JyB3aWxsIGdldCB0aGUgY29ycmVjdCBjb29yZHMgaW4gdGhlIGltYWdlIGZpbGUuXG4gICAqIFNvIGZvciBvdXIgZmlyc3QgdGlsZSwgJzEnLCBkcmF3SW1hZ2Ugd2lsbCBncmFiIHRoZSBzdWJpbWFnZSBhdCAoMzIsMCkuXG4gICAqIGRyYXdJbWFnZSB3b3VsZCBnZXQgdGhlIHN1YmltYWdlIGF0ICg2NCwzMikgZm9yIHRpbGUgJzcnLlxuICAgKlxuICAgKiBUT0RPICBodHRwczovL2hhc2hyb2NrZXQuY29tL2Jsb2cvcG9zdHMvdXNpbmctdGlsZWQtYW5kLWNhbnZhcy10by1yZW5kZXItZ2FtZS1zY3JlZW5zXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgIFRoZSBtYXAgb2JqZWN0IHRoYXQgZXh0ZW5kcyBNYXBCYXNlLlxuICAgKi9cbiAgZHJhd1RpbGVNYXAobWFwOiBNYXBCYXNlKTogdm9pZCB7XG4gICAgZm9yIChsZXQgeD0wOyB4PG1hcC5jb2xzOyB4KyspIHtcbiAgICAgIGZvciAobGV0IHk9MDsgeTxtYXAucm93czsgeSsrKSB7XG4gICAgICAgIGxldCB0aWxlID0gbWFwLmdldFRpbGUoeCwgeSk7XG5cbiAgICAgICAgLy8gTGV0J3Mgc2tpcCByZW5kZXJpbmcgZW1wdHkgdGlsZXMuXG4gICAgICAgIGlmICh0aWxlICE9PSB0aGlzLkVNUFRZX1RJTEUpIHtcbiAgICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICAvLyBJbWFnZSBTb3VyY2VcbiAgICAgICAgICAgIG1hcC5TTSxcbiAgICAgICAgICAgIC8vIFNvdXJjZSB4IChTZWUgZXhhbXBsZSBpbiBjb21tZW50IGJsb2NrKVxuICAgICAgICAgICAgKCh0aWxlIC0gMSkgJSBtYXAuY29scykgKiB0aGlzLnBpeGVscyxcbiAgICAgICAgICAgIC8vIFNvdXJjZSB5IChTZWUgZXhhbXBsZSBpbiBjb21tZW50IGJsb2NrKVxuICAgICAgICAgICAgTWF0aC5mbG9vcigoKHRpbGUgLSAxKSAvIG1hcC5yb3dzKSkgKiB0aGlzLnBpeGVscyxcbiAgICAgICAgICAgIC8vIFNvdXJjZSB3aWR0aFxuICAgICAgICAgICAgdGhpcy5waXhlbHMsXG4gICAgICAgICAgICAvLyBTb3VyY2UgaGVpZ2h0XG4gICAgICAgICAgICB0aGlzLnBpeGVscyxcbiAgICAgICAgICAgIC8vIFRhcmdldCB4XG4gICAgICAgICAgICB4ICogKHRoaXMucGl4ZWxzICogdGhpcy5zY2FsZSksXG4gICAgICAgICAgICAvLyBUYXJnZXQgeVxuICAgICAgICAgICAgeSAqICh0aGlzLnBpeGVscyAqIHRoaXMuc2NhbGUpLFxuICAgICAgICAgICAgLy8gVGFyZ2V0IHdpZHRoXG4gICAgICAgICAgICB0aGlzLnBpeGVscyAqIHRoaXMuc2NhbGUsXG4gICAgICAgICAgICAgLy8gVGFyZ2V0IGhlaWdodFxuICAgICAgICAgICAgdGhpcy5waXhlbHMgKiB0aGlzLnNjYWxlLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEZpZW5kR2FtZSB9IGZyb20gXCIuL2VuZ2luZS9GaWVuZEdhbWVcIjtcbmltcG9ydCB7IEFzc2V0TG9hZGVyIH0gZnJvbSBcIi4vZW5naW5lL0Fzc2V0TG9hZGVyXCI7XG5cbi8qKlxuICogV2UgbmVlZCBzb21lIGdsb2JhbCB2YXJpYWJsZXMgc28gd2UgY2FuIGxvYWQgdGhlIGdhbWUgYW5kIHRoZSBhc3NldHMuIExldCdzXG4gKiBjb25zaWRlciBtb3ZpbmcgdGhlIEZfTE9BREVSIHRvIGl0J3Mgb3duIGNsYXNzIHNvIHdlIGRvbid0IG5lZWQgYSBnbG9iYWwgZm9yXG4gKiB0aGUgYXNzZXRzLlxuICovXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIEZfTE9BREVSOiBBc3NldExvYWRlcjtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBGaWVuZEdhbWUsIHdoaWNoIGxvYWRzIHRoZSBnYW1lLlxuICovXG5mdW5jdGlvbiBpbml0KCkge1xuXG4gIC8vIEluaXQgZnVuY3Rpb25hbGl0eSwgZm9yIG5vdy5cbiAgbmV3IEZpZW5kR2FtZSg2NDAsIDQ4MCk7XG4gIC8vIEZvY3VzIHRoZSBnYW1lIHBhbmUgb24gcGFnZSBsb2FkLlxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1wYW5lJykuZm9jdXMoKTtcbn07XG5cbi8qKlxuICogRW5zdXJlIHRoZSBhc3NldHMgYXJlIGxvYWRlZCBiZWZvcmUgd2UgaW5pdGlhbGl6ZSB0aGUgZ2FtZS4gV2UgZG8gdGhpcyB3aXRoIGFcbiAqIHByb21pc2UgdG8gZW5zdXJlIGFsbCB0aGUgaW1hZ2VzIGFyZSBsb2FkZWQgYW5kIHJlYWR5IHRvIGJlIHVzZWQuXG4gKiBUT0RPIE1ha2UgdGhpcyBiZXR0ZXIsIG1vcmUgVHlwZVNjcmlwdC15LlxuICovXG4gd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gIHdpbmRvdy5GX0xPQURFUiA9IG5ldyBBc3NldExvYWRlcigpO1xuICB2YXIgcCA9IHdpbmRvdy5GX0xPQURFUi5pbml0QXNzZXRzKCk7XG4gIFByb21pc2UuYWxsKHApLnRoZW4oICgpID0+IHtcbiAgICBpbml0KCk7XG4gIH0pO1xufVxuIl19"}
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/atlases/MapBase.ts","src/atlases/Overworld.ts","src/engine/AssetLoader.ts","src/engine/Command/Command.ts","src/engine/Command/MoveEastCommand.ts","src/engine/Command/MoveNorthCommand.ts","src/engine/Command/MoveSouthCommand.ts","src/engine/Command/MoveWestCommand.ts","src/engine/Command/NullCommand.ts","src/engine/Command/index.ts","src/engine/FiendGame.ts","src/engine/GameObject/GameActor/Enemy.ts","src/engine/GameObject/GameActor/GameActor.ts","src/engine/GameObject/GameActor/Player.ts","src/engine/GameObject/GameObject.ts","src/engine/GameObject/index.ts","src/engine/Input/InputHandler.ts","src/engine/Render/Camera/Camera.ts","src/engine/Render/Renderer.ts","src/main.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;ICAa,O,WAAA,O;AAOX,uBAAA;AAAA;;AACE,aAAK,IAAL,GAAY,CAAZ;AACA,aAAK,IAAL,GAAY,CAAZ;AACA,aAAK,KAAL,GAAa,CAAb;AACA,aAAK,KAAL,GAAa,IAAb;AACD;AAED;;;;;;;;;;;;gCAQQ,C,EAAW,C,EAAS;AAC1B,gBACE,KAAK,IAAL,KAAc,CAAd,IACG,KAAK,IAAL,KAAc,CADjB,IAEG,KAAK,KAAL,KAAe,CAHpB,EAIE;AACA,sBAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;AAED,mBAAO,KAAK,KAAL,CAAW,IAAI,KAAK,IAAT,GAAgB,CAA3B,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;;IC9BU,S,WAAA,S;;;AAQX,yBAAA;AAAA;;AAGE;;;;AAHF;;AAOE,cAAK,EAAL,GAAU,OAAO,QAAP,CAAgB,QAAhB,CAAyB,cAAzB,CAAV;AAEA,cAAK,IAAL,GAAY,EAAZ;AACA,cAAK,IAAL,GAAY,EAAZ;AACA,cAAK,KAAL,GAAa,GAAb;AACA,cAAK,KAAL,GAAa,CACT,CADS,EACL,CADK,EACD,CADC,EACG,CADH,EACO,CADP,EACW,CADX,EACe,CADf,EACmB,CADnB,EACuB,CADvB,EAC0B,EAD1B,EAC8B,EAD9B,EACkC,EADlC,EACsC,EADtC,EAC0C,EAD1C,EAC8C,EAD9C,EACkD,EADlD,EACsD,EADtD,EAC0D,EAD1D,EAC8D,EAD9D,EACkE,EADlE,EAEV,EAFU,EAEL,CAFK,EAED,CAFC,EAEG,CAFH,EAEO,CAFP,EAEW,CAFX,EAEe,CAFf,EAEmB,CAFnB,EAEuB,CAFvB,EAE2B,CAF3B,EAE+B,CAF/B,EAEmC,CAFnC,EAEuC,CAFvC,EAE2C,CAF3C,EAE+C,CAF/C,EAEmD,CAFnD,EAEuD,CAFvD,EAE2D,CAF3D,EAE+D,CAF/D,EAEmE,CAFnE,EAGT,CAHS,EAGL,CAHK,EAGD,CAHC,EAGG,CAHH,EAGO,CAHP,EAGW,CAHX,EAGe,CAHf,EAGmB,CAHnB,EAGuB,CAHvB,EAG2B,CAH3B,EAG+B,CAH/B,EAGmC,CAHnC,EAGuC,CAHvC,EAG2C,CAH3C,EAG+C,CAH/C,EAGmD,CAHnD,EAGuD,CAHvD,EAG2D,CAH3D,EAG+D,CAH/D,EAGmE,CAHnE,EAIT,CAJS,EAIL,CAJK,EAID,CAJC,EAIG,CAJH,EAIO,CAJP,EAIW,CAJX,EAIe,CAJf,EAImB,CAJnB,EAIuB,CAJvB,EAI2B,CAJ3B,EAI+B,CAJ/B,EAImC,CAJnC,EAIuC,CAJvC,EAI2C,CAJ3C,EAI+C,CAJ/C,EAImD,CAJnD,EAIuD,CAJvD,EAI2D,CAJ3D,EAI+D,CAJ/D,EAImE,CAJnE,EAKT,CALS,EAKL,CALK,EAKD,CALC,EAKG,CALH,EAKO,CALP,EAKW,CALX,EAKe,CALf,EAKmB,CALnB,EAKuB,CALvB,EAK2B,CAL3B,EAK+B,CAL/B,EAKmC,CALnC,EAKuC,CALvC,EAK2C,CAL3C,EAK+C,CAL/C,EAKmD,CALnD,EAKuD,CALvD,EAK2D,CAL3D,EAK+D,CAL/D,EAKmE,CALnE,EAMT,CANS,EAML,CANK,EAMD,CANC,EAMG,CANH,EAMO,CANP,EAMW,CANX,EAMe,CANf,EAMmB,CANnB,EAMuB,CANvB,EAM2B,CAN3B,EAM+B,CAN/B,EAMmC,CANnC,EAMuC,CANvC,EAM2C,CAN3C,EAM+C,CAN/C,EAMmD,CANnD,EAMuD,CANvD,EAM2D,CAN3D,EAM+D,CAN/D,EAMmE,CANnE,EAOT,CAPS,EAOL,CAPK,EAOD,CAPC,EAOG,CAPH,EAOO,CAPP,EAOW,CAPX,EAOe,CAPf,EAOmB,CAPnB,EAOuB,CAPvB,EAO2B,CAP3B,EAO+B,CAP/B,EAOmC,CAPnC,EAOuC,CAPvC,EAO2C,CAP3C,EAO+C,CAP/C,EAOmD,CAPnD,EAOuD,CAPvD,EAO2D,CAP3D,EAO+D,CAP/D,EAOmE,CAPnE,EAQT,CARS,EAQL,CARK,EAQD,CARC,EAQG,CARH,EAQO,CARP,EAQW,CARX,EAQe,CARf,EAQmB,CARnB,EAQuB,CARvB,EAQ2B,CAR3B,EAQ+B,CAR/B,EAQmC,CARnC,EAQuC,CARvC,EAQ2C,CAR3C,EAQ+C,CAR/C,EAQmD,CARnD,EAQuD,CARvD,EAQ2D,CAR3D,EAQ+D,CAR/D,EAQmE,CARnE,EAST,CATS,EASL,CATK,EASD,CATC,EASG,CATH,EASO,CATP,EASW,CATX,EASe,CATf,EASmB,CATnB,EASuB,CATvB,EAS2B,CAT3B,EAS+B,CAT/B,EASmC,CATnC,EASuC,CATvC,EAS2C,CAT3C,EAS+C,CAT/C,EASmD,CATnD,EASuD,CATvD,EAS2D,CAT3D,EAS+D,CAT/D,EASmE,CATnE,EAUT,CAVS,EAUL,CAVK,EAUD,CAVC,EAUG,CAVH,EAUO,CAVP,EAUW,CAVX,EAUe,CAVf,EAUmB,CAVnB,EAUuB,CAVvB,EAU2B,CAV3B,EAU+B,CAV/B,EAUmC,CAVnC,EAUuC,CAVvC,EAU2C,CAV3C,EAU+C,CAV/C,EAUmD,CAVnD,EAUuD,CAVvD,EAU2D,CAV3D,EAU+D,CAV/D,EAUmE,CAVnE,EAWT,CAXS,EAWL,CAXK,EAWD,CAXC,EAWG,CAXH,EAWO,CAXP,EAWW,CAXX,EAWe,CAXf,EAWmB,CAXnB,EAWuB,CAXvB,EAW2B,CAX3B,EAW+B,CAX/B,EAWmC,CAXnC,EAWuC,CAXvC,EAW2C,CAX3C,EAW+C,CAX/C,EAWmD,CAXnD,EAWuD,CAXvD,EAW2D,CAX3D,EAW+D,CAX/D,EAWmE,CAXnE,EAYT,CAZS,EAYL,CAZK,EAYD,CAZC,EAYG,CAZH,EAYO,CAZP,EAYW,CAZX,EAYe,CAZf,EAYmB,CAZnB,EAYuB,CAZvB,EAY2B,CAZ3B,EAY+B,CAZ/B,EAYmC,CAZnC,EAYuC,CAZvC,EAY2C,CAZ3C,EAY+C,CAZ/C,EAYmD,CAZnD,EAYuD,CAZvD,EAY2D,CAZ3D,EAY+D,CAZ/D,EAYmE,CAZnE,EAaT,CAbS,EAaL,CAbK,EAaD,CAbC,EAaG,CAbH,EAaO,CAbP,EAaW,CAbX,EAae,CAbf,EAamB,CAbnB,EAauB,CAbvB,EAa2B,CAb3B,EAa+B,CAb/B,EAamC,CAbnC,EAauC,CAbvC,EAa2C,CAb3C,EAa+C,CAb/C,EAamD,CAbnD,EAauD,CAbvD,EAa2D,CAb3D,EAa+D,CAb/D,EAamE,CAbnE,EAcT,CAdS,EAcL,CAdK,EAcD,CAdC,EAcG,CAdH,EAcO,CAdP,EAcW,CAdX,EAce,CAdf,EAcmB,CAdnB,EAcuB,CAdvB,EAc2B,CAd3B,EAc+B,CAd/B,EAcmC,CAdnC,EAcuC,CAdvC,EAc2C,CAd3C,EAc+C,CAd/C,EAcmD,CAdnD,EAcuD,CAdvD,EAc2D,CAd3D,EAc+D,CAd/D,EAcmE,CAdnE,EAeT,CAfS,EAeL,CAfK,EAeD,CAfC,EAeG,CAfH,EAeO,CAfP,EAeW,CAfX,EAee,CAff,EAemB,CAfnB,EAeuB,CAfvB,EAe2B,CAf3B,EAe+B,CAf/B,EAemC,CAfnC,EAeuC,CAfvC,EAe2C,CAf3C,EAe+C,CAf/C,EAemD,CAfnD,EAeuD,CAfvD,EAe2D,CAf3D,EAe+D,CAf/D,EAekE,EAflE,CAAb;AAiBA,cAAK,MAAL,GAAc,CACZ,CACE,CADF,EACI,CADJ,EACM,CADN,EACQ,CADR,EACU,CADV,EACY,CADZ,EACc,CADd,EACgB,CADhB,EACkB,CADlB,EACoB,CADpB,EACsB,CADtB,EACwB,CADxB,EAC0B,CAD1B,EAC4B,CAD5B,EAC8B,CAD9B,EACgC,CADhC,EACkC,CADlC,EACoC,CADpC,EACsC,CADtC,EACwC,CADxC,EAEE,CAFF,EAEI,CAFJ,EAEM,CAFN,EAEQ,CAFR,EAEU,CAFV,EAEY,CAFZ,EAEc,CAFd,EAEgB,CAFhB,EAEkB,CAFlB,EAEoB,CAFpB,EAEsB,CAFtB,EAEwB,CAFxB,EAE0B,CAF1B,EAE4B,CAF5B,EAE8B,CAF9B,EAEgC,CAFhC,EAEkC,CAFlC,EAEoC,CAFpC,EAEsC,CAFtC,EAEwC,CAFxC,EAGE,CAHF,EAGI,CAHJ,EAGM,CAHN,EAGQ,CAHR,EAGU,CAHV,EAGY,CAHZ,EAGc,CAHd,EAGgB,CAHhB,EAGkB,CAHlB,EAGoB,CAHpB,EAGsB,CAHtB,EAGwB,CAHxB,EAG0B,CAH1B,EAG4B,CAH5B,EAG8B,CAH9B,EAGgC,CAHhC,EAGkC,CAHlC,EAGoC,CAHpC,EAGsC,CAHtC,EAGwC,CAHxC,EAIE,CAJF,EAII,CAJJ,EAIM,CAJN,EAIQ,CAJR,EAIU,CAJV,EAIY,CAJZ,EAIc,CAJd,EAIgB,CAJhB,EAIkB,CAJlB,EAIoB,CAJpB,EAIsB,CAJtB,EAIwB,CAJxB,EAI0B,CAJ1B,EAI4B,CAJ5B,EAI8B,CAJ9B,EAIgC,CAJhC,EAIkC,CAJlC,EAIoC,CAJpC,EAIsC,CAJtC,EAIwC,CAJxC,EAKE,CALF,EAKI,CALJ,EAKM,CALN,EAKQ,CALR,EAKU,CALV,EAKY,CALZ,EAKc,CALd,EAKgB,CALhB,EAKkB,CALlB,EAKoB,CALpB,EAKsB,CALtB,EAKwB,CALxB,EAK0B,CAL1B,EAK4B,CAL5B,EAK8B,CAL9B,EAKgC,CALhC,EAKkC,CALlC,EAKoC,CALpC,EAKsC,CALtC,EAKwC,CALxC,EAME,CANF,EAMI,CANJ,EAMM,CANN,EAMQ,CANR,EAMU,CANV,EAMY,CANZ,EAMc,CANd,EAMgB,CANhB,EAMkB,CANlB,EAMoB,CANpB,EAMsB,CANtB,EAMwB,CANxB,EAM0B,CAN1B,EAM4B,CAN5B,EAM8B,CAN9B,EAMgC,CANhC,EAMkC,CANlC,EAMoC,CANpC,EAMsC,CANtC,EAMwC,CANxC,EAOE,CAPF,EAOI,CAPJ,EAOM,CAPN,EAOQ,CAPR,EAOU,CAPV,EAOY,CAPZ,EAOc,CAPd,EAOgB,CAPhB,EAOkB,CAPlB,EAOoB,CAPpB,EAOsB,CAPtB,EAOwB,CAPxB,EAO0B,CAP1B,EAO4B,CAP5B,EAO8B,CAP9B,EAOgC,CAPhC,EAOkC,CAPlC,EAOoC,CAPpC,EAOsC,CAPtC,EAOwC,CAPxC,EAQE,CARF,EAQI,CARJ,EAQM,CARN,EAQQ,CARR,EAQU,CARV,EAQY,CARZ,EAQc,CARd,EAQgB,CARhB,EAQkB,CARlB,EAQoB,CARpB,EAQsB,CARtB,EAQwB,CARxB,EAQ0B,CAR1B,EAQ4B,CAR5B,EAQ8B,CAR9B,EAQgC,CARhC,EAQkC,CARlC,EAQoC,CARpC,EAQsC,CARtC,EAQwC,CARxC,EASE,CATF,EASI,CATJ,EASM,CATN,EASQ,CATR,EASU,CATV,EASY,CATZ,EASc,CATd,EASgB,CAThB,EASkB,CATlB,EASoB,CATpB,EASsB,CATtB,EASwB,CATxB,EAS0B,CAT1B,EAS4B,CAT5B,EAS8B,CAT9B,EASgC,CAThC,EASkC,CATlC,EASoC,CATpC,EASsC,CATtC,EASwC,CATxC,EAUE,CAVF,EAUI,CAVJ,EAUM,CAVN,EAUQ,CAVR,EAUU,CAVV,EAUY,CAVZ,EAUc,CAVd,EAUgB,CAVhB,EAUkB,CAVlB,EAUoB,CAVpB,EAUsB,CAVtB,EAUwB,CAVxB,EAU0B,CAV1B,EAU4B,CAV5B,EAU8B,CAV9B,EAUgC,CAVhC,EAUkC,CAVlC,EAUoC,CAVpC,EAUsC,CAVtC,EAUwC,CAVxC,EAWE,CAXF,EAWI,CAXJ,EAWM,CAXN,EAWQ,CAXR,EAWU,CAXV,EAWY,CAXZ,EAWc,CAXd,EAWgB,CAXhB,EAWkB,CAXlB,EAWoB,CAXpB,EAWsB,CAXtB,EAWwB,CAXxB,EAW0B,CAX1B,EAW4B,CAX5B,EAW8B,CAX9B,EAWgC,CAXhC,EAWkC,CAXlC,EAWoC,CAXpC,EAWsC,CAXtC,EAWwC,CAXxC,EAYE,CAZF,EAYI,CAZJ,EAYM,CAZN,EAYQ,CAZR,EAYU,CAZV,EAYY,CAZZ,EAYc,CAZd,EAYgB,CAZhB,EAYkB,CAZlB,EAYoB,CAZpB,EAYsB,CAZtB,EAYwB,CAZxB,EAY0B,CAZ1B,EAY4B,CAZ5B,EAY8B,CAZ9B,EAYgC,CAZhC,EAYkC,CAZlC,EAYoC,CAZpC,EAYsC,CAZtC,EAYwC,CAZxC,EAaE,CAbF,EAaI,CAbJ,EAaM,CAbN,EAaQ,CAbR,EAaU,CAbV,EAaY,CAbZ,EAac,CAbd,EAagB,CAbhB,EAakB,CAblB,EAaoB,CAbpB,EAasB,CAbtB,EAawB,CAbxB,EAa0B,CAb1B,EAa4B,CAb5B,EAa8B,CAb9B,EAagC,CAbhC,EAakC,CAblC,EAaoC,CAbpC,EAasC,CAbtC,EAawC,CAbxC,EAcE,CAdF,EAcI,CAdJ,EAcM,CAdN,EAcQ,CAdR,EAcU,CAdV,EAcY,CAdZ,EAcc,CAdd,EAcgB,CAdhB,EAckB,CAdlB,EAcoB,CAdpB,EAcsB,CAdtB,EAcwB,CAdxB,EAc0B,CAd1B,EAc4B,CAd5B,EAc8B,CAd9B,EAcgC,CAdhC,EAckC,CAdlC,EAcoC,CAdpC,EAcsC,CAdtC,EAcwC,CAdxC,EAeE,CAfF,EAeI,CAfJ,EAeM,CAfN,EAeQ,CAfR,EAeU,CAfV,EAeY,CAfZ,EAec,CAfd,EAegB,CAfhB,EAekB,CAflB,EAeoB,CAfpB,EAesB,CAftB,EAewB,CAfxB,EAe0B,CAf1B,EAe4B,CAf5B,EAe8B,CAf9B,EAegC,CAfhC,EAekC,CAflC,EAeoC,CAfpC,EAesC,CAftC,EAewC,CAfxC,CADY,EAiBT,CACD,CADC,EACC,CADD,EACG,CADH,EACK,CADL,EACO,CADP,EACS,CADT,EACW,CADX,EACa,CADb,EACe,CADf,EACiB,CADjB,EACmB,CADnB,EACqB,CADrB,EACuB,CADvB,EACyB,CADzB,EAC2B,CAD3B,EAC6B,CAD7B,EAC+B,CAD/B,EACiC,CADjC,EACmC,CADnC,EACqC,CADrC,EAED,CAFC,EAEC,CAFD,EAEG,CAFH,EAEK,CAFL,EAEO,CAFP,EAES,CAFT,EAEW,CAFX,EAEa,CAFb,EAEe,CAFf,EAEiB,CAFjB,EAEmB,CAFnB,EAEqB,CAFrB,EAEuB,CAFvB,EAEyB,CAFzB,EAE2B,CAF3B,EAE6B,CAF7B,EAE+B,CAF/B,EAEiC,CAFjC,EAEmC,CAFnC,EAEqC,CAFrC,EAGD,CAHC,EAGC,CAHD,EAGG,CAHH,EAGK,CAHL,EAGO,CAHP,EAGS,CAHT,EAGW,CAHX,EAGa,CAHb,EAGe,CAHf,EAGiB,CAHjB,EAGmB,CAHnB,EAGqB,CAHrB,EAGuB,CAHvB,EAGyB,CAHzB,EAG2B,CAH3B,EAG6B,CAH7B,EAG+B,CAH/B,EAGiC,CAHjC,EAGmC,CAHnC,EAGqC,CAHrC,EAID,CAJC,EAIC,CAJD,EAIG,CAJH,EAIK,CAJL,EAIO,CAJP,EAIS,CAJT,EAIW,CAJX,EAIa,CAJb,EAIe,CAJf,EAIiB,CAJjB,EAImB,CAJnB,EAIqB,CAJrB,EAIuB,CAJvB,EAIyB,CAJzB,EAI2B,CAJ3B,EAI6B,CAJ7B,EAI+B,CAJ/B,EAIiC,CAJjC,EAImC,CAJnC,EAIqC,CAJrC,EAKD,CALC,EAKC,CALD,EAKG,CALH,EAKK,CALL,EAKO,CALP,EAKS,CALT,EAKW,CALX,EAKa,CALb,EAKe,CALf,EAKiB,CALjB,EAKmB,CALnB,EAKqB,CALrB,EAKuB,CALvB,EAKyB,CALzB,EAK2B,CAL3B,EAK6B,CAL7B,EAK+B,CAL/B,EAKiC,CALjC,EAKmC,CALnC,EAKqC,CALrC,EAMD,CANC,EAMC,CAND,EAMG,CANH,EAMK,CANL,EAMO,CANP,EAMS,CANT,EAMW,CANX,EAMa,CANb,EAMe,CANf,EAMiB,CANjB,EAMmB,CANnB,EAMqB,CANrB,EAMuB,CANvB,EAMyB,CANzB,EAM2B,CAN3B,EAM6B,CAN7B,EAM+B,CAN/B,EAMiC,CANjC,EAMmC,CANnC,EAMqC,CANrC,EAOD,CAPC,EAOC,CAPD,EAOG,CAPH,EAOK,CAPL,EAOO,CAPP,EAOS,CAPT,EAOW,CAPX,EAOa,CAPb,EAOe,CAPf,EAOiB,CAPjB,EAOmB,CAPnB,EAOqB,CAPrB,EAOuB,CAPvB,EAOyB,CAPzB,EAO2B,CAP3B,EAO6B,CAP7B,EAO+B,CAP/B,EAOiC,CAPjC,EAOmC,CAPnC,EAOqC,CAPrC,EAQD,CARC,EAQC,CARD,EAQG,CARH,EAQK,CARL,EAQO,CARP,EAQS,CART,EAQW,CARX,EAQa,CARb,EAQe,CARf,EAQiB,CARjB,EAQmB,CARnB,EAQqB,CARrB,EAQuB,CARvB,EAQyB,CARzB,EAQ2B,CAR3B,EAQ6B,CAR7B,EAQ+B,CAR/B,EAQiC,CARjC,EAQmC,CARnC,EAQqC,CARrC,EASD,CATC,EASC,CATD,EASG,CATH,EASK,CATL,EASO,CATP,EASS,CATT,EASW,CATX,EASa,CATb,EASe,CATf,EASiB,CATjB,EASmB,CATnB,EASqB,CATrB,EASuB,CATvB,EASyB,CATzB,EAS2B,CAT3B,EAS6B,CAT7B,EAS+B,CAT/B,EASiC,CATjC,EASmC,CATnC,EASqC,CATrC,EAUD,CAVC,EAUC,CAVD,EAUG,CAVH,EAUK,CAVL,EAUO,CAVP,EAUS,CAVT,EAUW,CAVX,EAUa,CAVb,EAUe,CAVf,EAUiB,CAVjB,EAUmB,CAVnB,EAUqB,CAVrB,EAUuB,CAVvB,EAUyB,CAVzB,EAU2B,CAV3B,EAU6B,CAV7B,EAU+B,CAV/B,EAUiC,CAVjC,EAUmC,CAVnC,EAUqC,CAVrC,EAWD,CAXC,EAWC,CAXD,EAWG,CAXH,EAWK,CAXL,EAWO,CAXP,EAWS,CAXT,EAWW,CAXX,EAWa,CAXb,EAWe,CAXf,EAWiB,CAXjB,EAWmB,CAXnB,EAWqB,CAXrB,EAWuB,CAXvB,EAWyB,CAXzB,EAW2B,CAX3B,EAW6B,CAX7B,EAW+B,CAX/B,EAWiC,CAXjC,EAWmC,CAXnC,EAWqC,CAXrC,EAYD,CAZC,EAYC,CAZD,EAYG,CAZH,EAYK,CAZL,EAYO,CAZP,EAYS,CAZT,EAYW,CAZX,EAYa,CAZb,EAYe,CAZf,EAYiB,CAZjB,EAYmB,CAZnB,EAYqB,CAZrB,EAYuB,CAZvB,EAYyB,CAZzB,EAY2B,CAZ3B,EAY6B,CAZ7B,EAY+B,CAZ/B,EAYiC,CAZjC,EAYmC,CAZnC,EAYqC,CAZrC,EAaD,CAbC,EAaC,CAbD,EAaG,CAbH,EAaK,CAbL,EAaO,CAbP,EAaS,CAbT,EAaW,CAbX,EAaa,CAbb,EAae,CAbf,EAaiB,CAbjB,EAamB,CAbnB,EAaqB,CAbrB,EAauB,CAbvB,EAayB,CAbzB,EAa2B,CAb3B,EAa6B,CAb7B,EAa+B,CAb/B,EAaiC,CAbjC,EAamC,CAbnC,EAaqC,CAbrC,EAcD,CAdC,EAcC,CAdD,EAcG,CAdH,EAcK,CAdL,EAcO,CAdP,EAcS,CAdT,EAcW,CAdX,EAca,CAdb,EAce,CAdf,EAciB,CAdjB,EAcmB,CAdnB,EAcqB,CAdrB,EAcuB,CAdvB,EAcyB,CAdzB,EAc2B,CAd3B,EAc6B,CAd7B,EAc+B,CAd/B,EAciC,CAdjC,EAcmC,CAdnC,EAcqC,CAdrC,EAeD,CAfC,EAeC,CAfD,EAeG,CAfH,EAeK,CAfL,EAeO,CAfP,EAeS,CAfT,EAeW,CAfX,EAea,CAfb,EAee,CAff,EAeiB,CAfjB,EAemB,CAfnB,EAeqB,CAfrB,EAeuB,CAfvB,EAeyB,CAfzB,EAe2B,CAf3B,EAe6B,CAf7B,EAe+B,CAf/B,EAeiC,CAfjC,EAemC,CAfnC,EAeqC,CAfrC,CAjBS,CAAd;AA7BF;AAgEC;;;EAxE4B,iB;;;;;;;;;;;;;ICFlB,W,WAAA,W;AAGX,2BAAA;AAAA;;AACE,aAAK,UAAL,GAAkB,EAAlB;AACD;;;;qCAEgB;AACf,mBAAO,CACL,KAAK,SAAL,CAAe,aAAf,EAA8B,oBAA9B,CADK,EAEL,KAAK,SAAL,CAAe,cAAf,EAA+B,yBAA/B,CAFK,EAGL,KAAK,SAAL,CAAe,UAAf,EAA2B,+BAA3B,CAHK,EAIL,KAAK,SAAL,CAAe,cAAf,EAA+B,kCAA/B,CAJK,CAAP;AAMD;;;kCAEgB,G,EAAa,G,EAAW;AACvC,gBAAI,MAAM,IAAI,KAAJ,EAAV;AAEA,gBAAI,IAAI,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB,MAAnB,EAAyB;AAC3C,oBAAI,MAAJ,GAAa,YAAA;AACX,yBAAK,UAAL,CAAgB,GAAhB,IAAuB,GAAvB;AACA,4BAAQ,GAAR;AACD,iBAHY,CAGX,IAHW,CAGN,IAHM,CAAb;AAKA,oBAAI,OAAJ,GAAc,YAAA;AACZ,2BAAO,2BAA2B,GAAlC;AACD,iBAFD;AAGD,aATmB,CASlB,IATkB,CASb,IATa,CAAZ,CAAR;AAWA,gBAAI,GAAJ,GAAU,GAAV;AAEA,mBAAO,CAAP;AACD;;;iCAEe,G,EAAW;AACzB,mBAAQ,OAAO,KAAK,UAAb,GAA2B,KAAK,UAAL,CAAgB,GAAhB,CAA3B,GAAkD,IAAzD;AACD;;;;;;;;;;;;;;;ICnCmB,O,WAAA,O;;;;;;;;;;;;;;;;;;;;;;ACCtB;;;IAGa,e,WAAA,e;;;;;;;;;;;;AAEX;;;4BAGe,K,EAAkB,K,EAAa;AAC5C,YAAM,KAAN,CAAY,KAAZ;AACD;;;;EAPkC,iB;;;;;;;;;;;;;;;;;;;;ACHrC;;;IAGa,gB,WAAA,gB;;;;;;;;;;;;AAEX;;;4BAGe,K,EAAkB,K,EAAa;AAC5C,YAAM,KAAN,CAAY,KAAZ;AACD;;;;EAPmC,iB;;;;;;;;;;;;;;;;;;;;ACHtC;;;IAGa,gB,WAAA,gB;;;;;;;;;;;;AAEX;;;4BAGe,K,EAAkB,K,EAAa;AAC5C,YAAM,KAAN,CAAY,KAAZ;AACD;;;;EAPmC,iB;;;;;;;;;;;;;;;;;;;;ACHtC;;;IAGa,e,WAAA,e;;;;;;;;;;;;AAEX;;;4BAGe,K,EAAkB,K,EAAa;AAC5C,YAAM,KAAN,CAAY,KAAZ;AACD;;;;EAPkC,iB;;;;;;;;;;;;;;;;;;;;ACJrC;;;;;IAKa,W,WAAA,W;;;;;;;;;;;;AAEX;;;8BAGc,CAAW;;;;EALM,iB;;;;;;;;;;;ACEjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACfA;;;;;AAHA;;AACA;;AAGA;;;;AAMA;;;;IAIa,S,WAAA,S;AAyEX,uBAAY,aAAZ,EAAmC,cAAnC,EAAyD;AAAA;;AAAA;;AAEvD;;;AAGA,aAAK,MAAL,GAAc,KAAK,SAAL,CAAe,aAAf,EAA8B,cAA9B,CAAd;AACA,aAAK,SAAL,GAAiB,SAAS,cAAT,CAAwB,YAAxB,CAAjB;AACA,aAAK,SAAL,CAAe,YAAf,CAA4B,KAAK,MAAjC,EAAyC,KAAK,SAAL,CAAe,UAAxD;AAEA,iBAAS,cAAT,CAAwB,WAAxB,EAAqC,gBAArC,CACE,YADF,EAEE,UAAC,KAAD;AAAA,mBAAwB,MAAK,2BAAL,CAAiC,KAAjC,CAAxB;AAAA,SAFF,EAGE,KAHF;AAMA,aAAK,SAAL,GAAiB,IAAjB;AAEA,aAAK,UAAL,GAAkB,EAAlB;AAEA,aAAK,aAAL,GAAqB,CAArB;AAEA,aAAK,WAAL,GAAmB,IAAnB;AAEA,aAAK,MAAL,GAAc,IAAI,kBAAJ,CAAW,EAAC,GAAE,GAAH,EAAO,GAAE,GAAT,EAAX,CAAd;AAEA,aAAK,QAAL,GAAgB,IAAI,kBAAJ,CAAa,KAAK,MAAlB,CAAhB;AAEA,aAAK,YAAL,GAAoB,IAAI,0BAAJ,EAApB;AAEA,aAAK,MAAL,GAAc,IAAI,cAAJ,EAAd;AAEA,aAAK,eAAL,GAAuB,CAAvB;AAEA,aAAK,WAAL,GAAmB;AACjB;AACA;AACA,aAAK,MAHY,CAAnB;AAMA,gBAAQ,GAAR,CAAY,yBAAZ,EAAuC,KAAK,MAAL,CAAY,cAAnD;AAEA;AACA,aAAK,IAAL,CAAU,YAAY,GAAZ,EAAV;AACD;AAED;;;;;;;;;;;kCAOkB,C,EAAW,C,EAAS;AACpC,gBAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAb;AACA,mBAAO,EAAP,GAAY,WAAZ;AACA,mBAAO,KAAP,GAAe,CAAf;AACA,mBAAO,MAAP,GAAgB,CAAhB;AACA,mBAAO,QAAP,GAAkB,CAAlB;AAEA,mBAAO,MAAP;AACD;;;oDAEkC,K,EAAkB;AACnD,oBAAQ,GAAR,CAAY,sBAAZ,EAAoC,MAAM,MAAN,CAAa,KAAjD;AACD;AAED;;;;;;;;;;;gCAQgB,K,EAAa;AAC3B;AACA;AACA,iBAAK,IAAI,IAAE,CAAX,EAAc,IAAE,KAAK,eAArB,EAAsC,GAAtC,EAA2C;AACzC,qBAAK,WAAL,CAAiB,CAAjB,EAAoB,MAApB,CAA2B,KAA3B;AACD;AAED,iBAAK,eAAL,GAAuB,KAAK,WAAL,CAAiB,MAAxC;AACD;AAED;;;;;;gCAGa;AAEX;AACA,iBAAK,QAAL,CAAc,IAAd,CAAmB,KAAK,eAAxB,EAAyC,KAAK,WAA9C;AACD;AAED;;;;;;uCAGoB;AAClB,mBAAO,oBAAP,CAA4B,KAAK,SAAjC;AACA,oBAAQ,GAAR,CAAY,YAAZ;AACD;AAED;;;;;;uCAGmB;AACjB,iBAAK,YAAL;AACD;AAEH;;;;;;;;;;;;;;;;;;;;;;6BAmBc,M,EAA2B;AACrC;AACA;AACA,iBAAK,SAAL,GAAiB,OAAO,qBAAP,CAA6B,KAAK,IAAL,CAAU,IAAV,CAAe,IAAf,CAA7B,CAAjB;AAEA;AACA,gBAAI,QAAQ,CAAC,SAAS,KAAK,aAAf,IAAgC,MAA5C;AACA;AACA,iBAAK,aAAL,GAAqB,MAArB;AAEA,iBAAK,YAAL,CAAkB,WAAlB,CAA8B,KAAK,MAAnC,EAA2C,KAA3C;AACA,iBAAK,OAAL,CAAa,KAAb;AACA,iBAAK,KAAL;AACD;;;;;;;;;;;;;;;;;;;;;;;;AClOH;;;IAGa,K,WAAA,K;;;AAYX;;;AAGA,qBAAA;AAAA;;AAAA;;AAGE,cAAK,IAAL,GAAY,WAAZ;AAEA,cAAK,EAAL,GAAU,GAAV;AACA,cAAK,GAAL,GAAW,CAAX;AACA,cAAK,KAAL,GAAa,GAAb;AACA,cAAK,QAAL,GAAgB;AACd,eAAG,CADW;AAEd,eAAG;AAFW,SAAhB;AARF;AAYC;AAED;;;;;;;;+BAIO,K,EAAa;AAClB,iBAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,KAAL,GAAa,KAAhC;AACA,iBAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,KAAL,GAAa,KAAhC;AACD;;;6BAEI,G,EAA6B;AAChC,gBAAI,SAAJ;AACA,gBAAI,GAAJ,CAAQ,KAAK,QAAL,CAAc,CAAtB,EAAyB,KAAK,QAAL,CAAc,CAAvC,EAA0C,EAA1C,EAA8C,CAA9C,EAAiD,KAAK,EAAL,GAAQ,CAAzD;AACA,gBAAI,SAAJ,GAAgB,SAAhB;AACA,gBAAI,IAAJ;AACA,gBAAI,SAAJ;AACD;;;;EA5CwB,qB;;;;;;;;;;;;;;;;;;;;ACqB3B;;;;;;;IAOsB,S,WAAA,S;;;AASpB;;;AAGA,uBAAA;AAAA;;AAAA;AAEC;AAYD;;;;;0BACa,K,EAAa,CAAU;;;0BACvB,K,EAAa,CAAU;;;0BACvB,K,EAAa,CAAU;;;0BACvB,K,EAAa,CAAU;;;;EA9BE,uB;;;;;;;;;;;;;;;;;;;;AClBxC;;;;;;;;IAQa,M,WAAA,M;;;AAQX;;;AAGC,kBAAY,QAAZ,EAAgC;AAAA;;AAAA;;AAG/B,UAAK,QAAL,GAAgB,EAAC,GAAE,GAAH,EAAO,GAAE,GAAT,EAAhB;AAEA,UAAK,EAAL,GAAU,GAAV;AACA,UAAK,GAAL,GAAW,CAAX;AACA,UAAK,KAAL,GAAa,GAAb;AAEA,UAAK,YAAL,CAAkB,CAChB,aADgB,CAAlB;AAT+B;AAYhC;AAED;;;;;;;;;;;2BAOc,K,EAAa,CAE1B;AADC;;AAIF;;;;;;;yBAIa,G,EAA6B;AACxC,UAAI,SAAJ;AACA,UAAI,GAAJ,CAAQ,KAAK,QAAL,CAAc,CAAtB,EAAyB,KAAK,QAAL,CAAc,CAAvC,EAA0C,EAA1C,EAA8C,CAA9C,EAAiD,KAAK,EAAL,GAAQ,CAAzD;AACA,UAAI,SAAJ,GAAgB,SAAhB;AACA,UAAI,IAAJ;AACA,UAAI,SAAJ;AACD;AAGD;;;;;;;AAQA;;;;;;;0BAIa,K,EAAa;AACxB;AACA;AACA,WAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,KAAL,GAAa,KAAhC;AACD;AAED;;;;;;;;0BAKa,K,EAAa;AACxB;AACA;AACA,WAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,KAAL,GAAa,KAAhC;AACD;AAED;;;;;;;;0BAKa,K,EAAa;AACxB,WAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,KAAL,GAAa,KAAhC;AACD;AAEC;;;;;;;;0BAKW,K,EAAa;AACxB,WAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,KAAL,GAAa,KAAhC;AACD;;;;EA/FyB,qB;;;;;;;;;;;;;;;;;;;;ICsCN,U,WAAA,U;AA8BpB;;;;AAIA,0BAAA;AAAA;;AAEE,aAAK,EAAL,GAAU,WAAW,aAAX,EAAV;AAEA;AACA,aAAK,cAAL,GAAsB;AACpB,0BAAc,IAAI,WAAJ,CAAgB,YAAhB,EAA8B;AAC1C,wBAAQ;AACN,2BAAO,KAAK,KAAL;AADD;AADkC,aAA9B;AADM,SAAtB;AAOA,iBAAS,cAAT,CAAwB,WAAxB,EACG,aADH,CACiB,KAAK,cAAL,CAAoB,YAApB,CADjB;AAED;AAED;;;;;;;;;gCAKY;AACV,mBAAO,KAAK,EAAZ;AACD;;;qCAYsB,M,EAAqB;AAAA;AAAA;AAAA;;AAAA;AAE1C,qCAAkB,MAAlB,8HAA0B;AAAA,wBAAjB,KAAiB;;AACxB,yBAAK,cAAL,CAAoB,KAApB,IAA6B,IAAI,KAAJ,CAAU,KAAV,CAA7B;AACD;AAJyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK3C;;;;;AAxED;;;;;;;;AAMe,WAAA,aAAA,GAAwB,CAAxB;;;;;;;;;;;AC5DjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;ACsBA;;;;;;AAMA,IAAK,cAAL;AAAA,CAAA,UAAK,cAAL,EAAmB;AACjB,mBAAA,eAAA,SAAA,IAAA,CAAA,IAAA,SAAA;AACA,mBAAA,eAAA,KAAA,IAAA,CAAA,IAAA,KAAA;AACA,mBAAA,eAAA,iBAAA,IAAA,CAAA,IAAA,iBAAA;AACA,mBAAA,eAAA,gBAAA,IAAA,CAAA,IAAA,gBAAA;AACD,CALD,EAAK,mBAAA,iBAAc,EAAd,CAAL;AAOA;;;;;AAKA,IAAK,MAAL;AAAA,CAAA,UAAK,MAAL,EAAW;AACT,WAAA,IAAA,IAAA,SAAA;AACA,WAAA,MAAA,IAAA,WAAA;AACA,WAAA,MAAA,IAAA,WAAA;AACA,WAAA,OAAA,IAAA,YAAA;AACA,WAAA,GAAA,IAAA,GAAA;AACA,WAAA,GAAA,IAAA,GAAA;AACA,WAAA,QAAA,IAAA,WAAA;AACA,WAAA,OAAA,IAAA,OAAA;AACA,WAAA,OAAA,IAAA,OAAA;AACD,CAVD,EAAK,WAAA,SAAM,EAAN,CAAL;AAYA;;;;;;;;;;;;AAYC,IAAK,YAAL;AAAA,CAAA,UAAK,YAAL,EAAiB;AAChB,iBAAA,aAAA,SAAA,IAAA,CAAA,IAAA,SAAA;AACA,iBAAA,aAAA,QAAA,IAAA,CAAA,IAAA,QAAA;AACA,iBAAA,aAAA,MAAA,IAAA,CAAA,IAAA,MAAA;AACA,iBAAA,aAAA,UAAA,IAAA,CAAA,IAAA,UAAA;AACA,iBAAA,aAAA,UAAA,IAAA,CAAA,IAAA,UAAA;AACD,CANA,EAAK,iBAAA,eAAY,EAAZ,CAAL;AAQD;;;;IAGa,Y,WAAA,Y;AASX;;;;AAIA,4BAAA;AAAA;;AAAA;;AAEE,iBAAS,cAAT,CAAwB,WAAxB,EAAqC,gBAArC,CACE,SADF,EACa,UAAC,KAAD;AAAA,mBAAW,MAAK,aAAL,CAAmB,KAAnB,CAAX;AAAA,SADb,EACmD,KADnD;AAIA,iBAAS,cAAT,CAAwB,WAAxB,EAAqC,gBAArC,CACE,OADF,EACW,UAAC,KAAD;AAAA,mBAAW,MAAK,cAAL,CAAoB,KAApB,CAAX;AAAA,SADX,EACkD,KADlD;AAIA,aAAK,QAAL,GAAgB,KAAK,YAAL,EAAhB;AAEA;AACA;AACA,aAAK,iBAAL,CAAuB,eAAe,OAAtC;AACD;AAED;;;;;;;;;;gCAMe,K,EAAsB,O,EAAgB;AACnD,iBAAK,QAAL,CAAc,MAAM,GAApB,EAAyB,OAAzB,GAAmC,OAAnC;AACD;AAED;;;;;;;;;sCAMqB,K,EAAoB;AACvC,kBAAM,cAAN;AAEA,gBAAI,KAAK,QAAL,CAAc,MAAM,GAApB,CAAJ,EAA8B;AAC5B,qBAAK,QAAL,CAAc,MAAM,GAApB,EAAyB,MAAzB,GAAkC,aAAa,OAA/C;AACD;AACF;AAED;;;;;;;;uCAKsB,K,EAAoB;AACxC,kBAAM,cAAN;AAEA,gBAAI,KAAK,QAAL,CAAc,MAAM,GAApB,CAAJ,EAA8B;AAC5B,qBAAK,QAAL,CAAc,MAAM,GAApB,EAAyB,MAAzB,GAAkC,aAAa,MAA/C;AACD;AACF;AAED;;;;;;oCAGmB,K,EAAkB,K,EAAa;AAEhD,gBAAI,KAAK,QAAL,CAAc,OAAO,EAArB,EAAyB,MAAzB,KAAoC,aAAa,OAArD,EAA8D;AAC5D,qBAAK,QAAL,CAAc,OAAO,EAArB,EAAyB,OAAzB,CAAiC,OAAjC,CAAyC,KAAzC,EAAgD,KAAhD;AACD;AACD,gBAAI,KAAK,QAAL,CAAc,OAAO,IAArB,EAA2B,MAA3B,KAAsC,aAAa,OAAvD,EAAgE;AAC9D,qBAAK,QAAL,CAAc,OAAO,IAArB,EAA2B,OAA3B,CAAmC,OAAnC,CAA2C,KAA3C,EAAkD,KAAlD;AACD;AACD,gBAAI,KAAK,QAAL,CAAc,OAAO,IAArB,EAA2B,MAA3B,KAAsC,aAAa,OAAvD,EAAgE;AAC9D,qBAAK,QAAL,CAAc,OAAO,IAArB,EAA2B,OAA3B,CAAmC,OAAnC,CAA2C,KAA3C,EAAkD,KAAlD;AACD;AACD,gBAAI,KAAK,QAAL,CAAc,OAAO,KAArB,EAA4B,MAA5B,KAAuC,aAAa,OAAxD,EAAiE;AAC/D,qBAAK,QAAL,CAAc,OAAO,KAArB,EAA4B,OAA5B,CAAoC,OAApC,CAA4C,KAA5C,EAAmD,KAAnD;AACD;AACD,gBAAI,KAAK,QAAL,CAAc,OAAO,CAArB,EAAwB,MAAxB,KAAmC,aAAa,OAApD,EAA6D;AAC3D,qBAAK,QAAL,CAAc,OAAO,CAArB,EAAwB,OAAxB,CAAgC,OAAhC,CAAwC,KAAxC,EAA+C,KAA/C;AACD;AACD,gBAAI,KAAK,QAAL,CAAc,OAAO,CAArB,EAAwB,MAAxB,KAAmC,aAAa,OAApD,EAA6D;AAC3D,qBAAK,QAAL,CAAc,OAAO,CAArB,EAAwB,OAAxB,CAAgC,OAAhC,CAAwC,KAAxC,EAA+C,KAA/C;AACD;AACD,gBAAI,KAAK,QAAL,CAAc,OAAO,MAArB,EAA6B,MAA7B,KAAwC,aAAa,OAAzD,EAAkE;AAChE,qBAAK,QAAL,CAAc,OAAO,MAArB,EAA6B,OAA7B,CAAqC,OAArC,CAA6C,KAA7C,EAAoD,KAApD;AACD;AACD,gBAAI,KAAK,QAAL,CAAc,OAAO,KAArB,EAA4B,MAA5B,KAAuC,aAAa,OAAxD,EAAiE;AAC/D,qBAAK,QAAL,CAAc,OAAO,KAArB,EAA4B,OAA5B,CAAoC,OAApC,CAA4C,KAA5C,EAAmD,KAAnD;AACD;AACD,gBAAI,KAAK,QAAL,CAAc,OAAO,KAArB,EAA4B,MAA5B,KAAuC,aAAa,OAAxD,EAAiE;AAC/D,qBAAK,QAAL,CAAc,OAAO,KAArB,EAA4B,OAA5B,CAAoC,OAApC,CAA4C,KAA5C,EAAmD,KAAnD;AACD;AACF;AAED;;;;;;;;uCAKoB;AAClB,gBAAI,KAAK,EAAT;AAEA,iBAAI,IAAI,SAAR,IAAqB,MAArB,EAA6B;AAC3B,mBAAG,OAAO,SAAP,CAAH,IAAwB;AACtB,6BAAS,oBADa;AAEtB,4BAAQ,aAAa;AAFC,iBAAxB;AAID;AAED,mBAAO,EAAP;AACD;AAED;;;;;;;;;;0CAO0B,a,EAA6B;AACrD,oBAAO,aAAP;AACE,qBAAK,CAAL;AACE;AACF;AACE;AACA,yBAAK,QAAL,CAAc,OAAO,EAArB,EAAyB,OAAzB,GAAmC,IAAI,yBAAJ,EAAnC;AACA,yBAAK,QAAL,CAAc,OAAO,IAArB,EAA2B,OAA3B,GAAqC,IAAI,yBAAJ,EAArC;AACA,yBAAK,QAAL,CAAc,OAAO,IAArB,EAA2B,OAA3B,GAAqC,IAAI,wBAAJ,EAArC;AACA,yBAAK,QAAL,CAAc,OAAO,KAArB,EAA4B,OAA5B,GAAsC,IAAI,wBAAJ,EAAtC;AACA,yBAAK,QAAL,CAAc,OAAO,CAArB,EAAwB,OAAxB,GAAkC,IAAI,oBAAJ,EAAlC;AACA,yBAAK,QAAL,CAAc,OAAO,CAArB,EAAwB,OAAxB,GAAkC,IAAI,oBAAJ,EAAlC;AACA,yBAAK,QAAL,CAAc,OAAO,MAArB,EAA6B,OAA7B,GAAuC,IAAI,oBAAJ,EAAvC;AACA,yBAAK,QAAL,CAAc,OAAO,KAArB,EAA4B,OAA5B,GAAsC,IAAI,oBAAJ,EAAtC;AACA,yBAAK,QAAL,CAAc,OAAO,KAArB,EAA4B,OAA5B,GAAsC,IAAI,oBAAJ,EAAtC;AAbJ;AAeD;;;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ICvOa,M,WAAA,M,GAQX,kBAAA;AAAA;AAAgB,C;;;;;;;;;;;;;;;;ICtCL,Q,WAAA,Q;AAgBX,sBAAY,MAAZ,EAAqC;AAAA;;AAEnC,aAAK,MAAL,GAAc,MAAd;AAEA;;;;;AAKC,aAAK,GAAL,GAAW,KAAK,MAAL,CAAY,UAAZ,CAAuB,IAAvB,CAAX;AAED;;;;;AAKC,aAAK,GAAL,CAAS,qBAAT,GAAiC,KAAjC;AAED;;;;;;;AAOA,aAAK,UAAL,GAAkB,CAAlB;AAEA;;;;;;;AAOA,aAAK,MAAL,GAAc,EAAd;AAEA;;;;;;AAMA,aAAK,KAAL,GAAa,CAAb;AAEA,aAAK,WAAL,GAAmB,IAAI,oBAAJ,EAAnB;AACD;;;;6BAEI,e,EAAyB,W,EAAuB;AAEnD;AACA;AACA,iBAAK,GAAL,CAAS,SAAT,CACE,CADF,EAEE,CAFF,EAGE,KAAK,MAAL,CAAY,KAHd,EAIE,KAAK,MAAL,CAAY,MAJd;AAOA;AACA;AACA,iBAAK,WAAL,CAAiB,KAAK,WAAtB;AAEA,iBAAK,IAAI,IAAE,CAAX,EAAc,IAAE,eAAhB,EAAiC,GAAjC,EAAsC;AACpC,4BAAY,CAAZ,EAAe,IAAf,CAAoB,KAAK,GAAzB;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;;;;;;;;oCAsBY,G,EAAY;AACtB,iBAAK,IAAI,IAAE,CAAX,EAAc,IAAE,IAAI,IAApB,EAA0B,GAA1B,EAA+B;AAC7B,qBAAK,IAAI,IAAE,CAAX,EAAc,IAAE,IAAI,IAApB,EAA0B,GAA1B,EAA+B;AAC7B,wBAAI,OAAO,IAAI,OAAJ,CAAY,CAAZ,EAAe,CAAf,CAAX;AAEA;AACA,wBAAI,SAAS,KAAK,UAAlB,EAA8B;AAC5B,6BAAK,GAAL,CAAS,SAAT;AACE;AACA,4BAAI,EAFN;AAGE;AACC,yBAAC,OAAO,CAAR,IAAa,IAAI,IAAlB,GAA0B,KAAK,MAJjC;AAKE;AACA,6BAAK,KAAL,CAAY,CAAC,OAAO,CAAR,IAAa,IAAI,IAA7B,IAAsC,KAAK,MAN7C;AAOE;AACA,6BAAK,MARP;AASE;AACA,6BAAK,MAVP;AAWE;AACA,6BAAK,KAAK,MAAL,GAAc,KAAK,KAAxB,CAZF;AAaE;AACA,6BAAK,KAAK,MAAL,GAAc,KAAK,KAAxB,CAdF;AAeE;AACA,6BAAK,MAAL,GAAc,KAAK,KAhBrB;AAiBG;AACD,6BAAK,MAAL,GAAc,KAAK,KAlBrB;AAoBD;AACF;AACF;AACF;;;;;;;;;;;ACzIH;;AAaA;;;AAGA,SAAS,IAAT,GAAa;AAEX;AACA,QAAI,oBAAJ,CAAc,GAAd,EAAmB,GAAnB;AACA;AACA,aAAS,cAAT,CAAwB,WAAxB,EAAqC,KAArC;AACD;AAAA;AAED;;;;;AAKC,OAAO,MAAP,GAAgB,YAAA;AAEf,WAAO,QAAP,GAAkB,IAAI,wBAAJ,EAAlB;AACA,QAAI,IAAI,OAAO,QAAP,CAAgB,UAAhB,EAAR;AACA,YAAQ,GAAR,CAAY,CAAZ,EAAe,IAAf,CAAqB,YAAK;AACxB;AACD,KAFD;AAGD,CAPA","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class MapBase {\n  SM: HTMLImageElement;\n  cols: number;\n  rows: number;\n  tsize: number;\n  tiles: Array<any>;\n  \n  constructor() {\n    this.cols = 0;\n    this.rows = 0;\n    this.tsize = 0;\n    this.tiles = null;\n  }\n\n  /**\n   * Gets the tile value located by the column and row (x,y) coordinates.\n   * This is trivial with a 2D array, but this method allows us to use a 1D\n   * array instead.\n   *\n   * @param {integer} x   The x-axis position of the requested tile.\n   * @param {integer} y   The y-axis position of the requested tile.\n   */\n  getTile(x: number, y: number): number {\n    if (\n      this.cols === 0\n      || this.rows === 0\n      || this.tsize === 0\n    ) {\n      throw new Error(\"Map size needs to have proper dimensions.\");\n    }\n\n    return this.tiles[y * this.cols + x];\n  }\n}\n","import { MapBase } from \"./MapBase\";\n\nexport class Overworld extends MapBase {\n  SM: HTMLImageElement;\n  tiles: Array<any>;\n  layers: Array<any>;\n  cols: number;\n  rows: number;\n  tsize: number;\n  \n  constructor() {\n    super();\n\n    /**\n     * The spritemap to be used.\n     * @var {HTMLImageElement}\n     */\n    this.SM = window.F_LOADER.getImage('TESTNUMBERED');\n\n    this.cols = 20;\n    this.rows = 15;\n    this.tsize = 300;\n    this.tiles = [\n        1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n       21,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,\n    ];\n    this.layers = [\n      [\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n      ], [\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n      ]\n    ]\n  }\n\n}\n","export class AssetLoader {\n  private _assetList: Array<any>;\n\n  constructor() {\n    this._assetList = [];\n  }\n\n  public initAssets(): Array<any> {\n    return [\n      this.loadImage(\"testTileset\", \"./DAT/1bittest.png\"),\n      this.loadImage(\"testTileset2\", \"./DAT/psychic-swamp.png\"),\n      this.loadImage(\"TESTORIG\", \"./DAT/low-res-spritesheet.png\"),\n      this.loadImage(\"TESTNUMBERED\", \"./DAT/pixel_art_tileset_test.png\"),\n    ];\n  }\n\n  public loadImage(key: string, src: string) {\n    let img = new Image();\n\n    let d = new Promise(function (resolve, reject) {\n      img.onload = function () {\n        this._assetList[key] = img;\n        resolve(img);\n      }.bind(this);\n\n      img.onerror = function () {\n        reject('Could not load image: ' + src);\n      };\n    }.bind(this));\n  \n    img.src = src;\n  \n    return d;\n  }\n\n  public getImage(key: string): HTMLImageElement {\n    return (key in this._assetList) ? this._assetList[key] : null;\n  };\n}","import { GameActor } from \"../GameObject\";\n\nexport abstract class Command {\n  public abstract execute(actor: GameActor, delta: number): void;\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveEastCommand class.\n */\nexport class MoveEastCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveE(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveNorthCommand class.\n */\nexport class MoveNorthCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveN(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveSouthCommand class.\n */\nexport class MoveSouthCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveS(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveWestCommand class.\n */\nexport class MoveWestCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveW(delta);\n  }\n}\n","import { Command } from \"./Command\";\n\n/**\n * The NullCommand class.\n * This class is special in that it intentionally doesn't execute anything, in\n * so if a user doesn't have a mapped button, we don't have to check fo `null`.\n */\nexport class NullCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(): void {}\n}\n","/**\n * @file The Command Barrel. Re-exports Command files for easier import\n * elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * The base command class.\n */\nexport * from './Command';\n\nexport * from './NullCommand';\n\nexport * from './MoveNorthCommand';\n\nexport * from './MoveSouthCommand';\n\nexport * from './MoveEastCommand';\n\nexport * from './MoveWestCommand';\n\n","import { InputHandler } from \"./Input/InputHandler\";\nimport { Camera } from \"./Render/Camera/Camera\";\nimport { Renderer } from \"./Render/Renderer\";\n\n// Player\nimport { Player } from './GameObject';\n\n// Enemies\n// TODO: Might remove\nimport { Enemy } from './GameObject';\n\n/**\n * The Game superclass. Operations to act upon the main game thread are found\n * here.\n */\nexport class FiendGame {\n\n  /**\n   * The input handler that accepts player input.\n   */\n  public InputHandler: InputHandler;\n\n  /**\n   * The instance of the Player's character.\n   */\n  public Player: Player;\n\n  /**\n   * The renderer responsible for drawing to the screen.\n   */\n  public Renderer: Renderer;\n\n  /**\n   * The main camera\n   */\n  public Camera: Camera;\n\n  /**\n   * The canvas in the DOM. What the game is rendered on.\n   */\n  public canvas: HTMLCanvasElement;\n\n  /**\n   * The number of currently-active game objects.\n   *\n   * @type {number}\n   */\n  public gameObjectCount: number;\n\n  /**\n   * The list of active game objects. Every game object in this list will have\n   * their state updated every frame, if possible.\n   */\n  public gameObjects: Array<any>;\n\n  /**\n   * The max amount of active game objects that can be present in the game.\n   * TODO: Figure out what happens if this limit is reached.\n   * @internal This could be an \"importance weight\" where less important game\n   * objects are purged.\n   */\n  public maxEntities: number;\n\n  /**\n   * The HTML wrapper for the game. Assume everything in this container is part\n   * of the game.\n   */\n  public container: HTMLElement;\n\n  /**\n   * How frequently the game state updates, ideally. Defaults to 60 Hz, 16.6\n   * frames-per-second.\n   */\n  public tickLength: number;\n\n  /**\n   * The most recently elapsed tick of the game clock.\n   */\n  public lastFrameTime: number;\n\n  /**\n   * The ID returned from our main loop's most recent call to\n   * requestAnimationFrame(). The token can then be used when we call\n   * cancelAnimationFrame() to stop the main loop by telling the browser to\n   * cancel the request that corresponds to our token.\n   */\n  public stopToken: number|null;\n\n  constructor(gamePaneWidth: number, gamePaneHeight: number) {\n\n    /**\n     * Create the game pane and canvas.\n     */\n    this.canvas = this.genCanvas(gamePaneWidth, gamePaneHeight);\n    this.container = document.getElementById(\"fiend-game\");\n    this.container.insertBefore(this.canvas, this.container.firstChild);\n\n    document.getElementById('game-pane').addEventListener(\n      'GO_created',\n      (event: CustomEvent) => this.respondToGameObjectCreation(event),\n      false\n    );\n\n    this.stopToken = null;\n\n    this.tickLength = 60;\n\n    this.lastFrameTime = 0;\n\n    this.maxEntities = 1000;\n\n    this.Player = new Player({x:125,y:125});\n\n    this.Renderer = new Renderer(this.canvas);\n\n    this.InputHandler = new InputHandler();\n\n    this.Camera = new Camera();\n\n    this.gameObjectCount = 0;\n\n    this.gameObjects = [\n      // TODO This is a test, do should be empty on init.\n      // new Enemy(),\n      this.Player,\n    ];\n\n    console.log('Player.attachedEvents :', this.Player.attachedEvents);\n\n    // Let's kick off the game loop!\n    this.main(performance.now());\n  }\n\n  /**\n   * Generates a new canvas DOM canvas element. The game will run in this\n   * canvas.\n   *\n   * @param {number} w The width of the canvas, in pixels.\n   * @param {number} h The height of the canvas, in pixels.\n   */\n  private genCanvas(w: number, h: number): HTMLCanvasElement {\n    let canvas = document.createElement('canvas');\n    canvas.id = \"game-pane\";\n    canvas.width = w;\n    canvas.height = h;\n    canvas.tabIndex = 1;\n\n    return canvas;\n  }\n\n  public respondToGameObjectCreation(event: CustomEvent) {\n    console.log('event.detail.go_id :', event.detail.go_id);\n  }\n\n  /**\n   * Calculates the game state as of a given point in time. It is the authority\n   * for game state. The delta should be used in calculations to make the game\n   * simulation framerate independent.\n   *\n   * @param {float} delta  The difference in time between this frame and last\n   * frame, in seconds.\n   */\n  private _update(delta: number): void {\n    // TODO Remove clog.\n    // console.log('delta :', delta);\n    for (let i=0; i<this.gameObjectCount; i++) {\n      this.gameObjects[i].update(delta);\n    }\n\n    this.gameObjectCount = this.gameObjects.length;\n  }\n\n  /**\n   * Responsible for drawing the current game state to the screen.\n   */\n  private _draw(): void {\n\n    // Draw the scene.\n    this.Renderer.draw(this.gameObjectCount, this.gameObjects);\n  }\n\n  /**\n   * Stops the main game loop.\n   */\n  private stopMainLoop(): void {\n    window.cancelAnimationFrame(this.stopToken);\n    console.log(\"Goodbye...\");\n  }\n\n  /**\n   * Attempts to gracefully tear down the game.\n   */\n  public shutdownGame(): void {\n    this.stopMainLoop();\n  }\n\n/**\n  * The main game loop. We use requestAnimationFrame to be thread-safe and not\n  * dominate the browser when the player blurs focus on our tab.\n  *\n  * render() is passed tFrame because it is assumed that the render method will\n  *          calculate how long it has been since the most recently passed\n  *          update tick for extrapolation (purely cosmetic for fast devices).\n  *          It draws the scene.\n  *\n  * update() calculates the game state as of a given point in time.\n  *\n  * init()   Performs whatever tasks are needed before the main loop can run.\n  *\n  *\n  * @param {DOMHighResTimeStamp} tFrame The number of milliseconds since\n  * navigationStart (when the previous document is unloaded.\n  * window.requestAnimationFrame() always provides a DOMHighResTimeStamp to\n  * callbacks as an argument when they are executed.\n  */\n  public main(tFrame: DOMHighResTimeStamp): void {\n    // Store the ID returned from our main loop's most recent call to\n    // requestAnimationFrame().\n    this.stopToken = window.requestAnimationFrame(this.main.bind(this));\n\n    // Delta should be in seconds, not ms, so we divide by 1000.\n    let delta = (tFrame - this.lastFrameTime) / 1000.0;\n    // Keep track of when the last frame happened.\n    this.lastFrameTime = tFrame;\n\n    this.InputHandler.handleInput(this.Player, delta);\n    this._update(delta);\n    this._draw();\n  }\n}\n","import { GameActor } from './GameActor';\n\n/**\n * The Enemy base class.\n */\nexport class Enemy extends GameActor {\n  public HP: number;\n  public ATK: number;\n  public speed: number;\n\n  /**\n   * The position of the GameObject\n   *\n   * @type {Coordinate}\n   */\n  public position: Coordinate;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.name = \"Black Bat\";\n\n    this.HP = 100;\n    this.ATK = 1;\n    this.speed = 100;\n    this.position = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  /**\n   *\n   * {@inheritdoc}\n   */\n  update(delta: number) {\n    this.position.x += this.speed * delta;\n    this.position.y += this.speed * delta;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(this.position.x, this.position.y, 10, 0, Math.PI*2);\n    ctx.fillStyle = \"#0095DD\";\n    ctx.fill();\n    ctx.closePath();\n  }\n}\n","import { GameObject } from '../GameObject';\n\n/**\n * The interface for the [[GameActor]] class.\n *\n * @interface IGameActor\n */\ninterface IGameActor {\n\n  /**\n   * The position member. Signifies the location of the of the GameObject.\n   *\n   * @type {Coordinate}\n   */\n  position: Coordinate;\n\n  /**\n   * Defines the signature for the update method for the GameActor.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  update(delta: number): void;\n}\n\n/**\n * The base GameActor class. All GameObjects that can influence things in the\n * environment will derive from the GameActor class.\n * @abstract\n * @extends [[GameObject]] The GameObject base abstract class.\n * @implements [[IGameActor]]\n */\nexport abstract class GameActor extends GameObject implements IGameActor {\n\n  /**\n   * The position of the GameObject.\n   *\n   * @type {Coordinate}\n   */\n  public position: Coordinate;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * The update method for the abstract GameActor class.\n   *\n   * @abstract\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public abstract update(delta: number): void;\n\n  // TODO: Make a subclass that has movement. Not all actors will, I dont think.\n  public moveN(delta: number): void {}\n  public moveS(delta: number): void {}\n  public moveE(delta: number): void {}\n  public moveW(delta: number): void {}\n}\n","import { GameActor } from './GameActor';\n\n/**\n * The interface for the [[Player]] class.\n *\n * @interface IPlayer\n */\ninterface IPlayer {\n\n  moveN(delta: number): void;\n  moveS(delta: number): void;\n  moveE(delta: number): void;\n  moveW(delta: number): void;\n}\n\n/**\n * The Player class. Keeps track of the state of the player including all\n * attributes and stats.\n *\n * @abstract\n * @extends [[GameActor]] The GameObject base abstract class.\n * @implements [[IPlayer]]\n */\nexport class Player extends GameActor implements IPlayer {\n\n  public HP: number;\n\n  public EXP: number;\n\n  public speed: number;\n\n  /**\n   * @constructor\n   */\n   constructor(position: Coordinate) {\n    super();\n\n    this.position = {x:100,y:100};\n\n    this.HP = 100;\n    this.EXP = 0;\n    this.speed = 100;\n\n    this.attachEvents([\n      'Player_died',\n    ]);\n  }\n\n  /**\n   * Updates the Player's state. Intended to be run in the main game loop.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public update(delta: number): void {\n    // TODO: console.log('this.position :', this.position);\n  }\n\n\n  /**\n   * Draws the Player entity\n   * @param ctx The canvas context.\n   */\n   public draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(this.position.x, this.position.y, 10, 0, Math.PI*2);\n    ctx.fillStyle = \"#0095DD\";\n    ctx.fill();\n    ctx.closePath();\n  }\n\n\n  /**\n   *    |               .    ||\n   *   |||      ....  .||.  ...    ...   .. ...    ....\n   *  |  ||   .|   ''  ||    ||  .|  '|.  ||  ||  ||. '\n   *  .''''|.  ||       ||    ||  ||   ||  ||  ||  . '|..\n   * .|.  .||.  '|...'  '|.' .||.  '|..|' .||. ||. |'..|'\n   */\n\n  /**\n   * Move the Player north.\n   * @param delta The game's delta between frames.\n   */\n  public moveN(delta: number): void {\n    // Decrementing {y} makes the actor move south, since we're dealing with a\n    // 2D array and not an actual mathematical grid plane.\n    this.position.y -= this.speed * delta;\n  }\n\n  /**\n   * Move the Player south.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveS(delta: number): void {\n    // Increasing {y} makes the actor move south, since we're dealing with a 2D\n    // array and not an actual mathematical grid plane.\n    this.position.y += this.speed * delta;\n  }\n\n  /**\n   * Move the Player east.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveE(delta: number): void {\n    this.position.x += this.speed * delta;\n  }\n\n    /**\n   * Move the Player west.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveW(delta: number): void {\n    this.position.x -= this.speed * delta;\n  }\n\n}\n\n","/**\n * The interface for the [[GameActor]] class.\n *\n * @interface IGameActor\n */\ninterface IGameObject {\n\n  /**\n   * Keeps track of the `id` of the last GameObject instantiated.\n   *\n   * @static\n   * @type {number}\n   */\n  idIncrementor: number;\n\n  /**\n   * The `id` of the GameObject.\n   *\n   * @type {number}\n   */\n  id: number;\n\n  /**\n   * The type of the GameObject.\n   *\n   * @type {string}\n   */\n  type: string;\n\n  /**\n   * The human-readable name of the GameObject. This will appear in-game.\n   *\n   * @type {string}\n   */\n  name: string;\n\n  /**\n   * The list of events that can be emitted.\n   *\n   * @type {EventContainer}\n   */\n  attachedEvents: EventContainer;\n\n  /**\n   * Defines the signature for the update method for the GameActor.\n   *\n   * @abstract\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  update(delta: number): void;\n}\n\n/**\n * The GameObject abstract class. All game entities inherit from this class.\n * On instantiation, the class will generate an auto-incrementing id for use\n * in identifying the newly-created GameObject.\n *\n * @abstract\n */\nexport abstract class GameObject {\n\n  /**\n   * @var idIncrementor Keeps track of the `id` of the last GameObject\n   instantiated.\n   *\n   * @static\n   */\n  private static idIncrementor: number = 1;\n\n  /**\n   * @var id The id of the instance of the GameObject.\n   */\n  private id: number;\n\n  /**\n    * @var type The name of the type of the GameObject.\n    */\n  protected type: string;\n\n  /**\n   * @var name The humanized name of the GameObject.\n   */\n  public name: string;\n\n  /**\n   * @var attachedEvents The list of events that can be emitted.\n   */\n  public attachedEvents: EventContainer;\n\n  /**\n   * The GameObject constructor. Auto-increments the GameOject id for the new\n   * GameObject being created.\n   */\n  public constructor() {\n\n    this.id = GameObject.idIncrementor++;\n\n    // Attach events to the Game Object and emit the created event.\n    this.attachedEvents = {\n      'GO_created': new CustomEvent('GO_created', {\n        detail: {\n          go_id: this.getId(),\n        }\n      }),\n    }\n    document.getElementById('game-pane')\n      .dispatchEvent(this.attachedEvents[\"GO_created\"]);\n  }\n\n  /**\n   * Accessor for the private member `id`.\n   *\n   * @returns The id of the GameObject\n   */\n  public getId(): number {\n    return this.id;\n  }\n\n  /**\n   * Updates the GameObject's state. Intended to be run in the main game loop.\n   *\n   * @abstract\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  protected abstract update(delta: number): void;\n\n  protected attachEvents(events: Array<string>): void {\n\n    for (let event of events) {\n      this.attachedEvents[event] = new Event(event);\n    }\n  }\n\n}\n","/**\n * @file The GameObject Barrel. Re-exports GameObject files for easier import\n * elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * Progenitor classes for all entities in the game.\n */\nexport * from './GameObject';\n\n/**\n * The base GameActor class. All GameObjects that can influence things in the\n * environment will derive from the GameActor class.\n */\nexport * from './GameActor/GameActor';\n\n/**\n * The player character class.\n */\nexport * from './GameActor/Player';\n\n/**\n * The base enemy class. TODO: Might be deprecated in the future.\n */\nexport * from './GameActor/Enemy';\n","import { Command } from \"../Command\";\nimport { GameActor } from '../GameObject';\n\nimport { NullCommand } from \"../Command\";\nimport { MoveNorthCommand } from \"../Command\";\nimport { MoveSouthCommand } from \"../Command\";\nimport { MoveEastCommand } from \"../Command\";\nimport { MoveWestCommand } from \"../Command\";\n\n/**\n * The interface for the InputHandler\n */\ninterface IInputHandler {\n\n  /**\n   * Binds an input to a command.\n   *\n   * @param event The user interaction with a keyboard.\n   * @param command\n   */\n  keyBind(event: KeyboardEvent, command: Command): void;\n\n  /**\n   * Handles any input if a mapped button is pressed. Run once per game update\n   * tick.\n   *\n   * @param actor The game actor entity to handle input. Most likely will be the\n   * Player(s).\n   * @param delta The\n   */\n  handleInput(actor: GameActor, delta: number): void;\n}\n\n/**\n * The IInputMap interface.\n * @keys\n * [key]: The name of the key pressed, sent by the browser.header\n * [command]: The mapped command to be executed.\n * [status]: The button's current status\n */\ninterface IInputMap {\n  [key: string]: {\n    command: Command,\n    status: ButtonStatus\n  }\n}\n\n/**\n * The built-in control scheme types. Allows a user to change the control scheme\n * without remapping all the keys individually.\n *\n * @type {enum} ControlSchemes\n */\nenum ControlSchemes {\n  DEFAULT,\n  FPS,\n  ONEHANDED_RIGHT,\n  ONEHANDED_LEFT,\n}\n\n/**\n * Maps a button to a keyboard input key.\n *\n * @type {enum} Button\n */\nenum Button {\n  UP = \"ArrowUp\",\n  DOWN = \"ArrowDown\",\n  LEFT = \"ArrowLeft\",\n  RIGHT = \"ArrowRight\",\n  E = \"e\",\n  Q = \"q\",\n  BSPACE = \"Backspace\",\n  ENTER = \"Enter\",\n  SHIFT = \"Shift\",\n}\n\n/**\n * The ButtonStatus enum.\n * @values\n * [PRESSED]: The button is pressed.\n * [RAISED]: The button is NOT pressed, it is raised. Also can be considered\n * \"untouched\" by the player.\n * [HELD]: The button is held down.\n * [RELEASED]: The button has been released from a pressed state.\n * [DISABLED]: The button has been disabled and will not fire events.\n *\n * @type {enum} ButtonStatus\n */\n enum ButtonStatus {\n  PRESSED,\n  RAISED,\n  HELD,\n  RELEASED,\n  DISABLED,\n}\n\n/**\n * The InputHandler class.\n */\nexport class InputHandler implements IInputHandler {\n\n  /**\n   * TODO Structure should add [\"context\"] so we can have context-independent\n   * buttons\n   * @type {IInputMap} The inputMap instance.\n   */\n  private inputMap: IInputMap;\n\n  /**\n   * The InputHandler constructor.\n   * Attaches the keydown and keyup KeyboardEvent to the document.\n   */\n  constructor() {\n\n    document.getElementById('game-pane').addEventListener(\n      'keydown', (event) => this.buttonPressed(event), false\n    );\n\n    document.getElementById('game-pane').addEventListener(\n      'keyup', (event) => this.buttonReleased(event), false\n    );\n\n    this.inputMap = this.initInputMap();\n\n    // TODO: This should read in user-defined input mappings, otheriwse load\n    // default settings. (if user has saved control scheme, else load default)\n    this.loadControlScheme(ControlSchemes.DEFAULT);\n  }\n\n  /**\n   * Binds an input to a command.\n   *\n   * @param {KeyboardEvent} event The key to bind the event to\n   * @param {Command} command The command to bind to the button\n   */\n  public keyBind(event: KeyboardEvent, command: Command): void {\n    this.inputMap[event.key].command = command;\n  }\n\n  /**\n   * Determins if a button was pressed. Callback for when a button is pressed by\n   * the user.\n   *\n   * @param {KeyboardEvent} event The user interaction with a keyboard.\n   */\n  public buttonPressed(event: KeyboardEvent): void {\n    event.preventDefault();\n\n    if (this.inputMap[event.key]) {\n      this.inputMap[event.key].status = ButtonStatus.PRESSED;\n    }\n  }\n\n  /**\n   * Callback for when a button is released by the user.\n   *\n   * @param {KeyboardEvent} event The user interaction with a keyboard.\n   */\n  public buttonReleased(event: KeyboardEvent): void {\n    event.preventDefault();\n\n    if (this.inputMap[event.key]) {\n      this.inputMap[event.key].status = ButtonStatus.RAISED;\n    }\n  }\n\n  /**\n   * Handles user input. Runs once per game loop.\n   */\n  public handleInput(actor: GameActor, delta: number): void {\n\n    if (this.inputMap[Button.UP].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.UP].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.DOWN].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.DOWN].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.LEFT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.LEFT].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.RIGHT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.RIGHT].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.E].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.E].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.Q].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.Q].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.BSPACE].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.BSPACE].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.ENTER].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.ENTER].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.SHIFT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.SHIFT].command.execute(actor, delta);\n    }\n  }\n\n  /**\n   * Initializes an input map so the structure is available when needed.\n   *\n   * @return {IInputMap} The IInputMap interface.\n   */\n  private initInputMap(): IInputMap {\n    let ip = {};\n\n    for(let buttonKey in Button) {\n      ip[Button[buttonKey]] = {\n        command: NullCommand,\n        status: ButtonStatus.RAISED\n      }\n    }\n\n    return ip;\n  }\n\n  /**\n   * Loads a control scheme when the game first initializes, so the player can\n   * have some input. Supports multiple control schemes so players can re-map\n   * controls without having to re-map each button individually.\n   *\n   * @param controlScheme\n   */\n  private loadControlScheme(controlScheme: ControlSchemes): void {\n    switch(controlScheme) {\n      case 1:\n        break;\n      default:\n        // this.inputMap[Button.UP].command = new MoveNorthCommand(player: GameActor);\n        this.inputMap[Button.UP].command = new MoveNorthCommand();\n        this.inputMap[Button.DOWN].command = new MoveSouthCommand();\n        this.inputMap[Button.LEFT].command = new MoveWestCommand();\n        this.inputMap[Button.RIGHT].command = new MoveEastCommand();\n        this.inputMap[Button.E].command = new NullCommand();\n        this.inputMap[Button.Q].command = new NullCommand();\n        this.inputMap[Button.BSPACE].command = new NullCommand();\n        this.inputMap[Button.ENTER].command = new NullCommand();\n        this.inputMap[Button.SHIFT].command = new NullCommand();\n    }\n  }\n}\n\n// var key = {\n//   BACKSPACE: 8,\n//   TAB:       9,\n//   RETURN:   13,\n//   ESC:      27,\n//   SPACE:    32,\n//   PAGEUP:   33,\n//   PAGEDOWN: 34,\n//   END:      35,\n//   HOME:     36,\n//   LEFT:     37,\n//   UP:       38,\n//   RIGHT:    39,\n//   DOWN:     40,\n//   INSERT:   45,\n//   DELETE:   46,\n//   ZERO:     48, ONE: 49, TWO: 50, THREE: 51, FOUR: 52, FIVE: 53, SIX: 54, SEVEN: 55, EIGHT: 56, NINE: 57,\n//   A:        65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90,\n//   TILDA:    192\n// };\n","interface ICamera {\n\n  /**\n   * The current position of the camera.\n   */\n  position: Coordinate;\n\n  /**\n   * The width of the Camera's viewport.\n   */\n  width: number;\n\n  /**\n   * The height of the Camera's viewport.\n   */\n  height: number;\n\n  /**\n   * The limit for the camera's position — The lower limit will nearly always be\n   * (0,0). The upper limit is equal to the size of the world minus the size of\n   * the camera's viewport.\n   */\n  maxX: number;\n\n  /**\n   * The limit for the camera's position — The lower limit will nearly always be\n   * (0,0). The upper limit is equal to the size of the world minus the size of\n   * the camera's viewport.\n   */\n  maxY: number;\n\n}\n\nexport class Camera implements ICamera {\n\n  position: Coordinate;\n  width: number;\n  height: number;\n  maxX: number;\n  maxY: number;\n\n  constructor() {}\n\n}\n","import { MapBase } from \"../../atlases/MapBase\";\nimport { Overworld } from \"../../atlases/Overworld\";\n\nexport class Renderer {\n\n  EMPTY_TILE: number;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  pixels: number;\n  scale: number;\n  sceneWidth: number;\n  sceneHeight: number;\n\n  /**\n   * TODO: Change this to be the scene. Recreate the Renderer when a new scene\n   * is loaded.\n   */\n  protected _currentMap: MapBase;\n\n  constructor(canvas: HTMLCanvasElement) {\n\n    this.canvas = canvas;\n\n    /**\n     * The canvas context.\n     *\n     * @var {CanvasRenderingContext2D}\n     */\n     this.ctx = this.canvas.getContext('2d');\n\n    /**\n     * Prevent anti-aliasing in the event a tile gets scaled.\n     *\n     * @property {CanvasRenderingContext2D.imageSmoothingEnabled}\n     */\n     this.ctx.imageSmoothingEnabled = false;\n\n    /**\n     * The empty tile value. If this value is set for a position in a map's\n     * array, it will not be rendered.\n     * TODO: Move this to the Scene.\n     *\n     * @var {integer}\n     */\n    this.EMPTY_TILE = 0;\n\n    /**\n     * Multiplier for x,y position to pixels. What size the tiles for the game\n     * will be rendered at. Always use a power of 2 so the scaling prevents\n     * blurring.\n     *\n     * @var {integer}\n     */\n    this.pixels = 32;\n\n    /**\n     * The scale at which the tile will be rendered. 1 = 1x scaling, 2 = 2x\n     * scaling, etc.\n     *\n     * @var {integer}\n     */\n    this.scale = 1;\n\n    this._currentMap = new Overworld();\n  }\n\n  draw(gameObjectCount: number, gameObjects: Array<any>) {\n\n    // Clear the screen\n    // TODO: Pull this out. Put in renderer.\n    this.ctx.clearRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height\n    );\n\n    // Always store the texture in a var so we don't call \"new Foo()\" multiple\n    // times a second.\n    this.drawTileMap(this._currentMap);\n\n    for (let i=0; i<gameObjectCount; i++) {\n      gameObjects[i].draw(this.ctx);\n    }\n  }\n\n  /**\n   * Renders a map according to the coordinates given in the map's file by\n   * translating the coordinates to a spritesheet.\n   *\n   * If a tile is 32x32 pixels, the 1st tile will start at (0,0) on\n   * the spritesheet, the 2nd tile will start at (32,0), the 34d at (64,0) and\n   * so on.\n   *\n   * +---+---+---+---+\n   * | 1 | 2 | 3 | 4 |\n   * +---+---+---+---+\n   * | 5 | 6 | 7 | 8 |\n   * +---+---+---+---+\n   *\n   * 'source x' and 'source y' will get the correct coords in the image file.\n   * So for our first tile, '1', drawImage will grab the subimage at (32,0).\n   * drawImage would get the subimage at (64,32) for tile '7'.\n   *\n   * TODO  https://hashrocket.com/blog/posts/using-tiled-and-canvas-to-render-game-screens\n   *\n   * @param {Object} map  The map object that extends MapBase.\n   */\n  drawTileMap(map: MapBase): void {\n    for (let x=0; x<map.cols; x++) {\n      for (let y=0; y<map.rows; y++) {\n        let tile = map.getTile(x, y);\n\n        // Let's skip rendering empty tiles.\n        if (tile !== this.EMPTY_TILE) {\n          this.ctx.drawImage(\n            // Image Source\n            map.SM,\n            // Source x (See example in comment block)\n            ((tile - 1) % map.cols) * this.pixels,\n            // Source y (See example in comment block)\n            Math.floor(((tile - 1) / map.rows)) * this.pixels,\n            // Source width\n            this.pixels,\n            // Source height\n            this.pixels,\n            // Target x\n            x * (this.pixels * this.scale),\n            // Target y\n            y * (this.pixels * this.scale),\n            // Target width\n            this.pixels * this.scale,\n             // Target height\n            this.pixels * this.scale,\n          );\n        }\n      }\n    }\n  }\n}\n","import { FiendGame } from \"./engine/FiendGame\";\nimport { AssetLoader } from \"./engine/AssetLoader\";\n\n/**\n * We need some global variables so we can load the game and the assets. Let's\n * consider moving the F_LOADER to it's own class so we don't need a global for\n * the assets.\n */\ndeclare global {\n  interface Window {\n    F_LOADER: AssetLoader;\n  }\n}\n\n/**\n * Create a new instance of FiendGame, which loads the game.\n */\nfunction init() {\n\n  // Init functionality, for now.\n  new FiendGame(640, 480);\n  // Focus the game pane on page load.\n  document.getElementById('game-pane').focus();\n};\n\n/**\n * Ensure the assets are loaded before we initialize the game. We do this with a\n * promise to ensure all the images are loaded and ready to be used.\n * TODO Make this better, more TypeScript-y.\n */\n window.onload = function() {\n\n  window.F_LOADER = new AssetLoader();\n  var p = window.F_LOADER.initAssets();\n  Promise.all(p).then( () => {\n    init();\n  });\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/atlases/MapBase.ts","src/atlases/Overworld.ts","src/engine/AssetLoader.ts","src/engine/Command/Command.ts","src/engine/Command/MoveEastCommand.ts","src/engine/Command/MoveNorthCommand.ts","src/engine/Command/MoveSouthCommand.ts","src/engine/Command/MoveWestCommand.ts","src/engine/Command/NullCommand.ts","src/engine/Command/index.ts","src/engine/Component/Component.ts","src/engine/Component/EventComponent.ts","src/engine/Component/LifeforceComponent.ts","src/engine/Component/MovementComponent.ts","src/engine/Component/index.ts","src/engine/Event/PlayerDeathEvent.ts","src/engine/Event/index.ts","src/engine/FiendGame.ts","src/engine/GameObject/GameActor/ActorFactory/ActorFactory.ts","src/engine/GameObject/GameActor/ActorFactory/OrdinaryFolkFactory.ts","src/engine/GameObject/GameActor/GameActor.ts","src/engine/GameObject/GameActor/Npc.ts","src/engine/GameObject/GameActor/OrdinaryFolk.ts","src/engine/GameObject/GameActor/Player.ts","src/engine/GameObject/GameObject.ts","src/engine/GameObject/index.ts","src/engine/Input/InputHandler.ts","src/engine/Render/Camera/Camera.ts","src/engine/Render/Renderer.ts","src/main.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class MapBase {\n  SM: HTMLImageElement;\n  cols: number;\n  rows: number;\n  tsize: number;\n  tiles: Array<any>;\n  \n  constructor() {\n    this.cols = 0;\n    this.rows = 0;\n    this.tsize = 0;\n    this.tiles = null;\n  }\n\n  /**\n   * Gets the tile value located by the column and row (x,y) coordinates.\n   * This is trivial with a 2D array, but this method allows us to use a 1D\n   * array instead.\n   *\n   * @param {integer} x   The x-axis position of the requested tile.\n   * @param {integer} y   The y-axis position of the requested tile.\n   */\n  getTile(x: number, y: number): number {\n    if (\n      this.cols === 0\n      || this.rows === 0\n      || this.tsize === 0\n    ) {\n      throw new Error(\"Map size needs to have proper dimensions.\");\n    }\n\n    return this.tiles[y * this.cols + x];\n  }\n}\n","import { MapBase } from \"./MapBase\";\n\nexport class Overworld extends MapBase {\n  SM: HTMLImageElement;\n  tiles: Array<any>;\n  layers: Array<any>;\n  cols: number;\n  rows: number;\n  tsize: number;\n  \n  constructor() {\n    super();\n\n    /**\n     * The spritemap to be used.\n     * @var {HTMLImageElement}\n     */\n    this.SM = window.F_LOADER.getImage('TESTNUMBERED');\n\n    this.cols = 20;\n    this.rows = 15;\n    this.tsize = 300;\n    this.tiles = [\n        1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n       21,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,\n    ];\n    this.layers = [\n      [\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n      ], [\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n      ]\n    ]\n  }\n\n}\n","export class AssetLoader {\n  private _assetList: Array<any>;\n\n  constructor() {\n    this._assetList = [];\n  }\n\n  public initAssets(): Array<any> {\n    return [\n      this.loadImage(\"testTileset\", \"./DAT/1bittest.png\"),\n      this.loadImage(\"testTileset2\", \"./DAT/psychic-swamp.png\"),\n      this.loadImage(\"TESTORIG\", \"./DAT/low-res-spritesheet.png\"),\n      this.loadImage(\"TESTNUMBERED\", \"./DAT/pixel_art_tileset_test.png\"),\n    ];\n  }\n\n  public loadImage(key: string, src: string) {\n    let img = new Image();\n\n    let d = new Promise(function (resolve, reject) {\n      img.onload = function () {\n        this._assetList[key] = img;\n        resolve(img);\n      }.bind(this);\n\n      img.onerror = function () {\n        reject('Could not load image: ' + src);\n      };\n    }.bind(this));\n  \n    img.src = src;\n  \n    return d;\n  }\n\n  public getImage(key: string): HTMLImageElement {\n    return (key in this._assetList) ? this._assetList[key] : null;\n  };\n}","import { GameActor } from \"../GameObject\";\n\n/**\n * The Command class.\n * @abstract\n */\nexport abstract class Command {\n\n  /**\n   * Executes the command.\n   *\n   * @param actor The GameActor to command.\n   * @param delta The game's delta between frames.\n   */\n  public abstract execute(actor: GameActor, delta: number): void;\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveEastCommand class.\n */\nexport class MoveEastCommand extends Command {\n\n  /**\n   * Executes the command.\n   *\n   * @param actor The GameActor to command.\n   * @param delta The game's delta between frames.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveE(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveNorthCommand class.\n */\nexport class MoveNorthCommand extends Command {\n\n  /**\n   * Executes the command.\n   *\n   * @param actor The GameActor to command.\n   * @param delta The game's delta between frames.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveN(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveSouthCommand class.\n */\nexport class MoveSouthCommand extends Command {\n\n  /**\n   * Executes the command.\n   *\n   * @param actor The GameActor to command.\n   * @param delta The game's delta between frames.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveS(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveWestCommand class.\n */\nexport class MoveWestCommand extends Command {\n\n  /**\n   * Executes the command.\n   *\n   * @param actor The GameActor to command.\n   * @param delta The game's delta between frames.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveW(delta);\n  }\n}\n","import { Command } from \"./Command\";\n\n/**\n * The NullCommand class.\n * This class is special in that it intentionally doesn't execute anything, in\n * so if a user doesn't have a mapped button, we don't have to check fo `null`.\n */\nexport class NullCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(): void {}\n}\n","/**\n * @file The Command Barrel. Re-exports Command files for easier import\n * elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * The base command class.\n */\nexport * from './Command';\n\nexport * from './NullCommand';\n\nexport * from './MoveNorthCommand';\n\nexport * from './MoveSouthCommand';\n\nexport * from './MoveEastCommand';\n\nexport * from './MoveWestCommand';\n\n","/**\n * The Component interface.\n */\ninterface IComponent {}\n\n/**\n * The Component class\n * @abstract\n */\nexport abstract class Component {}\n","/**\n * The EventComponent interface.\n */\n interface IEventComponent {\n\n  /**\n   * The list of ES6 Events or CustomEvents that can be emitted.\n   */\n  attachedEvents: EventContainer;\n\n  /**\n   * Adds DOM Events to this component via an array of events.\n   *\n   * @param events The array of events to add.\n   */\n  attachMultiple(eventList: Array<Event|CustomEvent>): void;\n\n  /**\n   * Attaches a single event to this component. Attached components can be\n   * emitted.\n   *\n   * @param event An `Event` or `CustomEvent` that this EventComponent knows\n   * about.\n   */\n  attach(event: Event|CustomEvent): void;\n\n  /**\n   * Emits an event via the `game-pane` DOM element. Uses the string name of the\n   * event to lookup if it's in the attachedEvent member.\n   *\n   * @param eventName The event to emit.\n   */\n  emit(eventName: string): void;\n}\n\n/**\n * The EventComponent class.\n * @implements [[IEventComponent]]\n */\nexport class EventComponent implements IEventComponent {\n\n  /**\n   * @var attachedEvents The list of events that can be emitted.\n   */\n  public attachedEvents: EventContainer;\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    // We need to declare this as an object otherwise we get a reference error\n    // when we try and assign events to it in the `attach` and `attachMultiple`\n    // methods.\n    this.attachedEvents = {};\n  }\n\n  /**\n   * Attaches a single event to this component. Attached components can be\n   * emitted.\n   *\n   * @param event An `Event` or `CustomEvent` that this EventComponent knows\n   * about.\n   */\n  public attach(event: Event|CustomEvent): void {\n    this.attachedEvents[event.type] = event;\n  }\n\n  /**\n   * Adds DOM Events to this component via an array of events.\n   *\n   * @param events The array of events to add.\n   */\n  public attachMultiple(eventList: Array<Event|CustomEvent>): void {\n    for (let event of eventList) {\n      this.attach(event);\n    }\n  }\n\n  /**\n   * Emits an event via the `game-pane` DOM element. Uses the string name of the\n   * event to lookup if it's in the attachedEvent member.\n   *\n   * @param eventName The event to emit.\n   */\n  public emit(eventName: string): void {\n    document.getElementById('game-pane')\n      .dispatchEvent(this.attachedEvents[eventName]);\n  }\n\n}\n","import { GameObject } from '../GameObject/GameObject';\nimport { Component } from './Component';\n\n/**\n * The Lifeforce component. Adds health to a GameObject. Adds life, health\n * regeneration, and death.\n *\n * This component is required for entities to be alive or dead, as well as take\n * damage.\n *\n * @extends [[Component]]\n */\nexport class LifeforceComponent extends Component {\n\n  /**\n   * The current HP of the GameObject.\n   */\n  private currentHP: number;\n\n  /**\n   * The maximum HP of the GameObject.\n   */\n  private maxHP: number;\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    super();\n  }\n\n  /**\n   * Update is intended to be run once per frame.\n   *\n   * @param GO The GameObject this component belongs to.\n   */\n  public update(GO: GameObject): void {}\n\n}\n","import { Component } from \"./Component\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The Movement component. Adds movement to a GameObject.\n *\n * This component is required for entities to be able to move around the world.\n *\n * @extends [[Component]]\n */\nexport class MovementComponent extends Component {\n\n  /**\n   * The speed at which the GameObject can move.\n   */\n  public speed: number;\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    super();\n\n    this.speed = 100;\n  }\n\n  /**\n   * Move the Actor north.\n   * @param delta The game's delta between frames.\n   */\n   public moveN(actor: GameActor, delta: number): void {\n    // Decrementing {y} makes the actor move south, since we're dealing with a\n    // 2D array and not an actual mathematical grid plane.\n    actor.position.y -= this.speed * delta;\n  }\n\n  /**\n   * Move the Actor south.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveS(actor: GameActor, delta: number): void {\n    // Increasing {y} makes the actor move south, since we're dealing with a 2D\n    // array and not an actual mathematical grid plane.\n    actor.position.y += this.speed * delta;\n  }\n\n  /**\n   * Move the Actor east.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveE(actor: GameActor, delta: number): void {\n    actor.position.x += this.speed * delta;\n  }\n\n  /**\n   * Move the Actor west.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveW(actor: GameActor, delta: number): void {\n    actor.position.x -= this.speed * delta;\n  }\n\n}\n","/**\n * @file The Component Barrel. Re-exports Component files for easier import\n * elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * Progenitor classes for all Component classes in the game.\n */\nexport * from './Component';\n\n/**\n * The Event component. Allows an entiy to emit and/or listen for events.\n */\n export * from './EventComponent';\n\n/**\n * The Lifeforce component. Adds health and all that comes with it when attached\n * to an entity.\n */\nexport * from './LifeforceComponent';\n\n/**\n * The Movement component. Adds movement to a GameObject.\n */\n export * from './MovementComponent';\n","import { GameObject } from '../GameObject';\n\n/**\n * The PlayerDeathEvent class.\n */\nexport class PlayerDeathEvent {\n\n  /**\n   * Retrieves the native ES6 CustomEvent. [[CustomEvent]] allows the attachment\n   * of data via the `CustomEventInit` dictionary.\n   *\n   * @param player The player GameObject.\n   *\n   * @emits `player_died`\n   */\n  public static create(player: GameObject): CustomEvent {\n\n    let event = new CustomEvent('player_died', {\n      detail: {\n        'go_id': player.getId(),\n      }\n    });\n\n    return event;\n  }\n}\n","/**\n * @file The Event Barrel. Re-exports Event files for easier import elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * Progenitor classes for all entities in the game.\n */\n export * from './PlayerDeathEvent';\n","import { InputHandler } from \"./Input/InputHandler\";\nimport { Camera } from \"./Render/Camera/Camera\";\nimport { Renderer } from \"./Render/Renderer\";\n\n// Player\nimport { Player } from './GameObject';\n\n// Factories\n// TODO: Actor factories should be loaded per Scene, once the scene\n// functionality is created!\nimport {\n  OrdinaryFolkFactory\n} from './GameObject';\n\n// Factories\n\n/**\n * The Game superclass. Operations to act upon the main game thread are found\n * here.\n */\nexport class FiendGame {\n\n  /**\n   * The input handler that accepts player input.\n   */\n  public InputHandler: InputHandler;\n\n  /**\n   * The instance of the Player's character.\n   */\n  public Player: Player;\n\n  /**\n   * The renderer responsible for drawing to the screen.\n   */\n  public Renderer: Renderer;\n\n  /**\n   * The main camera\n   */\n  public Camera: Camera;\n\n  /**\n   * The canvas in the DOM. What the game is rendered on.\n   */\n  public canvas: HTMLCanvasElement;\n\n  /**\n   * The number of currently-active game objects.\n   *\n   * @type {number}\n   */\n  public gameObjectCount: number;\n\n  /**\n   * The list of active game objects. Every game object in this list will have\n   * their state updated every frame, if possible.\n   */\n  public gameObjects: Array<any>;\n\n  // TODO: This is a test! Actor factories should be loaded per Scene, once the\n  // scene functionality is created!\n  public ordinaryFolk: OrdinaryFolkFactory;\n\n  /**\n   * The max amount of active game objects that can be present in the game.\n   * TODO: Figure out what happens if this limit is reached.\n   * @internal This could be an \"importance weight\" where less important game\n   * objects are purged.\n   */\n  public maxEntities: number;\n\n  /**\n   * The HTML wrapper for the game. Assume everything in this container is part\n   * of the game.\n   */\n  public container: HTMLElement;\n\n  /**\n   * How frequently the game state updates, ideally. Defaults to 60 Hz, 16.6\n   * frames-per-second.\n   */\n  public tickLength: number;\n\n  /**\n   * The most recently elapsed tick of the game clock.\n   */\n  public lastFrameTime: number;\n\n  /**\n   * The ID returned from our main loop's most recent call to\n   * requestAnimationFrame(). The token can then be used when we call\n   * cancelAnimationFrame() to stop the main loop by telling the browser to\n   * cancel the request that corresponds to our token.\n   */\n  public stopToken: number|null;\n\n  constructor(gamePaneWidth: number, gamePaneHeight: number) {\n\n    /**\n     * Create the game pane and canvas.\n     */\n    this.canvas = this.genCanvas(gamePaneWidth, gamePaneHeight);\n    this.container = document.getElementById(\"fiend-game\");\n    this.container.insertBefore(this.canvas, this.container.firstChild);\n\n    // TODO: This is a test to test event emission.\n    document.getElementById('game-pane').addEventListener(\n      'player_died',\n      (event: CustomEvent) => this.respondToGameObjectCreation(event),\n      false\n    );\n\n    this.stopToken = null;\n\n    this.tickLength = 60;\n\n    this.lastFrameTime = 0;\n\n    this.maxEntities = 1000;\n\n    this.Player = new Player({x:125,y:125});\n\n    this.Renderer = new Renderer(this.canvas);\n\n    this.InputHandler = new InputHandler();\n\n    this.Camera = new Camera();\n\n    this.gameObjectCount = 0;\n\n    // Instantiate Actor factories here as a test. We want to instantiate the\n    // factory so the memory is allocated when the Scene is loaded.\n    // TODO: Actor factories should be loaded per Scene, once the scene\n    // functionality is created!\n    this.ordinaryFolk = new OrdinaryFolkFactory();\n\n    this.gameObjects = [\n      // TODO This is a test, do should be empty on init.\n      this.Player,\n      this.ordinaryFolk.spawn({x:200,y:100}),\n    ];\n\n    // Let's kick off the game loop!\n    this.main(performance.now());\n  }\n\n  /**\n   * Generates a new canvas DOM canvas element. The game will run in this\n   * canvas.\n   *\n   * @param {number} w The width of the canvas, in pixels.\n   * @param {number} h The height of the canvas, in pixels.\n   */\n  private genCanvas(w: number, h: number): HTMLCanvasElement {\n    let canvas = document.createElement('canvas');\n    canvas.id = \"game-pane\";\n    canvas.width = w;\n    canvas.height = h;\n    canvas.tabIndex = 1;\n\n    return canvas;\n  }\n\n  public respondToGameObjectCreation(event: CustomEvent) {\n    console.log('event.detail.go_id :', event.detail.go_id);\n  }\n\n  /**\n   * Calculates the game state as of a given point in time. It is the authority\n   * for game state. The delta should be used in calculations to make the game\n   * simulation framerate independent.\n   *\n   * @param {float} delta  The difference in time between this frame and last\n   * frame, in seconds.\n   */\n  private _update(delta: number): void {\n    // TODO Remove clog.\n    // console.log('delta :', delta);\n    for (let i=0; i<this.gameObjectCount; i++) {\n      this.gameObjects[i].update(delta);\n    }\n\n    this.gameObjectCount = this.gameObjects.length;\n  }\n\n  /**\n   * Responsible for drawing the current game state to the screen.\n   */\n  private _draw(): void {\n\n    // Draw the scene.\n    this.Renderer.draw(this.gameObjectCount, this.gameObjects);\n  }\n\n  /**\n   * Stops the main game loop.\n   */\n  private stopMainLoop(): void {\n    window.cancelAnimationFrame(this.stopToken);\n    console.log(\"Goodbye...\");\n  }\n\n  /**\n   * Attempts to gracefully tear down the game.\n   */\n  public shutdownGame(): void {\n    this.stopMainLoop();\n  }\n\n/**\n  * The main game loop. We use requestAnimationFrame to be thread-safe and not\n  * dominate the browser when the player blurs focus on our tab.\n  *\n  * render() is passed tFrame because it is assumed that the render method will\n  *          calculate how long it has been since the most recently passed\n  *          update tick for extrapolation (purely cosmetic for fast devices).\n  *          It draws the scene.\n  *\n  * update() calculates the game state as of a given point in time.\n  *\n  * init()   Performs whatever tasks are needed before the main loop can run.\n  *\n  *\n  * @param {DOMHighResTimeStamp} tFrame The number of milliseconds since\n  * navigationStart (when the previous document is unloaded.\n  * window.requestAnimationFrame() always provides a DOMHighResTimeStamp to\n  * callbacks as an argument when they are executed.\n  */\n  public main(tFrame: DOMHighResTimeStamp): void {\n    // Store the ID returned from our main loop's most recent call to\n    // requestAnimationFrame().\n    this.stopToken = window.requestAnimationFrame(this.main.bind(this));\n\n    // Delta should be in seconds, not ms, so we divide by 1000.\n    let delta = (tFrame - this.lastFrameTime) / 1000.0;\n    // Keep track of when the last frame happened.\n    this.lastFrameTime = tFrame;\n\n    this.InputHandler.handleInput(this.Player, delta);\n    this._update(delta);\n    this._draw();\n  }\n}\n","import { GameActor } from \"../GameActor\";\n\n/**\n * The ActorFactory class. Used for common actors such as common enemies,\n * wildlife, generic NPCs, etc. Allows us to implement the \"Type Object\"\n * pattern.\n *\n * The benefit here is twofold:\n * 1) We can define the Actor's properties in an external file, say, JSON, then\n * create a new Actor with those properties when a Scene is loaded.\n * 2) We can change the type of the Actor on the fly without recreating it.\n */\nexport abstract class ActorFactory {\n\n  /**\n   * The string unique label for the Actor type.\n   */\n  public label: string;\n\n  /**\n   * Factory method for creating a new Npc of a specific type.\n   * For reference, check out the Type Object (factory) pattern.\n   *\n   * @param position The starting position of the spawned Actor.\n   *\n   * @return The spawned GameActor.\n   */\n  protected abstract spawn(position: Coordinate): GameActor;\n}\n","import {\n  ActorFactory,\n  OrdinaryFolk\n} from '../../../GameObject';\n\nimport {\n  LifeforceComponent,\n  MovementComponent\n} from \"../../../Component\";\n\n/**\n * The OrdinaryFolkFactory class. This is used to spawn non-unique,\n * humanoid-like GameActors aka \"Folks.\"\n */\nexport class OrdinaryFolkFactory extends ActorFactory {\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    super();\n\n    this.label = \"ordinary_folk\";\n  }\n\n  /**\n   * Factory method for creating a new Npc of type OrdinaryFolk.\n   * For reference, check out the Type Object (factory) pattern.\n   *\n   * @param position The starting position of the spawned Actor.\n   *\n   * @return The spawned GameActor.\n   */\n  public spawn(position: Coordinate): OrdinaryFolk {\n    let npc = new OrdinaryFolk(\n      this,\n      position,\n      new MovementComponent(),\n      new LifeforceComponent()\n    );\n\n    return npc;\n  }\n}\n","import { GameObject } from '../../GameObject';\n\n/**\n * The interface for the [[GameActor]] class.\n *\n * @interface IGameActor\n */\ninterface IGameActor {\n\n  /**\n   * The position member. Signifies the location of the of the GameObject.\n   */\n  position: Coordinate;\n\n  /**\n   * Defines the signature for the update method for the GameActor.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  update(delta: number): void;\n}\n\n/**\n * The base GameActor class. All GameObjects that can influence things in the\n * environment will derive from the GameActor class.\n * @abstract\n * @extends [[GameObject]] The GameObject base abstract class.\n * @implements [[IGameActor]]\n */\nexport abstract class GameActor extends GameObject implements IGameActor {\n\n  /**\n   * The position of the GameObject.\n   */\n  public position: Coordinate;\n\n  /**\n   * @constructor\n   *\n   * @param position The starting position of the spawned Actor.\n   */\n  constructor(position: Coordinate) {\n    super();\n\n    this.position = position;\n  }\n\n  /**\n   * The update method for the abstract GameActor class.\n   *\n   * @abstract\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public abstract update(delta: number): void;\n\n  // TODO: Make a subclass that has movement. Not all actors will, I dont think.\n  public moveN(delta: number): void {}\n  public moveS(delta: number): void {}\n  public moveE(delta: number): void {}\n  public moveW(delta: number): void {}\n}\n","import { GameActor } from './GameActor';\nimport { ActorFactory } from '../../GameObject';\n\n/**\n * The Npc class. All non-player characters are Npcs, unlike some games where\n * there is a `Monster` class for all hostile actors.The reasoning is that in\n * Fiend, any non-player character can be a friend or foe, depending on how the\n * player acts.\n */\nexport class Npc extends GameActor {\n\n  /**\n   * The actor's type.\n   */\n  protected _type: ActorFactory;\n\n  /**\n   * @constructor\n   *\n   * @param actorType The Actor's type.\n   * @param position The starting position of the spawned Actor.\n   */\n  public constructor(actorType: ActorFactory, position: Coordinate) {\n    super(position);\n\n    this._type = actorType;\n  }\n\n  /**\n   * The update method for the Npc class.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public update(delta: number): void {}\n\n}\n","import {\n  ActorFactory,\n  Npc\n} from '../../GameObject';\n\nimport {\n  MovementComponent,\n  LifeforceComponent\n} from '../../Component';\n\n/**\n * The OrdinaryFolk class. Ordinary Folks are generally benign NPCs to populate\n * the world.\n */\nexport class OrdinaryFolk extends Npc {\n\n  private _lifeforceComponent: LifeforceComponent;\n  private _movementComponent: MovementComponent;\n\n  /**\n   * @constructor\n   *\n   * @param actorType The Actor's type.\n   * @param position The starting position of the spawned Actor.\n   * @param mc The movement component.\n   * @param lc The lifeforce component.\n   */\n  public constructor(\n    actorType: ActorFactory,\n    position: Coordinate,\n    mc: MovementComponent,\n    lc: LifeforceComponent\n  ) {\n    super(actorType, position);\n\n    this._movementComponent = mc;\n    this._lifeforceComponent = lc;\n  }\n\n  /**\n   * The update method for the Npc class.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public update(delta: number): void {}\n\n  /**\n   * Draws the NPC entity.\n   * TODO: This should be moved to the Render component once it's done.\n   *\n   * @param ctx The canvas context.\n   */\n  public draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.rect(this.position.x, this.position.y, 20, 20);\n    ctx.fillStyle = \"#FF0000\";\n    ctx.fill();\n    ctx.closePath();\n  }\n\n}\n","import { GameActor } from './GameActor';\nimport {\n  EventComponent,\n  LifeforceComponent,\n  MovementComponent\n} from '../../Component';\n\nimport { PlayerDeathEvent } from '../../Event';\n\n/**\n * The interface for the [[Player]] class.\n *\n * @interface IPlayer\n */\ninterface IPlayer {\n\n  /**\n   * Move the Player north.\n   *\n   * @param delta The game's delta between frames.\n   */\n  moveN(delta: number): void;\n\n  /**\n   * Move the Player south.\n   *\n   * @param delta The game's delta between frames.\n   */\n  moveS(delta: number): void;\n\n  /**\n   * Move the Player east.\n   *\n   * @param delta The game's delta between frames.\n   */\n  moveE(delta: number): void;\n\n  /**\n   * Move the Player west.\n   *\n   * @param delta The game's delta between frames.\n   */\n  moveW(delta: number): void;\n}\n\n/**\n * The Player class. Keeps track of the state of the player including all\n * attributes and stats.\n *\n * @abstract\n * @extends [[GameActor]] The GameObject base abstract class.\n * @implements [[IPlayer]]\n */\nexport class Player extends GameActor implements IPlayer {\n\n  private _eventComponent: EventComponent;\n  private _lifeforceComponent: LifeforceComponent;\n  private _movementComponent: MovementComponent;\n\n  /**\n   * @constructor\n   *\n   * @param position The starting position of the Player.\n   */\n   constructor(position: Coordinate) {\n    super(position);\n\n    this._lifeforceComponent = new LifeforceComponent();\n    this._movementComponent = new MovementComponent();\n\n    this._eventComponent = new EventComponent();\n    this._eventComponent.attach(PlayerDeathEvent.create(this));\n  }\n\n  /**\n   * Updates the Player's state. Intended to be run in the main game loop.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public update(delta: number): void {\n    this._lifeforceComponent.update(this);\n    // this._eventComponent.emit('player_died');\n    // TODO: console.log('this.position :', this.position);\n  }\n\n\n  /**\n   * Draws the Player entity\n   *\n   * @param ctx The canvas context.\n   */\n   public draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(this.position.x, this.position.y, 10, 0, Math.PI*2);\n    ctx.fillStyle = \"#0095DD\";\n    ctx.fill();\n    ctx.closePath();\n  }\n\n\n  /**\n   *    |               .    ||\n   *   |||      ....  .||.  ...    ...   .. ...    ....\n   *  |  ||   .|   ''  ||    ||  .|  '|.  ||  ||  ||. '\n   *  .''''|.  ||       ||    ||  ||   ||  ||  ||  . '|..\n   * .|.  .||.  '|...'  '|.' .||.  '|..|' .||. ||. |'..|'\n   */\n\n  /**\n   * Move the Player north.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveN(delta: number): void {\n    this._movementComponent.moveN(this, delta);\n  }\n\n  /**\n   * Public API for the MovementComponent\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveS(delta: number): void {\n    this._movementComponent.moveS(this, delta);\n  }\n\n  /**\n   * Move the Player east.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveE(delta: number): void {\n    this._movementComponent.moveE(this, delta);\n  }\n\n  /**\n   * Move the Player west.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveW(delta: number): void {\n    this._movementComponent.moveW(this, delta);\n  }\n\n}\n\n","/**\n * The interface for the [[GameObject]] class.\n *\n * @interface IGameObject\n */\ninterface IGameObject {\n\n  /**\n   * Accessor for the private member `id`.\n   *\n   * @returns The id of the GameObject\n   */\n   getId(): number;\n\n  /**\n   * Defines the signature for the update method for the GameActor.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  update(delta: number): void;\n}\n\n/**\n * The GameObject abstract class. All game entities inherit from this class.\n * On instantiation, the class will generate an auto-incrementing id for use\n * in identifying the newly-created GameObject.\n *\n * @abstract\n */\nexport abstract class GameObject implements IGameObject {\n\n  /**\n   * @var idIncrementor Keeps track of the `id` of the last GameObject\n   instantiated.\n   *\n   * @static\n   */\n  private static idIncrementor: number = 1;\n\n  /**\n   * @var id The id of the instance of the GameObject.\n   */\n  private id: number;\n\n  /**\n   * @constructor\n   * Auto-increments the GameOject id for the new GameObject being created.\n   */\n  public constructor() {\n    this.id = GameObject.idIncrementor++;\n  }\n\n  /**\n   * Accessor for the private member `id`.\n   *\n   * @returns The id of the GameObject\n   */\n  public getId(): number {\n    return this.id;\n  }\n\n  /**\n   * Updates the GameObject's state. Intended to be run in the main game loop.\n   *\n   * @abstract\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public abstract update(delta: number): void;\n\n}\n","/**\n * @file The GameObject Barrel. Re-exports GameObject files for easier import\n * elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * Progenitor classes for all entities in the game.\n */\nexport * from './GameObject';\n\n/**\n * The base GameActor class. All GameObjects that can influence things in the\n * environment will derive from the GameActor class.\n */\nexport * from './GameActor/GameActor';\n\n/**\n * The base Npc class.\n */\nexport * from './GameActor/Npc';\n\n/**\n * The ordinary folk npc class.\n */\nexport * from './GameActor/OrdinaryFolk';\n\n/**\n * The player character class.\n */\nexport * from './GameActor/Player';\n\n/**\n * The base Actor factory class.\n */\nexport * from './GameActor/ActorFactory/ActorFactory';\n\n/**\n * The OrdinaryFolk factory class.\n */\nexport * from './GameActor/ActorFactory/OrdinaryFolkFactory';\n","import { Command } from \"../Command\";\nimport { GameActor } from '../GameObject';\n\nimport { NullCommand } from \"../Command\";\nimport { MoveNorthCommand } from \"../Command\";\nimport { MoveSouthCommand } from \"../Command\";\nimport { MoveEastCommand } from \"../Command\";\nimport { MoveWestCommand } from \"../Command\";\n\n/**\n * The interface for the InputHandler\n */\ninterface IInputHandler {\n\n  /**\n   * Binds an input to a command.\n   *\n   * @param event The user interaction with a keyboard.\n   * @param command\n   */\n  keyBind(event: KeyboardEvent, command: Command): void;\n\n  /**\n   * Handles any input if a mapped button is pressed. Run once per game update\n   * tick.\n   *\n   * @param actor The game actor entity to handle input. Most likely will be the\n   * Player(s).\n   * @param delta The\n   */\n  handleInput(actor: GameActor, delta: number): void;\n}\n\n/**\n * The IInputMap interface.\n * @keys\n * [key]: The name of the key pressed, sent by the browser.header\n * [command]: The mapped command to be executed.\n * [status]: The button's current status\n */\ninterface IInputMap {\n  [key: string]: {\n    command: Command,\n    status: ButtonStatus\n  }\n}\n\n/**\n * The built-in control scheme types. Allows a user to change the control scheme\n * without remapping all the keys individually.\n *\n * @type {enum} ControlSchemes\n */\nenum ControlSchemes {\n  DEFAULT,\n  FPS,\n  ONEHANDED_RIGHT,\n  ONEHANDED_LEFT,\n}\n\n/**\n * Maps a button to a keyboard input key.\n *\n * @type {enum} Button\n */\nenum Button {\n  UP = \"ArrowUp\",\n  DOWN = \"ArrowDown\",\n  LEFT = \"ArrowLeft\",\n  RIGHT = \"ArrowRight\",\n  E = \"e\",\n  Q = \"q\",\n  BSPACE = \"Backspace\",\n  ENTER = \"Enter\",\n  SHIFT = \"Shift\",\n}\n\n/**\n * The ButtonStatus enum.\n * @values\n * [PRESSED]: The button is pressed.\n * [RAISED]: The button is NOT pressed, it is raised. Also can be considered\n * \"untouched\" by the player.\n * [HELD]: The button is held down.\n * [RELEASED]: The button has been released from a pressed state.\n * [DISABLED]: The button has been disabled and will not fire events.\n *\n * @type {enum} ButtonStatus\n */\n enum ButtonStatus {\n  PRESSED,\n  RAISED,\n  HELD,\n  RELEASED,\n  DISABLED,\n}\n\n/**\n * The InputHandler class.\n */\nexport class InputHandler implements IInputHandler {\n\n  /**\n   * TODO Structure should add [\"context\"] so we can have context-independent\n   * buttons\n   * @type {IInputMap} The inputMap instance.\n   */\n  private inputMap: IInputMap;\n\n  /**\n   * The InputHandler constructor.\n   * Attaches the keydown and keyup KeyboardEvent to the document.\n   */\n  constructor() {\n\n    document.getElementById('game-pane').addEventListener(\n      'keydown', (event) => this.buttonPressed(event), false\n    );\n\n    document.getElementById('game-pane').addEventListener(\n      'keyup', (event) => this.buttonReleased(event), false\n    );\n\n    this.inputMap = this.initInputMap();\n\n    // TODO: This should read in user-defined input mappings, otheriwse load\n    // default settings. (if user has saved control scheme, else load default)\n    this.loadControlScheme(ControlSchemes.DEFAULT);\n  }\n\n  /**\n   * Binds an input to a command.\n   *\n   * @param {KeyboardEvent} event The key to bind the event to\n   * @param {Command} command The command to bind to the button\n   */\n  public keyBind(event: KeyboardEvent, command: Command): void {\n    this.inputMap[event.key].command = command;\n  }\n\n  /**\n   * Determins if a button was pressed. Callback for when a button is pressed by\n   * the user.\n   *\n   * @param {KeyboardEvent} event The user interaction with a keyboard.\n   */\n  public buttonPressed(event: KeyboardEvent): void {\n    event.preventDefault();\n\n    if (this.inputMap[event.key]) {\n      this.inputMap[event.key].status = ButtonStatus.PRESSED;\n    }\n  }\n\n  /**\n   * Callback for when a button is released by the user.\n   *\n   * @param {KeyboardEvent} event The user interaction with a keyboard.\n   */\n  public buttonReleased(event: KeyboardEvent): void {\n    event.preventDefault();\n\n    if (this.inputMap[event.key]) {\n      this.inputMap[event.key].status = ButtonStatus.RAISED;\n    }\n  }\n\n  /**\n   * Handles user input. Runs once per game loop.\n   */\n  public handleInput(actor: GameActor, delta: number): void {\n\n    if (this.inputMap[Button.UP].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.UP].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.DOWN].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.DOWN].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.LEFT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.LEFT].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.RIGHT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.RIGHT].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.E].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.E].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.Q].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.Q].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.BSPACE].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.BSPACE].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.ENTER].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.ENTER].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.SHIFT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.SHIFT].command.execute(actor, delta);\n    }\n  }\n\n  /**\n   * Initializes an input map so the structure is available when needed.\n   *\n   * @return {IInputMap} The IInputMap interface.\n   */\n  private initInputMap(): IInputMap {\n    let ip = {};\n\n    for(let buttonKey in Button) {\n      ip[Button[buttonKey]] = {\n        command: NullCommand,\n        status: ButtonStatus.RAISED\n      }\n    }\n\n    return ip;\n  }\n\n  /**\n   * Loads a control scheme when the game first initializes, so the player can\n   * have some input. Supports multiple control schemes so players can re-map\n   * controls without having to re-map each button individually.\n   *\n   * @param controlScheme\n   */\n  private loadControlScheme(controlScheme: ControlSchemes): void {\n    switch(controlScheme) {\n      case 1:\n        break;\n      default:\n        // this.inputMap[Button.UP].command = new MoveNorthCommand(player: GameActor);\n        this.inputMap[Button.UP].command = new MoveNorthCommand();\n        this.inputMap[Button.DOWN].command = new MoveSouthCommand();\n        this.inputMap[Button.LEFT].command = new MoveWestCommand();\n        this.inputMap[Button.RIGHT].command = new MoveEastCommand();\n        this.inputMap[Button.E].command = new NullCommand();\n        this.inputMap[Button.Q].command = new NullCommand();\n        this.inputMap[Button.BSPACE].command = new NullCommand();\n        this.inputMap[Button.ENTER].command = new NullCommand();\n        this.inputMap[Button.SHIFT].command = new NullCommand();\n    }\n  }\n}\n\n// var key = {\n//   BACKSPACE: 8,\n//   TAB:       9,\n//   RETURN:   13,\n//   ESC:      27,\n//   SPACE:    32,\n//   PAGEUP:   33,\n//   PAGEDOWN: 34,\n//   END:      35,\n//   HOME:     36,\n//   LEFT:     37,\n//   UP:       38,\n//   RIGHT:    39,\n//   DOWN:     40,\n//   INSERT:   45,\n//   DELETE:   46,\n//   ZERO:     48, ONE: 49, TWO: 50, THREE: 51, FOUR: 52, FIVE: 53, SIX: 54, SEVEN: 55, EIGHT: 56, NINE: 57,\n//   A:        65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90,\n//   TILDA:    192\n// };\n","interface ICamera {\n\n  /**\n   * The current position of the camera.\n   */\n  position: Coordinate;\n\n  /**\n   * The width of the Camera's viewport.\n   */\n  width: number;\n\n  /**\n   * The height of the Camera's viewport.\n   */\n  height: number;\n\n  /**\n   * The limit for the camera's position — The lower limit will nearly always be\n   * (0,0). The upper limit is equal to the size of the world minus the size of\n   * the camera's viewport.\n   */\n  maxX: number;\n\n  /**\n   * The limit for the camera's position — The lower limit will nearly always be\n   * (0,0). The upper limit is equal to the size of the world minus the size of\n   * the camera's viewport.\n   */\n  maxY: number;\n\n}\n\nexport class Camera implements ICamera {\n\n  position: Coordinate;\n  width: number;\n  height: number;\n  maxX: number;\n  maxY: number;\n\n  constructor() {}\n\n}\n","import { MapBase } from \"../../atlases/MapBase\";\nimport { Overworld } from \"../../atlases/Overworld\";\n\nexport class Renderer {\n\n  EMPTY_TILE: number;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  pixels: number;\n  scale: number;\n  sceneWidth: number;\n  sceneHeight: number;\n\n  /**\n   * TODO: Change this to be the scene. Recreate the Renderer when a new scene\n   * is loaded.\n   */\n  protected _currentMap: MapBase;\n\n  constructor(canvas: HTMLCanvasElement) {\n\n    this.canvas = canvas;\n\n    /**\n     * The canvas context.\n     *\n     * @var {CanvasRenderingContext2D}\n     */\n     this.ctx = this.canvas.getContext('2d');\n\n    /**\n     * Prevent anti-aliasing in the event a tile gets scaled.\n     *\n     * @property {CanvasRenderingContext2D.imageSmoothingEnabled}\n     */\n     this.ctx.imageSmoothingEnabled = false;\n\n    /**\n     * The empty tile value. If this value is set for a position in a map's\n     * array, it will not be rendered.\n     * TODO: Move this to the Scene.\n     *\n     * @var {integer}\n     */\n    this.EMPTY_TILE = 0;\n\n    /**\n     * Multiplier for x,y position to pixels. What size the tiles for the game\n     * will be rendered at. Always use a power of 2 so the scaling prevents\n     * blurring.\n     *\n     * @var {integer}\n     */\n    this.pixels = 32;\n\n    /**\n     * The scale at which the tile will be rendered. 1 = 1x scaling, 2 = 2x\n     * scaling, etc.\n     *\n     * @var {integer}\n     */\n    this.scale = 1;\n\n    this._currentMap = new Overworld();\n  }\n\n  draw(gameObjectCount: number, gameObjects: Array<any>) {\n\n    // Clear the screen\n    // TODO: Pull this out. Put in renderer.\n    this.ctx.clearRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height\n    );\n\n    // Always store the texture in a var so we don't call \"new Foo()\" multiple\n    // times a second.\n    this.drawTileMap(this._currentMap);\n\n    for (let i=0; i<gameObjectCount; i++) {\n      gameObjects[i].draw(this.ctx);\n    }\n  }\n\n  /**\n   * Renders a map according to the coordinates given in the map's file by\n   * translating the coordinates to a spritesheet.\n   *\n   * If a tile is 32x32 pixels, the 1st tile will start at (0,0) on\n   * the spritesheet, the 2nd tile will start at (32,0), the 34d at (64,0) and\n   * so on.\n   *\n   * +---+---+---+---+\n   * | 1 | 2 | 3 | 4 |\n   * +---+---+---+---+\n   * | 5 | 6 | 7 | 8 |\n   * +---+---+---+---+\n   *\n   * 'source x' and 'source y' will get the correct coords in the image file.\n   * So for our first tile, '1', drawImage will grab the subimage at (32,0).\n   * drawImage would get the subimage at (64,32) for tile '7'.\n   *\n   * TODO  https://hashrocket.com/blog/posts/using-tiled-and-canvas-to-render-game-screens\n   *\n   * @param {Object} map  The map object that extends MapBase.\n   */\n  drawTileMap(map: MapBase): void {\n    for (let x=0; x<map.cols; x++) {\n      for (let y=0; y<map.rows; y++) {\n        let tile = map.getTile(x, y);\n\n        // Let's skip rendering empty tiles.\n        if (tile !== this.EMPTY_TILE) {\n          this.ctx.drawImage(\n            // Image Source\n            map.SM,\n            // Source x (See example in comment block)\n            ((tile - 1) % map.cols) * this.pixels,\n            // Source y (See example in comment block)\n            Math.floor(((tile - 1) / map.rows)) * this.pixels,\n            // Source width\n            this.pixels,\n            // Source height\n            this.pixels,\n            // Target x\n            x * (this.pixels * this.scale),\n            // Target y\n            y * (this.pixels * this.scale),\n            // Target width\n            this.pixels * this.scale,\n             // Target height\n            this.pixels * this.scale,\n          );\n        }\n      }\n    }\n  }\n}\n","import { FiendGame } from \"./engine/FiendGame\";\nimport { AssetLoader } from \"./engine/AssetLoader\";\n\n/**\n * We need some global variables so we can load the game and the assets. Let's\n * consider moving the F_LOADER to it's own class so we don't need a global for\n * the assets.\n */\ndeclare global {\n  interface Window {\n    F_LOADER: AssetLoader;\n  }\n}\n\n/**\n * Create a new instance of FiendGame, which loads the game.\n */\nfunction init() {\n\n  // Init functionality, for now.\n  new FiendGame(640, 480);\n  // Focus the game pane on page load.\n  document.getElementById('game-pane').focus();\n};\n\n/**\n * Ensure the assets are loaded before we initialize the game. We do this with a\n * promise to ensure all the images are loaded and ready to be used.\n * TODO Make this better, more TypeScript-y.\n */\n window.onload = function() {\n\n  window.F_LOADER = new AssetLoader();\n  var p = window.F_LOADER.initAssets();\n  Promise.all(p).then( () => {\n    init();\n  });\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXRsYXNlcy9NYXBCYXNlLnRzIiwic3JjL2F0bGFzZXMvT3ZlcndvcmxkLnRzIiwic3JjL2VuZ2luZS9Bc3NldExvYWRlci50cyIsInNyYy9lbmdpbmUvQ29tbWFuZC9Db21tYW5kLnRzIiwic3JjL2VuZ2luZS9Db21tYW5kL01vdmVFYXN0Q29tbWFuZC50cyIsInNyYy9lbmdpbmUvQ29tbWFuZC9Nb3ZlTm9ydGhDb21tYW5kLnRzIiwic3JjL2VuZ2luZS9Db21tYW5kL01vdmVTb3V0aENvbW1hbmQudHMiLCJzcmMvZW5naW5lL0NvbW1hbmQvTW92ZVdlc3RDb21tYW5kLnRzIiwic3JjL2VuZ2luZS9Db21tYW5kL051bGxDb21tYW5kLnRzIiwic3JjL2VuZ2luZS9Db21tYW5kL2luZGV4LnRzIiwic3JjL2VuZ2luZS9Db21wb25lbnQvQ29tcG9uZW50LnRzIiwic3JjL2VuZ2luZS9Db21wb25lbnQvRXZlbnRDb21wb25lbnQudHMiLCJzcmMvZW5naW5lL0NvbXBvbmVudC9MaWZlZm9yY2VDb21wb25lbnQudHMiLCJzcmMvZW5naW5lL0NvbXBvbmVudC9Nb3ZlbWVudENvbXBvbmVudC50cyIsInNyYy9lbmdpbmUvQ29tcG9uZW50L2luZGV4LnRzIiwic3JjL2VuZ2luZS9FdmVudC9QbGF5ZXJEZWF0aEV2ZW50LnRzIiwic3JjL2VuZ2luZS9FdmVudC9pbmRleC50cyIsInNyYy9lbmdpbmUvRmllbmRHYW1lLnRzIiwic3JjL2VuZ2luZS9HYW1lT2JqZWN0L0dhbWVBY3Rvci9BY3RvckZhY3RvcnkvQWN0b3JGYWN0b3J5LnRzIiwic3JjL2VuZ2luZS9HYW1lT2JqZWN0L0dhbWVBY3Rvci9BY3RvckZhY3RvcnkvT3JkaW5hcnlGb2xrRmFjdG9yeS50cyIsInNyYy9lbmdpbmUvR2FtZU9iamVjdC9HYW1lQWN0b3IvR2FtZUFjdG9yLnRzIiwic3JjL2VuZ2luZS9HYW1lT2JqZWN0L0dhbWVBY3Rvci9OcGMudHMiLCJzcmMvZW5naW5lL0dhbWVPYmplY3QvR2FtZUFjdG9yL09yZGluYXJ5Rm9say50cyIsInNyYy9lbmdpbmUvR2FtZU9iamVjdC9HYW1lQWN0b3IvUGxheWVyLnRzIiwic3JjL2VuZ2luZS9HYW1lT2JqZWN0L0dhbWVPYmplY3QudHMiLCJzcmMvZW5naW5lL0dhbWVPYmplY3QvaW5kZXgudHMiLCJzcmMvZW5naW5lL0lucHV0L0lucHV0SGFuZGxlci50cyIsInNyYy9lbmdpbmUvUmVuZGVyL0NhbWVyYS9DYW1lcmEudHMiLCJzcmMvZW5naW5lL1JlbmRlci9SZW5kZXJlci50cyIsInNyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQ0FhLE8sV0FBQSxPO0FBT1gsdUJBQUE7QUFBQTs7QUFDRSxhQUFLLElBQUwsR0FBWSxDQUFaO0FBQ0EsYUFBSyxJQUFMLEdBQVksQ0FBWjtBQUNBLGFBQUssS0FBTCxHQUFhLENBQWI7QUFDQSxhQUFLLEtBQUwsR0FBYSxJQUFiO0FBQ0Q7QUFFRDs7Ozs7Ozs7Ozs7O2dDQVFRLEMsRUFBVyxDLEVBQVM7QUFDMUIsZ0JBQ0UsS0FBSyxJQUFMLEtBQWMsQ0FBZCxJQUNHLEtBQUssSUFBTCxLQUFjLENBRGpCLElBRUcsS0FBSyxLQUFMLEtBQWUsQ0FIcEIsRUFJRTtBQUNBLHNCQUFNLElBQUksS0FBSixDQUFVLDJDQUFWLENBQU47QUFDRDtBQUVELG1CQUFPLEtBQUssS0FBTCxDQUFXLElBQUksS0FBSyxJQUFULEdBQWdCLENBQTNCLENBQVA7QUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQzlCVSxTLFdBQUEsUzs7O0FBUVgseUJBQUE7QUFBQTs7QUFHRTs7OztBQUhGOztBQU9FLGNBQUssRUFBTCxHQUFVLE9BQU8sUUFBUCxDQUFnQixRQUFoQixDQUF5QixjQUF6QixDQUFWO0FBRUEsY0FBSyxJQUFMLEdBQVksRUFBWjtBQUNBLGNBQUssSUFBTCxHQUFZLEVBQVo7QUFDQSxjQUFLLEtBQUwsR0FB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QUFSLElBQWEsSUFBSSxJQUFsQixHQUEwQixLQUFLLE1BSmpDO0FBS0U7QUFDQSw2QkFBSyxLQUFMLENBQVksQ0FBQyxPQUFPLENBQVIsSUFBYSxJQUFJLElBQTdCLElBQXNDLEtBQUssTUFON0M7QUFPRTtBQUNBLDZCQUFLLE1BUlA7QUFTRTtBQUNBLDZCQUFLLE1BVlA7QUFXRTtBQUNBLDZCQUFLLEtBQUssTUFBTCxHQUFjLEtBQUssS0FBeEIsQ0FaRjtBQWFFO0FBQ0EsNkJBQUssS0FBSyxNQUFMLEdBQWMsS0FBSyxLQUF4QixDQWRGO0FBZUU7QUFDQSw2QkFBSyxNQUFMLEdBQWMsS0FBSyxLQWhCckI7QUFpQkc7QUFDRCw2QkFBSyxNQUFMLEdBQWMsS0FBSyxLQWxCckI7QUFvQkQ7QUFDRjtBQUNGO0FBQ0Y7Ozs7Ozs7Ozs7O0FDeklIOztBQWFBOzs7QUFHQSxTQUFTLElBQVQsR0FBYTtBQUVYO0FBQ0EsUUFBSSxvQkFBSixDQUFjLEdBQWQsRUFBbUIsR0FBbkI7QUFDQTtBQUNBLGFBQVMsY0FBVCxDQUF3QixXQUF4QixFQUFxQyxLQUFyQztBQUNEO0FBQUE7QUFFRDs7Ozs7QUFLQyxPQUFPLE1BQVAsR0FBZ0IsWUFBQTtBQUVmLFdBQU8sUUFBUCxHQUFrQixJQUFJLHdCQUFKLEVBQWxCO0FBQ0EsUUFBSSxJQUFJLE9BQU8sUUFBUCxDQUFnQixVQUFoQixFQUFSO0FBQ0EsWUFBUSxHQUFSLENBQVksQ0FBWixFQUFlLElBQWYsQ0FBcUIsWUFBSztBQUN4QjtBQUNELEtBRkQ7QUFHRCxDQVBBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiZXhwb3J0IGNsYXNzIE1hcEJhc2Uge1xuICBTTTogSFRNTEltYWdlRWxlbWVudDtcbiAgY29sczogbnVtYmVyO1xuICByb3dzOiBudW1iZXI7XG4gIHRzaXplOiBudW1iZXI7XG4gIHRpbGVzOiBBcnJheTxhbnk+O1xuICBcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb2xzID0gMDtcbiAgICB0aGlzLnJvd3MgPSAwO1xuICAgIHRoaXMudHNpemUgPSAwO1xuICAgIHRoaXMudGlsZXMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHRpbGUgdmFsdWUgbG9jYXRlZCBieSB0aGUgY29sdW1uIGFuZCByb3cgKHgseSkgY29vcmRpbmF0ZXMuXG4gICAqIFRoaXMgaXMgdHJpdmlhbCB3aXRoIGEgMkQgYXJyYXksIGJ1dCB0aGlzIG1ldGhvZCBhbGxvd3MgdXMgdG8gdXNlIGEgMURcbiAgICogYXJyYXkgaW5zdGVhZC5cbiAgICpcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSB4ICAgVGhlIHgtYXhpcyBwb3NpdGlvbiBvZiB0aGUgcmVxdWVzdGVkIHRpbGUuXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0geSAgIFRoZSB5LWF4aXMgcG9zaXRpb24gb2YgdGhlIHJlcXVlc3RlZCB0aWxlLlxuICAgKi9cbiAgZ2V0VGlsZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5jb2xzID09PSAwXG4gICAgICB8fCB0aGlzLnJvd3MgPT09IDBcbiAgICAgIHx8IHRoaXMudHNpemUgPT09IDBcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hcCBzaXplIG5lZWRzIHRvIGhhdmUgcHJvcGVyIGRpbWVuc2lvbnMuXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRpbGVzW3kgKiB0aGlzLmNvbHMgKyB4XTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWFwQmFzZSB9IGZyb20gXCIuL01hcEJhc2VcIjtcblxuZXhwb3J0IGNsYXNzIE92ZXJ3b3JsZCBleHRlbmRzIE1hcEJhc2Uge1xuICBTTTogSFRNTEltYWdlRWxlbWVudDtcbiAgdGlsZXM6IEFycmF5PGFueT47XG4gIGxheWVyczogQXJyYXk8YW55PjtcbiAgY29sczogbnVtYmVyO1xuICByb3dzOiBudW1iZXI7XG4gIHRzaXplOiBudW1iZXI7XG4gIFxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNwcml0ZW1hcCB0byBiZSB1c2VkLlxuICAgICAqIEB2YXIge0hUTUxJbWFnZUVsZW1lbnR9XG4gICAgICovXG4gICAgdGhpcy5TTSA9IHdpbmRvdy5GX0xPQURFUi5nZXRJbWFnZSgnVEVTVE5VTUJFUkVEJyk7XG5cbiAgICB0aGlzLmNvbHMgPSAyMDtcbiAgICB0aGlzLnJvd3MgPSAxNTtcbiAgICB0aGlzLnRzaXplID0gMzAwO1xuICAgIHRoaXMudGlsZXMgPSBbXG4gICAgICAgIDEsICAyLCAgMywgIDQsICA1LCAgNiwgIDcsICA4LCAgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLFxuICAgICAgIDIxLCAgMiwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSxcbiAgICAgICAgOCwgIDgsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsXG4gICAgICAgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLFxuICAgICAgICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCxcbiAgICAgICAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICA1LCAgNSwgIDUsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsXG4gICAgICAgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgNSwgIDAsICA1LCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLFxuICAgICAgICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDUsICA1LCAgNSwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCxcbiAgICAgICAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsXG4gICAgICAgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLFxuICAgICAgICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCxcbiAgICAgICAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsXG4gICAgICAgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLFxuICAgICAgICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCxcbiAgICAgICAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgMTAsXG4gICAgXTtcbiAgICB0aGlzLmxheWVycyA9IFtcbiAgICAgIFtcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgIF0sIFtcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgICAgMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLFxuICAgICAgICAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsXG4gICAgICAgIDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxcbiAgICAgIF1cbiAgICBdXG4gIH1cblxufVxuIiwiZXhwb3J0IGNsYXNzIEFzc2V0TG9hZGVyIHtcbiAgcHJpdmF0ZSBfYXNzZXRMaXN0OiBBcnJheTxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2Fzc2V0TGlzdCA9IFtdO1xuICB9XG5cbiAgcHVibGljIGluaXRBc3NldHMoKTogQXJyYXk8YW55PiB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMubG9hZEltYWdlKFwidGVzdFRpbGVzZXRcIiwgXCIuL0RBVC8xYml0dGVzdC5wbmdcIiksXG4gICAgICB0aGlzLmxvYWRJbWFnZShcInRlc3RUaWxlc2V0MlwiLCBcIi4vREFUL3BzeWNoaWMtc3dhbXAucG5nXCIpLFxuICAgICAgdGhpcy5sb2FkSW1hZ2UoXCJURVNUT1JJR1wiLCBcIi4vREFUL2xvdy1yZXMtc3ByaXRlc2hlZXQucG5nXCIpLFxuICAgICAgdGhpcy5sb2FkSW1hZ2UoXCJURVNUTlVNQkVSRURcIiwgXCIuL0RBVC9waXhlbF9hcnRfdGlsZXNldF90ZXN0LnBuZ1wiKSxcbiAgICBdO1xuICB9XG5cbiAgcHVibGljIGxvYWRJbWFnZShrZXk6IHN0cmluZywgc3JjOiBzdHJpbmcpIHtcbiAgICBsZXQgaW1nID0gbmV3IEltYWdlKCk7XG5cbiAgICBsZXQgZCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2Fzc2V0TGlzdFtrZXldID0gaW1nO1xuICAgICAgICByZXNvbHZlKGltZyk7XG4gICAgICB9LmJpbmQodGhpcyk7XG5cbiAgICAgIGltZy5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZWplY3QoJ0NvdWxkIG5vdCBsb2FkIGltYWdlOiAnICsgc3JjKTtcbiAgICAgIH07XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgXG4gICAgaW1nLnNyYyA9IHNyYztcbiAgXG4gICAgcmV0dXJuIGQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0SW1hZ2Uoa2V5OiBzdHJpbmcpOiBIVE1MSW1hZ2VFbGVtZW50IHtcbiAgICByZXR1cm4gKGtleSBpbiB0aGlzLl9hc3NldExpc3QpID8gdGhpcy5fYXNzZXRMaXN0W2tleV0gOiBudWxsO1xuICB9O1xufSIsImltcG9ydCB7IEdhbWVBY3RvciB9IGZyb20gXCIuLi9HYW1lT2JqZWN0XCI7XG5cbi8qKlxuICogVGhlIENvbW1hbmQgY2xhc3MuXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbW1hbmQge1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgY29tbWFuZC5cbiAgICpcbiAgICogQHBhcmFtIGFjdG9yIFRoZSBHYW1lQWN0b3IgdG8gY29tbWFuZC5cbiAgICogQHBhcmFtIGRlbHRhIFRoZSBnYW1lJ3MgZGVsdGEgYmV0d2VlbiBmcmFtZXMuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZXhlY3V0ZShhY3RvcjogR2FtZUFjdG9yLCBkZWx0YTogbnVtYmVyKTogdm9pZDtcbn1cbiIsImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi9Db21tYW5kXCI7XG5pbXBvcnQgeyBHYW1lQWN0b3IgfSBmcm9tIFwiLi4vR2FtZU9iamVjdFwiO1xuXG4vKipcbiAqIFRoZSBNb3ZlRWFzdENvbW1hbmQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb3ZlRWFzdENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGNvbW1hbmQuXG4gICAqXG4gICAqIEBwYXJhbSBhY3RvciBUaGUgR2FtZUFjdG9yIHRvIGNvbW1hbmQuXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgZ2FtZSdzIGRlbHRhIGJldHdlZW4gZnJhbWVzLlxuICAgKi9cbiAgcHVibGljIGV4ZWN1dGUoYWN0b3I6IEdhbWVBY3RvciwgZGVsdGE6IG51bWJlcik6IHZvaWQge1xuICAgIGFjdG9yLm1vdmVFKGRlbHRhKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCIuL0NvbW1hbmRcIjtcbmltcG9ydCB7IEdhbWVBY3RvciB9IGZyb20gXCIuLi9HYW1lT2JqZWN0XCI7XG5cbi8qKlxuICogVGhlIE1vdmVOb3J0aENvbW1hbmQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb3ZlTm9ydGhDb21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBjb21tYW5kLlxuICAgKlxuICAgKiBAcGFyYW0gYWN0b3IgVGhlIEdhbWVBY3RvciB0byBjb21tYW5kLlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIGdhbWUncyBkZWx0YSBiZXR3ZWVuIGZyYW1lcy5cbiAgICovXG4gIHB1YmxpYyBleGVjdXRlKGFjdG9yOiBHYW1lQWN0b3IsIGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICBhY3Rvci5tb3ZlTihkZWx0YSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi9Db21tYW5kXCI7XG5pbXBvcnQgeyBHYW1lQWN0b3IgfSBmcm9tIFwiLi4vR2FtZU9iamVjdFwiO1xuXG4vKipcbiAqIFRoZSBNb3ZlU291dGhDb21tYW5kIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgTW92ZVNvdXRoQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgY29tbWFuZC5cbiAgICpcbiAgICogQHBhcmFtIGFjdG9yIFRoZSBHYW1lQWN0b3IgdG8gY29tbWFuZC5cbiAgICogQHBhcmFtIGRlbHRhIFRoZSBnYW1lJ3MgZGVsdGEgYmV0d2VlbiBmcmFtZXMuXG4gICAqL1xuICBwdWJsaWMgZXhlY3V0ZShhY3RvcjogR2FtZUFjdG9yLCBkZWx0YTogbnVtYmVyKTogdm9pZCB7XG4gICAgYWN0b3IubW92ZVMoZGVsdGEpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcIi4vQ29tbWFuZFwiO1xuaW1wb3J0IHsgR2FtZUFjdG9yIH0gZnJvbSBcIi4uL0dhbWVPYmplY3RcIjtcblxuLyoqXG4gKiBUaGUgTW92ZVdlc3RDb21tYW5kIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgTW92ZVdlc3RDb21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBjb21tYW5kLlxuICAgKlxuICAgKiBAcGFyYW0gYWN0b3IgVGhlIEdhbWVBY3RvciB0byBjb21tYW5kLlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIGdhbWUncyBkZWx0YSBiZXR3ZWVuIGZyYW1lcy5cbiAgICovXG4gIHB1YmxpYyBleGVjdXRlKGFjdG9yOiBHYW1lQWN0b3IsIGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICBhY3Rvci5tb3ZlVyhkZWx0YSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi9Db21tYW5kXCI7XG5cbi8qKlxuICogVGhlIE51bGxDb21tYW5kIGNsYXNzLlxuICogVGhpcyBjbGFzcyBpcyBzcGVjaWFsIGluIHRoYXQgaXQgaW50ZW50aW9uYWxseSBkb2Vzbid0IGV4ZWN1dGUgYW55dGhpbmcsIGluXG4gKiBzbyBpZiBhIHVzZXIgZG9lc24ndCBoYXZlIGEgbWFwcGVkIGJ1dHRvbiwgd2UgZG9uJ3QgaGF2ZSB0byBjaGVjayBmbyBgbnVsbGAuXG4gKi9cbmV4cG9ydCBjbGFzcyBOdWxsQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgY29tbWFuZC5cbiAgICovXG4gIHB1YmxpYyBleGVjdXRlKCk6IHZvaWQge31cbn1cbiIsIi8qKlxuICogQGZpbGUgVGhlIENvbW1hbmQgQmFycmVsLiBSZS1leHBvcnRzIENvbW1hbmQgZmlsZXMgZm9yIGVhc2llciBpbXBvcnRcbiAqIGVsc2V3aGVyZS5cbiAqIEBzZWUgQGxpbmsgaHR0cHM6Ly9iYXNhcmF0LmdpdGJvb2tzLmlvL3R5cGVzY3JpcHQvZG9jcy90aXBzL2JhcnJlbC5odG1sXG4gKi9cblxuLyoqXG4gKiBUaGUgYmFzZSBjb21tYW5kIGNsYXNzLlxuICovXG5leHBvcnQgKiBmcm9tICcuL0NvbW1hbmQnO1xuXG5leHBvcnQgKiBmcm9tICcuL051bGxDb21tYW5kJztcblxuZXhwb3J0ICogZnJvbSAnLi9Nb3ZlTm9ydGhDb21tYW5kJztcblxuZXhwb3J0ICogZnJvbSAnLi9Nb3ZlU291dGhDb21tYW5kJztcblxuZXhwb3J0ICogZnJvbSAnLi9Nb3ZlRWFzdENvbW1hbmQnO1xuXG5leHBvcnQgKiBmcm9tICcuL01vdmVXZXN0Q29tbWFuZCc7XG5cbiIsIi8qKlxuICogVGhlIENvbXBvbmVudCBpbnRlcmZhY2UuXG4gKi9cbmludGVyZmFjZSBJQ29tcG9uZW50IHt9XG5cbi8qKlxuICogVGhlIENvbXBvbmVudCBjbGFzc1xuICogQGFic3RyYWN0XG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21wb25lbnQge31cbiIsIi8qKlxuICogVGhlIEV2ZW50Q29tcG9uZW50IGludGVyZmFjZS5cbiAqL1xuIGludGVyZmFjZSBJRXZlbnRDb21wb25lbnQge1xuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBFUzYgRXZlbnRzIG9yIEN1c3RvbUV2ZW50cyB0aGF0IGNhbiBiZSBlbWl0dGVkLlxuICAgKi9cbiAgYXR0YWNoZWRFdmVudHM6IEV2ZW50Q29udGFpbmVyO1xuXG4gIC8qKlxuICAgKiBBZGRzIERPTSBFdmVudHMgdG8gdGhpcyBjb21wb25lbnQgdmlhIGFuIGFycmF5IG9mIGV2ZW50cy5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50cyBUaGUgYXJyYXkgb2YgZXZlbnRzIHRvIGFkZC5cbiAgICovXG4gIGF0dGFjaE11bHRpcGxlKGV2ZW50TGlzdDogQXJyYXk8RXZlbnR8Q3VzdG9tRXZlbnQ+KTogdm9pZDtcblxuICAvKipcbiAgICogQXR0YWNoZXMgYSBzaW5nbGUgZXZlbnQgdG8gdGhpcyBjb21wb25lbnQuIEF0dGFjaGVkIGNvbXBvbmVudHMgY2FuIGJlXG4gICAqIGVtaXR0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudCBBbiBgRXZlbnRgIG9yIGBDdXN0b21FdmVudGAgdGhhdCB0aGlzIEV2ZW50Q29tcG9uZW50IGtub3dzXG4gICAqIGFib3V0LlxuICAgKi9cbiAgYXR0YWNoKGV2ZW50OiBFdmVudHxDdXN0b21FdmVudCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFuIGV2ZW50IHZpYSB0aGUgYGdhbWUtcGFuZWAgRE9NIGVsZW1lbnQuIFVzZXMgdGhlIHN0cmluZyBuYW1lIG9mIHRoZVxuICAgKiBldmVudCB0byBsb29rdXAgaWYgaXQncyBpbiB0aGUgYXR0YWNoZWRFdmVudCBtZW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudE5hbWUgVGhlIGV2ZW50IHRvIGVtaXQuXG4gICAqL1xuICBlbWl0KGV2ZW50TmFtZTogc3RyaW5nKTogdm9pZDtcbn1cblxuLyoqXG4gKiBUaGUgRXZlbnRDb21wb25lbnQgY2xhc3MuXG4gKiBAaW1wbGVtZW50cyBbW0lFdmVudENvbXBvbmVudF1dXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudENvbXBvbmVudCBpbXBsZW1lbnRzIElFdmVudENvbXBvbmVudCB7XG5cbiAgLyoqXG4gICAqIEB2YXIgYXR0YWNoZWRFdmVudHMgVGhlIGxpc3Qgb2YgZXZlbnRzIHRoYXQgY2FuIGJlIGVtaXR0ZWQuXG4gICAqL1xuICBwdWJsaWMgYXR0YWNoZWRFdmVudHM6IEV2ZW50Q29udGFpbmVyO1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGRlY2xhcmUgdGhpcyBhcyBhbiBvYmplY3Qgb3RoZXJ3aXNlIHdlIGdldCBhIHJlZmVyZW5jZSBlcnJvclxuICAgIC8vIHdoZW4gd2UgdHJ5IGFuZCBhc3NpZ24gZXZlbnRzIHRvIGl0IGluIHRoZSBgYXR0YWNoYCBhbmQgYGF0dGFjaE11bHRpcGxlYFxuICAgIC8vIG1ldGhvZHMuXG4gICAgdGhpcy5hdHRhY2hlZEV2ZW50cyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGEgc2luZ2xlIGV2ZW50IHRvIHRoaXMgY29tcG9uZW50LiBBdHRhY2hlZCBjb21wb25lbnRzIGNhbiBiZVxuICAgKiBlbWl0dGVkLlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgQW4gYEV2ZW50YCBvciBgQ3VzdG9tRXZlbnRgIHRoYXQgdGhpcyBFdmVudENvbXBvbmVudCBrbm93c1xuICAgKiBhYm91dC5cbiAgICovXG4gIHB1YmxpYyBhdHRhY2goZXZlbnQ6IEV2ZW50fEN1c3RvbUV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5hdHRhY2hlZEV2ZW50c1tldmVudC50eXBlXSA9IGV2ZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgRE9NIEV2ZW50cyB0byB0aGlzIGNvbXBvbmVudCB2aWEgYW4gYXJyYXkgb2YgZXZlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnRzIFRoZSBhcnJheSBvZiBldmVudHMgdG8gYWRkLlxuICAgKi9cbiAgcHVibGljIGF0dGFjaE11bHRpcGxlKGV2ZW50TGlzdDogQXJyYXk8RXZlbnR8Q3VzdG9tRXZlbnQ+KTogdm9pZCB7XG4gICAgZm9yIChsZXQgZXZlbnQgb2YgZXZlbnRMaXN0KSB7XG4gICAgICB0aGlzLmF0dGFjaChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFuIGV2ZW50IHZpYSB0aGUgYGdhbWUtcGFuZWAgRE9NIGVsZW1lbnQuIFVzZXMgdGhlIHN0cmluZyBuYW1lIG9mIHRoZVxuICAgKiBldmVudCB0byBsb29rdXAgaWYgaXQncyBpbiB0aGUgYXR0YWNoZWRFdmVudCBtZW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudE5hbWUgVGhlIGV2ZW50IHRvIGVtaXQuXG4gICAqL1xuICBwdWJsaWMgZW1pdChldmVudE5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLXBhbmUnKVxuICAgICAgLmRpc3BhdGNoRXZlbnQodGhpcy5hdHRhY2hlZEV2ZW50c1tldmVudE5hbWVdKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi4vR2FtZU9iamVjdC9HYW1lT2JqZWN0JztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4vQ29tcG9uZW50JztcblxuLyoqXG4gKiBUaGUgTGlmZWZvcmNlIGNvbXBvbmVudC4gQWRkcyBoZWFsdGggdG8gYSBHYW1lT2JqZWN0LiBBZGRzIGxpZmUsIGhlYWx0aFxuICogcmVnZW5lcmF0aW9uLCBhbmQgZGVhdGguXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgcmVxdWlyZWQgZm9yIGVudGl0aWVzIHRvIGJlIGFsaXZlIG9yIGRlYWQsIGFzIHdlbGwgYXMgdGFrZVxuICogZGFtYWdlLlxuICpcbiAqIEBleHRlbmRzIFtbQ29tcG9uZW50XV1cbiAqL1xuZXhwb3J0IGNsYXNzIExpZmVmb3JjZUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IEhQIG9mIHRoZSBHYW1lT2JqZWN0LlxuICAgKi9cbiAgcHJpdmF0ZSBjdXJyZW50SFA6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gSFAgb2YgdGhlIEdhbWVPYmplY3QuXG4gICAqL1xuICBwcml2YXRlIG1heEhQOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGlzIGludGVuZGVkIHRvIGJlIHJ1biBvbmNlIHBlciBmcmFtZS5cbiAgICpcbiAgICogQHBhcmFtIEdPIFRoZSBHYW1lT2JqZWN0IHRoaXMgY29tcG9uZW50IGJlbG9uZ3MgdG8uXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKEdPOiBHYW1lT2JqZWN0KTogdm9pZCB7fVxuXG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi9Db21wb25lbnRcIjtcbmltcG9ydCB7IEdhbWVBY3RvciB9IGZyb20gXCIuLi9HYW1lT2JqZWN0XCI7XG5cbi8qKlxuICogVGhlIE1vdmVtZW50IGNvbXBvbmVudC4gQWRkcyBtb3ZlbWVudCB0byBhIEdhbWVPYmplY3QuXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgcmVxdWlyZWQgZm9yIGVudGl0aWVzIHRvIGJlIGFibGUgdG8gbW92ZSBhcm91bmQgdGhlIHdvcmxkLlxuICpcbiAqIEBleHRlbmRzIFtbQ29tcG9uZW50XV1cbiAqL1xuZXhwb3J0IGNsYXNzIE1vdmVtZW50Q29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAvKipcbiAgICogVGhlIHNwZWVkIGF0IHdoaWNoIHRoZSBHYW1lT2JqZWN0IGNhbiBtb3ZlLlxuICAgKi9cbiAgcHVibGljIHNwZWVkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnNwZWVkID0gMTAwO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdGhlIEFjdG9yIG5vcnRoLlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIGdhbWUncyBkZWx0YSBiZXR3ZWVuIGZyYW1lcy5cbiAgICovXG4gICBwdWJsaWMgbW92ZU4oYWN0b3I6IEdhbWVBY3RvciwgZGVsdGE6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIERlY3JlbWVudGluZyB7eX0gbWFrZXMgdGhlIGFjdG9yIG1vdmUgc291dGgsIHNpbmNlIHdlJ3JlIGRlYWxpbmcgd2l0aCBhXG4gICAgLy8gMkQgYXJyYXkgYW5kIG5vdCBhbiBhY3R1YWwgbWF0aGVtYXRpY2FsIGdyaWQgcGxhbmUuXG4gICAgYWN0b3IucG9zaXRpb24ueSAtPSB0aGlzLnNwZWVkICogZGVsdGE7XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0aGUgQWN0b3Igc291dGguXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgZ2FtZSdzIGRlbHRhIGJldHdlZW4gZnJhbWVzLlxuICAgKi9cbiAgcHVibGljIG1vdmVTKGFjdG9yOiBHYW1lQWN0b3IsIGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBJbmNyZWFzaW5nIHt5fSBtYWtlcyB0aGUgYWN0b3IgbW92ZSBzb3V0aCwgc2luY2Ugd2UncmUgZGVhbGluZyB3aXRoIGEgMkRcbiAgICAvLyBhcnJheSBhbmQgbm90IGFuIGFjdHVhbCBtYXRoZW1hdGljYWwgZ3JpZCBwbGFuZS5cbiAgICBhY3Rvci5wb3NpdGlvbi55ICs9IHRoaXMuc3BlZWQgKiBkZWx0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlIHRoZSBBY3RvciBlYXN0LlxuICAgKlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIGdhbWUncyBkZWx0YSBiZXR3ZWVuIGZyYW1lcy5cbiAgICovXG4gIHB1YmxpYyBtb3ZlRShhY3RvcjogR2FtZUFjdG9yLCBkZWx0YTogbnVtYmVyKTogdm9pZCB7XG4gICAgYWN0b3IucG9zaXRpb24ueCArPSB0aGlzLnNwZWVkICogZGVsdGE7XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0aGUgQWN0b3Igd2VzdC5cbiAgICpcbiAgICogQHBhcmFtIGRlbHRhIFRoZSBnYW1lJ3MgZGVsdGEgYmV0d2VlbiBmcmFtZXMuXG4gICAqL1xuICBwdWJsaWMgbW92ZVcoYWN0b3I6IEdhbWVBY3RvciwgZGVsdGE6IG51bWJlcik6IHZvaWQge1xuICAgIGFjdG9yLnBvc2l0aW9uLnggLT0gdGhpcy5zcGVlZCAqIGRlbHRhO1xuICB9XG5cbn1cbiIsIi8qKlxuICogQGZpbGUgVGhlIENvbXBvbmVudCBCYXJyZWwuIFJlLWV4cG9ydHMgQ29tcG9uZW50IGZpbGVzIGZvciBlYXNpZXIgaW1wb3J0XG4gKiBlbHNld2hlcmUuXG4gKiBAc2VlIEBsaW5rIGh0dHBzOi8vYmFzYXJhdC5naXRib29rcy5pby90eXBlc2NyaXB0L2RvY3MvdGlwcy9iYXJyZWwuaHRtbFxuICovXG5cbi8qKlxuICogUHJvZ2VuaXRvciBjbGFzc2VzIGZvciBhbGwgQ29tcG9uZW50IGNsYXNzZXMgaW4gdGhlIGdhbWUuXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vQ29tcG9uZW50JztcblxuLyoqXG4gKiBUaGUgRXZlbnQgY29tcG9uZW50LiBBbGxvd3MgYW4gZW50aXkgdG8gZW1pdCBhbmQvb3IgbGlzdGVuIGZvciBldmVudHMuXG4gKi9cbiBleHBvcnQgKiBmcm9tICcuL0V2ZW50Q29tcG9uZW50JztcblxuLyoqXG4gKiBUaGUgTGlmZWZvcmNlIGNvbXBvbmVudC4gQWRkcyBoZWFsdGggYW5kIGFsbCB0aGF0IGNvbWVzIHdpdGggaXQgd2hlbiBhdHRhY2hlZFxuICogdG8gYW4gZW50aXR5LlxuICovXG5leHBvcnQgKiBmcm9tICcuL0xpZmVmb3JjZUNvbXBvbmVudCc7XG5cbi8qKlxuICogVGhlIE1vdmVtZW50IGNvbXBvbmVudC4gQWRkcyBtb3ZlbWVudCB0byBhIEdhbWVPYmplY3QuXG4gKi9cbiBleHBvcnQgKiBmcm9tICcuL01vdmVtZW50Q29tcG9uZW50JztcbiIsImltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tICcuLi9HYW1lT2JqZWN0JztcblxuLyoqXG4gKiBUaGUgUGxheWVyRGVhdGhFdmVudCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXllckRlYXRoRXZlbnQge1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIG5hdGl2ZSBFUzYgQ3VzdG9tRXZlbnQuIFtbQ3VzdG9tRXZlbnRdXSBhbGxvd3MgdGhlIGF0dGFjaG1lbnRcbiAgICogb2YgZGF0YSB2aWEgdGhlIGBDdXN0b21FdmVudEluaXRgIGRpY3Rpb25hcnkuXG4gICAqXG4gICAqIEBwYXJhbSBwbGF5ZXIgVGhlIHBsYXllciBHYW1lT2JqZWN0LlxuICAgKlxuICAgKiBAZW1pdHMgYHBsYXllcl9kaWVkYFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUocGxheWVyOiBHYW1lT2JqZWN0KTogQ3VzdG9tRXZlbnQge1xuXG4gICAgbGV0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdwbGF5ZXJfZGllZCcsIHtcbiAgICAgIGRldGFpbDoge1xuICAgICAgICAnZ29faWQnOiBwbGF5ZXIuZ2V0SWQoKSxcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBldmVudDtcbiAgfVxufVxuIiwiLyoqXG4gKiBAZmlsZSBUaGUgRXZlbnQgQmFycmVsLiBSZS1leHBvcnRzIEV2ZW50IGZpbGVzIGZvciBlYXNpZXIgaW1wb3J0IGVsc2V3aGVyZS5cbiAqIEBzZWUgQGxpbmsgaHR0cHM6Ly9iYXNhcmF0LmdpdGJvb2tzLmlvL3R5cGVzY3JpcHQvZG9jcy90aXBzL2JhcnJlbC5odG1sXG4gKi9cblxuLyoqXG4gKiBQcm9nZW5pdG9yIGNsYXNzZXMgZm9yIGFsbCBlbnRpdGllcyBpbiB0aGUgZ2FtZS5cbiAqL1xuIGV4cG9ydCAqIGZyb20gJy4vUGxheWVyRGVhdGhFdmVudCc7XG4iLCJpbXBvcnQgeyBJbnB1dEhhbmRsZXIgfSBmcm9tIFwiLi9JbnB1dC9JbnB1dEhhbmRsZXJcIjtcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gXCIuL1JlbmRlci9DYW1lcmEvQ2FtZXJhXCI7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gXCIuL1JlbmRlci9SZW5kZXJlclwiO1xuXG4vLyBQbGF5ZXJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4vR2FtZU9iamVjdCc7XG5cbi8vIEZhY3Rvcmllc1xuLy8gVE9ETzogQWN0b3IgZmFjdG9yaWVzIHNob3VsZCBiZSBsb2FkZWQgcGVyIFNjZW5lLCBvbmNlIHRoZSBzY2VuZVxuLy8gZnVuY3Rpb25hbGl0eSBpcyBjcmVhdGVkIVxuaW1wb3J0IHtcbiAgT3JkaW5hcnlGb2xrRmFjdG9yeVxufSBmcm9tICcuL0dhbWVPYmplY3QnO1xuXG4vLyBGYWN0b3JpZXNcblxuLyoqXG4gKiBUaGUgR2FtZSBzdXBlcmNsYXNzLiBPcGVyYXRpb25zIHRvIGFjdCB1cG9uIHRoZSBtYWluIGdhbWUgdGhyZWFkIGFyZSBmb3VuZFxuICogaGVyZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEZpZW5kR2FtZSB7XG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCBoYW5kbGVyIHRoYXQgYWNjZXB0cyBwbGF5ZXIgaW5wdXQuXG4gICAqL1xuICBwdWJsaWMgSW5wdXRIYW5kbGVyOiBJbnB1dEhhbmRsZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpbnN0YW5jZSBvZiB0aGUgUGxheWVyJ3MgY2hhcmFjdGVyLlxuICAgKi9cbiAgcHVibGljIFBsYXllcjogUGxheWVyO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVuZGVyZXIgcmVzcG9uc2libGUgZm9yIGRyYXdpbmcgdG8gdGhlIHNjcmVlbi5cbiAgICovXG4gIHB1YmxpYyBSZW5kZXJlcjogUmVuZGVyZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBtYWluIGNhbWVyYVxuICAgKi9cbiAgcHVibGljIENhbWVyYTogQ2FtZXJhO1xuXG4gIC8qKlxuICAgKiBUaGUgY2FudmFzIGluIHRoZSBET00uIFdoYXQgdGhlIGdhbWUgaXMgcmVuZGVyZWQgb24uXG4gICAqL1xuICBwdWJsaWMgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBjdXJyZW50bHktYWN0aXZlIGdhbWUgb2JqZWN0cy5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHB1YmxpYyBnYW1lT2JqZWN0Q291bnQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgYWN0aXZlIGdhbWUgb2JqZWN0cy4gRXZlcnkgZ2FtZSBvYmplY3QgaW4gdGhpcyBsaXN0IHdpbGwgaGF2ZVxuICAgKiB0aGVpciBzdGF0ZSB1cGRhdGVkIGV2ZXJ5IGZyYW1lLCBpZiBwb3NzaWJsZS5cbiAgICovXG4gIHB1YmxpYyBnYW1lT2JqZWN0czogQXJyYXk8YW55PjtcblxuICAvLyBUT0RPOiBUaGlzIGlzIGEgdGVzdCEgQWN0b3IgZmFjdG9yaWVzIHNob3VsZCBiZSBsb2FkZWQgcGVyIFNjZW5lLCBvbmNlIHRoZVxuICAvLyBzY2VuZSBmdW5jdGlvbmFsaXR5IGlzIGNyZWF0ZWQhXG4gIHB1YmxpYyBvcmRpbmFyeUZvbGs6IE9yZGluYXJ5Rm9sa0ZhY3Rvcnk7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXggYW1vdW50IG9mIGFjdGl2ZSBnYW1lIG9iamVjdHMgdGhhdCBjYW4gYmUgcHJlc2VudCBpbiB0aGUgZ2FtZS5cbiAgICogVE9ETzogRmlndXJlIG91dCB3aGF0IGhhcHBlbnMgaWYgdGhpcyBsaW1pdCBpcyByZWFjaGVkLlxuICAgKiBAaW50ZXJuYWwgVGhpcyBjb3VsZCBiZSBhbiBcImltcG9ydGFuY2Ugd2VpZ2h0XCIgd2hlcmUgbGVzcyBpbXBvcnRhbnQgZ2FtZVxuICAgKiBvYmplY3RzIGFyZSBwdXJnZWQuXG4gICAqL1xuICBwdWJsaWMgbWF4RW50aXRpZXM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIEhUTUwgd3JhcHBlciBmb3IgdGhlIGdhbWUuIEFzc3VtZSBldmVyeXRoaW5nIGluIHRoaXMgY29udGFpbmVyIGlzIHBhcnRcbiAgICogb2YgdGhlIGdhbWUuXG4gICAqL1xuICBwdWJsaWMgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcblxuICAvKipcbiAgICogSG93IGZyZXF1ZW50bHkgdGhlIGdhbWUgc3RhdGUgdXBkYXRlcywgaWRlYWxseS4gRGVmYXVsdHMgdG8gNjAgSHosIDE2LjZcbiAgICogZnJhbWVzLXBlci1zZWNvbmQuXG4gICAqL1xuICBwdWJsaWMgdGlja0xlbmd0aDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbW9zdCByZWNlbnRseSBlbGFwc2VkIHRpY2sgb2YgdGhlIGdhbWUgY2xvY2suXG4gICAqL1xuICBwdWJsaWMgbGFzdEZyYW1lVGltZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgcmV0dXJuZWQgZnJvbSBvdXIgbWFpbiBsb29wJ3MgbW9zdCByZWNlbnQgY2FsbCB0b1xuICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKS4gVGhlIHRva2VuIGNhbiB0aGVuIGJlIHVzZWQgd2hlbiB3ZSBjYWxsXG4gICAqIGNhbmNlbEFuaW1hdGlvbkZyYW1lKCkgdG8gc3RvcCB0aGUgbWFpbiBsb29wIGJ5IHRlbGxpbmcgdGhlIGJyb3dzZXIgdG9cbiAgICogY2FuY2VsIHRoZSByZXF1ZXN0IHRoYXQgY29ycmVzcG9uZHMgdG8gb3VyIHRva2VuLlxuICAgKi9cbiAgcHVibGljIHN0b3BUb2tlbjogbnVtYmVyfG51bGw7XG5cbiAgY29uc3RydWN0b3IoZ2FtZVBhbmVXaWR0aDogbnVtYmVyLCBnYW1lUGFuZUhlaWdodDogbnVtYmVyKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGdhbWUgcGFuZSBhbmQgY2FudmFzLlxuICAgICAqL1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5nZW5DYW52YXMoZ2FtZVBhbmVXaWR0aCwgZ2FtZVBhbmVIZWlnaHQpO1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaWVuZC1nYW1lXCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZSh0aGlzLmNhbnZhcywgdGhpcy5jb250YWluZXIuZmlyc3RDaGlsZCk7XG5cbiAgICAvLyBUT0RPOiBUaGlzIGlzIGEgdGVzdCB0byB0ZXN0IGV2ZW50IGVtaXNzaW9uLlxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLXBhbmUnKS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ3BsYXllcl9kaWVkJyxcbiAgICAgIChldmVudDogQ3VzdG9tRXZlbnQpID0+IHRoaXMucmVzcG9uZFRvR2FtZU9iamVjdENyZWF0aW9uKGV2ZW50KSxcbiAgICAgIGZhbHNlXG4gICAgKTtcblxuICAgIHRoaXMuc3RvcFRva2VuID0gbnVsbDtcblxuICAgIHRoaXMudGlja0xlbmd0aCA9IDYwO1xuXG4gICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gMDtcblxuICAgIHRoaXMubWF4RW50aXRpZXMgPSAxMDAwO1xuXG4gICAgdGhpcy5QbGF5ZXIgPSBuZXcgUGxheWVyKHt4OjEyNSx5OjEyNX0pO1xuXG4gICAgdGhpcy5SZW5kZXJlciA9IG5ldyBSZW5kZXJlcih0aGlzLmNhbnZhcyk7XG5cbiAgICB0aGlzLklucHV0SGFuZGxlciA9IG5ldyBJbnB1dEhhbmRsZXIoKTtcblxuICAgIHRoaXMuQ2FtZXJhID0gbmV3IENhbWVyYSgpO1xuXG4gICAgdGhpcy5nYW1lT2JqZWN0Q291bnQgPSAwO1xuXG4gICAgLy8gSW5zdGFudGlhdGUgQWN0b3IgZmFjdG9yaWVzIGhlcmUgYXMgYSB0ZXN0LiBXZSB3YW50IHRvIGluc3RhbnRpYXRlIHRoZVxuICAgIC8vIGZhY3Rvcnkgc28gdGhlIG1lbW9yeSBpcyBhbGxvY2F0ZWQgd2hlbiB0aGUgU2NlbmUgaXMgbG9hZGVkLlxuICAgIC8vIFRPRE86IEFjdG9yIGZhY3RvcmllcyBzaG91bGQgYmUgbG9hZGVkIHBlciBTY2VuZSwgb25jZSB0aGUgc2NlbmVcbiAgICAvLyBmdW5jdGlvbmFsaXR5IGlzIGNyZWF0ZWQhXG4gICAgdGhpcy5vcmRpbmFyeUZvbGsgPSBuZXcgT3JkaW5hcnlGb2xrRmFjdG9yeSgpO1xuXG4gICAgdGhpcy5nYW1lT2JqZWN0cyA9IFtcbiAgICAgIC8vIFRPRE8gVGhpcyBpcyBhIHRlc3QsIGRvIHNob3VsZCBiZSBlbXB0eSBvbiBpbml0LlxuICAgICAgdGhpcy5QbGF5ZXIsXG4gICAgICB0aGlzLm9yZGluYXJ5Rm9say5zcGF3bih7eDoyMDAseToxMDB9KSxcbiAgICBdO1xuXG4gICAgLy8gTGV0J3Mga2ljayBvZmYgdGhlIGdhbWUgbG9vcCFcbiAgICB0aGlzLm1haW4ocGVyZm9ybWFuY2Uubm93KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIG5ldyBjYW52YXMgRE9NIGNhbnZhcyBlbGVtZW50LiBUaGUgZ2FtZSB3aWxsIHJ1biBpbiB0aGlzXG4gICAqIGNhbnZhcy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHcgVGhlIHdpZHRoIG9mIHRoZSBjYW52YXMsIGluIHBpeGVscy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGggVGhlIGhlaWdodCBvZiB0aGUgY2FudmFzLCBpbiBwaXhlbHMuXG4gICAqL1xuICBwcml2YXRlIGdlbkNhbnZhcyh3OiBudW1iZXIsIGg6IG51bWJlcik6IEhUTUxDYW52YXNFbGVtZW50IHtcbiAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY2FudmFzLmlkID0gXCJnYW1lLXBhbmVcIjtcbiAgICBjYW52YXMud2lkdGggPSB3O1xuICAgIGNhbnZhcy5oZWlnaHQgPSBoO1xuICAgIGNhbnZhcy50YWJJbmRleCA9IDE7XG5cbiAgICByZXR1cm4gY2FudmFzO1xuICB9XG5cbiAgcHVibGljIHJlc3BvbmRUb0dhbWVPYmplY3RDcmVhdGlvbihldmVudDogQ3VzdG9tRXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZygnZXZlbnQuZGV0YWlsLmdvX2lkIDonLCBldmVudC5kZXRhaWwuZ29faWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGdhbWUgc3RhdGUgYXMgb2YgYSBnaXZlbiBwb2ludCBpbiB0aW1lLiBJdCBpcyB0aGUgYXV0aG9yaXR5XG4gICAqIGZvciBnYW1lIHN0YXRlLiBUaGUgZGVsdGEgc2hvdWxkIGJlIHVzZWQgaW4gY2FsY3VsYXRpb25zIHRvIG1ha2UgdGhlIGdhbWVcbiAgICogc2ltdWxhdGlvbiBmcmFtZXJhdGUgaW5kZXBlbmRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZmxvYXR9IGRlbHRhICBUaGUgZGlmZmVyZW5jZSBpbiB0aW1lIGJldHdlZW4gdGhpcyBmcmFtZSBhbmQgbGFzdFxuICAgKiBmcmFtZSwgaW4gc2Vjb25kcy5cbiAgICovXG4gIHByaXZhdGUgX3VwZGF0ZShkZWx0YTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gVE9ETyBSZW1vdmUgY2xvZy5cbiAgICAvLyBjb25zb2xlLmxvZygnZGVsdGEgOicsIGRlbHRhKTtcbiAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nYW1lT2JqZWN0Q291bnQ7IGkrKykge1xuICAgICAgdGhpcy5nYW1lT2JqZWN0c1tpXS51cGRhdGUoZGVsdGEpO1xuICAgIH1cblxuICAgIHRoaXMuZ2FtZU9iamVjdENvdW50ID0gdGhpcy5nYW1lT2JqZWN0cy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogUmVzcG9uc2libGUgZm9yIGRyYXdpbmcgdGhlIGN1cnJlbnQgZ2FtZSBzdGF0ZSB0byB0aGUgc2NyZWVuLlxuICAgKi9cbiAgcHJpdmF0ZSBfZHJhdygpOiB2b2lkIHtcblxuICAgIC8vIERyYXcgdGhlIHNjZW5lLlxuICAgIHRoaXMuUmVuZGVyZXIuZHJhdyh0aGlzLmdhbWVPYmplY3RDb3VudCwgdGhpcy5nYW1lT2JqZWN0cyk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgdGhlIG1haW4gZ2FtZSBsb29wLlxuICAgKi9cbiAgcHJpdmF0ZSBzdG9wTWFpbkxvb3AoKTogdm9pZCB7XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc3RvcFRva2VuKTtcbiAgICBjb25zb2xlLmxvZyhcIkdvb2RieWUuLi5cIik7XG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdHMgdG8gZ3JhY2VmdWxseSB0ZWFyIGRvd24gdGhlIGdhbWUuXG4gICAqL1xuICBwdWJsaWMgc2h1dGRvd25HYW1lKCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcE1haW5Mb29wKCk7XG4gIH1cblxuLyoqXG4gICogVGhlIG1haW4gZ2FtZSBsb29wLiBXZSB1c2UgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHRvIGJlIHRocmVhZC1zYWZlIGFuZCBub3RcbiAgKiBkb21pbmF0ZSB0aGUgYnJvd3NlciB3aGVuIHRoZSBwbGF5ZXIgYmx1cnMgZm9jdXMgb24gb3VyIHRhYi5cbiAgKlxuICAqIHJlbmRlcigpIGlzIHBhc3NlZCB0RnJhbWUgYmVjYXVzZSBpdCBpcyBhc3N1bWVkIHRoYXQgdGhlIHJlbmRlciBtZXRob2Qgd2lsbFxuICAqICAgICAgICAgIGNhbGN1bGF0ZSBob3cgbG9uZyBpdCBoYXMgYmVlbiBzaW5jZSB0aGUgbW9zdCByZWNlbnRseSBwYXNzZWRcbiAgKiAgICAgICAgICB1cGRhdGUgdGljayBmb3IgZXh0cmFwb2xhdGlvbiAocHVyZWx5IGNvc21ldGljIGZvciBmYXN0IGRldmljZXMpLlxuICAqICAgICAgICAgIEl0IGRyYXdzIHRoZSBzY2VuZS5cbiAgKlxuICAqIHVwZGF0ZSgpIGNhbGN1bGF0ZXMgdGhlIGdhbWUgc3RhdGUgYXMgb2YgYSBnaXZlbiBwb2ludCBpbiB0aW1lLlxuICAqXG4gICogaW5pdCgpICAgUGVyZm9ybXMgd2hhdGV2ZXIgdGFza3MgYXJlIG5lZWRlZCBiZWZvcmUgdGhlIG1haW4gbG9vcCBjYW4gcnVuLlxuICAqXG4gICpcbiAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IHRGcmFtZSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZVxuICAqIG5hdmlnYXRpb25TdGFydCAod2hlbiB0aGUgcHJldmlvdXMgZG9jdW1lbnQgaXMgdW5sb2FkZWQuXG4gICogd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgpIGFsd2F5cyBwcm92aWRlcyBhIERPTUhpZ2hSZXNUaW1lU3RhbXAgdG9cbiAgKiBjYWxsYmFja3MgYXMgYW4gYXJndW1lbnQgd2hlbiB0aGV5IGFyZSBleGVjdXRlZC5cbiAgKi9cbiAgcHVibGljIG1haW4odEZyYW1lOiBET01IaWdoUmVzVGltZVN0YW1wKTogdm9pZCB7XG4gICAgLy8gU3RvcmUgdGhlIElEIHJldHVybmVkIGZyb20gb3VyIG1haW4gbG9vcCdzIG1vc3QgcmVjZW50IGNhbGwgdG9cbiAgICAvLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKS5cbiAgICB0aGlzLnN0b3BUb2tlbiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5tYWluLmJpbmQodGhpcykpO1xuXG4gICAgLy8gRGVsdGEgc2hvdWxkIGJlIGluIHNlY29uZHMsIG5vdCBtcywgc28gd2UgZGl2aWRlIGJ5IDEwMDAuXG4gICAgbGV0IGRlbHRhID0gKHRGcmFtZSAtIHRoaXMubGFzdEZyYW1lVGltZSkgLyAxMDAwLjA7XG4gICAgLy8gS2VlcCB0cmFjayBvZiB3aGVuIHRoZSBsYXN0IGZyYW1lIGhhcHBlbmVkLlxuICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IHRGcmFtZTtcblxuICAgIHRoaXMuSW5wdXRIYW5kbGVyLmhhbmRsZUlucHV0KHRoaXMuUGxheWVyLCBkZWx0YSk7XG4gICAgdGhpcy5fdXBkYXRlKGRlbHRhKTtcbiAgICB0aGlzLl9kcmF3KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEdhbWVBY3RvciB9IGZyb20gXCIuLi9HYW1lQWN0b3JcIjtcblxuLyoqXG4gKiBUaGUgQWN0b3JGYWN0b3J5IGNsYXNzLiBVc2VkIGZvciBjb21tb24gYWN0b3JzIHN1Y2ggYXMgY29tbW9uIGVuZW1pZXMsXG4gKiB3aWxkbGlmZSwgZ2VuZXJpYyBOUENzLCBldGMuIEFsbG93cyB1cyB0byBpbXBsZW1lbnQgdGhlIFwiVHlwZSBPYmplY3RcIlxuICogcGF0dGVybi5cbiAqXG4gKiBUaGUgYmVuZWZpdCBoZXJlIGlzIHR3b2ZvbGQ6XG4gKiAxKSBXZSBjYW4gZGVmaW5lIHRoZSBBY3RvcidzIHByb3BlcnRpZXMgaW4gYW4gZXh0ZXJuYWwgZmlsZSwgc2F5LCBKU09OLCB0aGVuXG4gKiBjcmVhdGUgYSBuZXcgQWN0b3Igd2l0aCB0aG9zZSBwcm9wZXJ0aWVzIHdoZW4gYSBTY2VuZSBpcyBsb2FkZWQuXG4gKiAyKSBXZSBjYW4gY2hhbmdlIHRoZSB0eXBlIG9mIHRoZSBBY3RvciBvbiB0aGUgZmx5IHdpdGhvdXQgcmVjcmVhdGluZyBpdC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFjdG9yRmFjdG9yeSB7XG5cbiAgLyoqXG4gICAqIFRoZSBzdHJpbmcgdW5pcXVlIGxhYmVsIGZvciB0aGUgQWN0b3IgdHlwZS5cbiAgICovXG4gIHB1YmxpYyBsYWJlbDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYSBuZXcgTnBjIG9mIGEgc3BlY2lmaWMgdHlwZS5cbiAgICogRm9yIHJlZmVyZW5jZSwgY2hlY2sgb3V0IHRoZSBUeXBlIE9iamVjdCAoZmFjdG9yeSkgcGF0dGVybi5cbiAgICpcbiAgICogQHBhcmFtIHBvc2l0aW9uIFRoZSBzdGFydGluZyBwb3NpdGlvbiBvZiB0aGUgc3Bhd25lZCBBY3Rvci5cbiAgICpcbiAgICogQHJldHVybiBUaGUgc3Bhd25lZCBHYW1lQWN0b3IuXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc3Bhd24ocG9zaXRpb246IENvb3JkaW5hdGUpOiBHYW1lQWN0b3I7XG59XG4iLCJpbXBvcnQge1xuICBBY3RvckZhY3RvcnksXG4gIE9yZGluYXJ5Rm9sa1xufSBmcm9tICcuLi8uLi8uLi9HYW1lT2JqZWN0JztcblxuaW1wb3J0IHtcbiAgTGlmZWZvcmNlQ29tcG9uZW50LFxuICBNb3ZlbWVudENvbXBvbmVudFxufSBmcm9tIFwiLi4vLi4vLi4vQ29tcG9uZW50XCI7XG5cbi8qKlxuICogVGhlIE9yZGluYXJ5Rm9sa0ZhY3RvcnkgY2xhc3MuIFRoaXMgaXMgdXNlZCB0byBzcGF3biBub24tdW5pcXVlLFxuICogaHVtYW5vaWQtbGlrZSBHYW1lQWN0b3JzIGFrYSBcIkZvbGtzLlwiXG4gKi9cbmV4cG9ydCBjbGFzcyBPcmRpbmFyeUZvbGtGYWN0b3J5IGV4dGVuZHMgQWN0b3JGYWN0b3J5IHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMubGFiZWwgPSBcIm9yZGluYXJ5X2ZvbGtcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYSBuZXcgTnBjIG9mIHR5cGUgT3JkaW5hcnlGb2xrLlxuICAgKiBGb3IgcmVmZXJlbmNlLCBjaGVjayBvdXQgdGhlIFR5cGUgT2JqZWN0IChmYWN0b3J5KSBwYXR0ZXJuLlxuICAgKlxuICAgKiBAcGFyYW0gcG9zaXRpb24gVGhlIHN0YXJ0aW5nIHBvc2l0aW9uIG9mIHRoZSBzcGF3bmVkIEFjdG9yLlxuICAgKlxuICAgKiBAcmV0dXJuIFRoZSBzcGF3bmVkIEdhbWVBY3Rvci5cbiAgICovXG4gIHB1YmxpYyBzcGF3bihwb3NpdGlvbjogQ29vcmRpbmF0ZSk6IE9yZGluYXJ5Rm9sayB7XG4gICAgbGV0IG5wYyA9IG5ldyBPcmRpbmFyeUZvbGsoXG4gICAgICB0aGlzLFxuICAgICAgcG9zaXRpb24sXG4gICAgICBuZXcgTW92ZW1lbnRDb21wb25lbnQoKSxcbiAgICAgIG5ldyBMaWZlZm9yY2VDb21wb25lbnQoKVxuICAgICk7XG5cbiAgICByZXR1cm4gbnBjO1xuICB9XG59XG4iLCJpbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi4vLi4vR2FtZU9iamVjdCc7XG5cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIFtbR2FtZUFjdG9yXV0gY2xhc3MuXG4gKlxuICogQGludGVyZmFjZSBJR2FtZUFjdG9yXG4gKi9cbmludGVyZmFjZSBJR2FtZUFjdG9yIHtcblxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIG1lbWJlci4gU2lnbmlmaWVzIHRoZSBsb2NhdGlvbiBvZiB0aGUgb2YgdGhlIEdhbWVPYmplY3QuXG4gICAqL1xuICBwb3NpdGlvbjogQ29vcmRpbmF0ZTtcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc2lnbmF0dXJlIGZvciB0aGUgdXBkYXRlIG1ldGhvZCBmb3IgdGhlIEdhbWVBY3Rvci5cbiAgICpcbiAgICogQHBhcmFtIGRlbHRhIFRoZSB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiBmcmFtZXMuIFByb3ZpZGVkIGJ5IHRoZSBnYW1lJ3NcbiAgICogbWFpbiBnYW1lIGxvb3AuXG4gICAqIEBzZWUgRmllbmRHYW1lLm1haW4oKVxuICAgKi9cbiAgdXBkYXRlKGRlbHRhOiBudW1iZXIpOiB2b2lkO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIEdhbWVBY3RvciBjbGFzcy4gQWxsIEdhbWVPYmplY3RzIHRoYXQgY2FuIGluZmx1ZW5jZSB0aGluZ3MgaW4gdGhlXG4gKiBlbnZpcm9ubWVudCB3aWxsIGRlcml2ZSBmcm9tIHRoZSBHYW1lQWN0b3IgY2xhc3MuXG4gKiBAYWJzdHJhY3RcbiAqIEBleHRlbmRzIFtbR2FtZU9iamVjdF1dIFRoZSBHYW1lT2JqZWN0IGJhc2UgYWJzdHJhY3QgY2xhc3MuXG4gKiBAaW1wbGVtZW50cyBbW0lHYW1lQWN0b3JdXVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgR2FtZUFjdG9yIGV4dGVuZHMgR2FtZU9iamVjdCBpbXBsZW1lbnRzIElHYW1lQWN0b3Ige1xuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIEdhbWVPYmplY3QuXG4gICAqL1xuICBwdWJsaWMgcG9zaXRpb246IENvb3JkaW5hdGU7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0gcG9zaXRpb24gVGhlIHN0YXJ0aW5nIHBvc2l0aW9uIG9mIHRoZSBzcGF3bmVkIEFjdG9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocG9zaXRpb246IENvb3JkaW5hdGUpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB1cGRhdGUgbWV0aG9kIGZvciB0aGUgYWJzdHJhY3QgR2FtZUFjdG9yIGNsYXNzLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIGRlbHRhIFRoZSB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiBmcmFtZXMuIFByb3ZpZGVkIGJ5IHRoZSBnYW1lJ3NcbiAgICogbWFpbiBnYW1lIGxvb3AuXG4gICAqIEBzZWUgRmllbmRHYW1lLm1haW4oKVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHVwZGF0ZShkZWx0YTogbnVtYmVyKTogdm9pZDtcblxuICAvLyBUT0RPOiBNYWtlIGEgc3ViY2xhc3MgdGhhdCBoYXMgbW92ZW1lbnQuIE5vdCBhbGwgYWN0b3JzIHdpbGwsIEkgZG9udCB0aGluay5cbiAgcHVibGljIG1vdmVOKGRlbHRhOiBudW1iZXIpOiB2b2lkIHt9XG4gIHB1YmxpYyBtb3ZlUyhkZWx0YTogbnVtYmVyKTogdm9pZCB7fVxuICBwdWJsaWMgbW92ZUUoZGVsdGE6IG51bWJlcik6IHZvaWQge31cbiAgcHVibGljIG1vdmVXKGRlbHRhOiBudW1iZXIpOiB2b2lkIHt9XG59XG4iLCJpbXBvcnQgeyBHYW1lQWN0b3IgfSBmcm9tICcuL0dhbWVBY3Rvcic7XG5pbXBvcnQgeyBBY3RvckZhY3RvcnkgfSBmcm9tICcuLi8uLi9HYW1lT2JqZWN0JztcblxuLyoqXG4gKiBUaGUgTnBjIGNsYXNzLiBBbGwgbm9uLXBsYXllciBjaGFyYWN0ZXJzIGFyZSBOcGNzLCB1bmxpa2Ugc29tZSBnYW1lcyB3aGVyZVxuICogdGhlcmUgaXMgYSBgTW9uc3RlcmAgY2xhc3MgZm9yIGFsbCBob3N0aWxlIGFjdG9ycy5UaGUgcmVhc29uaW5nIGlzIHRoYXQgaW5cbiAqIEZpZW5kLCBhbnkgbm9uLXBsYXllciBjaGFyYWN0ZXIgY2FuIGJlIGEgZnJpZW5kIG9yIGZvZSwgZGVwZW5kaW5nIG9uIGhvdyB0aGVcbiAqIHBsYXllciBhY3RzLlxuICovXG5leHBvcnQgY2xhc3MgTnBjIGV4dGVuZHMgR2FtZUFjdG9yIHtcblxuICAvKipcbiAgICogVGhlIGFjdG9yJ3MgdHlwZS5cbiAgICovXG4gIHByb3RlY3RlZCBfdHlwZTogQWN0b3JGYWN0b3J5O1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIGFjdG9yVHlwZSBUaGUgQWN0b3IncyB0eXBlLlxuICAgKiBAcGFyYW0gcG9zaXRpb24gVGhlIHN0YXJ0aW5nIHBvc2l0aW9uIG9mIHRoZSBzcGF3bmVkIEFjdG9yLlxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKGFjdG9yVHlwZTogQWN0b3JGYWN0b3J5LCBwb3NpdGlvbjogQ29vcmRpbmF0ZSkge1xuICAgIHN1cGVyKHBvc2l0aW9uKTtcblxuICAgIHRoaXMuX3R5cGUgPSBhY3RvclR5cGU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHVwZGF0ZSBtZXRob2QgZm9yIHRoZSBOcGMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgdGltZSBkaWZmZXJlbmNlIGJldHdlZW4gZnJhbWVzLiBQcm92aWRlZCBieSB0aGUgZ2FtZSdzXG4gICAqIG1haW4gZ2FtZSBsb29wLlxuICAgKiBAc2VlIEZpZW5kR2FtZS5tYWluKClcbiAgICovXG4gIHB1YmxpYyB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQge31cblxufVxuIiwiaW1wb3J0IHtcbiAgQWN0b3JGYWN0b3J5LFxuICBOcGNcbn0gZnJvbSAnLi4vLi4vR2FtZU9iamVjdCc7XG5cbmltcG9ydCB7XG4gIE1vdmVtZW50Q29tcG9uZW50LFxuICBMaWZlZm9yY2VDb21wb25lbnRcbn0gZnJvbSAnLi4vLi4vQ29tcG9uZW50JztcblxuLyoqXG4gKiBUaGUgT3JkaW5hcnlGb2xrIGNsYXNzLiBPcmRpbmFyeSBGb2xrcyBhcmUgZ2VuZXJhbGx5IGJlbmlnbiBOUENzIHRvIHBvcHVsYXRlXG4gKiB0aGUgd29ybGQuXG4gKi9cbmV4cG9ydCBjbGFzcyBPcmRpbmFyeUZvbGsgZXh0ZW5kcyBOcGMge1xuXG4gIHByaXZhdGUgX2xpZmVmb3JjZUNvbXBvbmVudDogTGlmZWZvcmNlQ29tcG9uZW50O1xuICBwcml2YXRlIF9tb3ZlbWVudENvbXBvbmVudDogTW92ZW1lbnRDb21wb25lbnQ7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0gYWN0b3JUeXBlIFRoZSBBY3RvcidzIHR5cGUuXG4gICAqIEBwYXJhbSBwb3NpdGlvbiBUaGUgc3RhcnRpbmcgcG9zaXRpb24gb2YgdGhlIHNwYXduZWQgQWN0b3IuXG4gICAqIEBwYXJhbSBtYyBUaGUgbW92ZW1lbnQgY29tcG9uZW50LlxuICAgKiBAcGFyYW0gbGMgVGhlIGxpZmVmb3JjZSBjb21wb25lbnQuXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgYWN0b3JUeXBlOiBBY3RvckZhY3RvcnksXG4gICAgcG9zaXRpb246IENvb3JkaW5hdGUsXG4gICAgbWM6IE1vdmVtZW50Q29tcG9uZW50LFxuICAgIGxjOiBMaWZlZm9yY2VDb21wb25lbnRcbiAgKSB7XG4gICAgc3VwZXIoYWN0b3JUeXBlLCBwb3NpdGlvbik7XG5cbiAgICB0aGlzLl9tb3ZlbWVudENvbXBvbmVudCA9IG1jO1xuICAgIHRoaXMuX2xpZmVmb3JjZUNvbXBvbmVudCA9IGxjO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB1cGRhdGUgbWV0aG9kIGZvciB0aGUgTnBjIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIHRpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIGZyYW1lcy4gUHJvdmlkZWQgYnkgdGhlIGdhbWUnc1xuICAgKiBtYWluIGdhbWUgbG9vcC5cbiAgICogQHNlZSBGaWVuZEdhbWUubWFpbigpXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKGRlbHRhOiBudW1iZXIpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBOUEMgZW50aXR5LlxuICAgKiBUT0RPOiBUaGlzIHNob3VsZCBiZSBtb3ZlZCB0byB0aGUgUmVuZGVyIGNvbXBvbmVudCBvbmNlIGl0J3MgZG9uZS5cbiAgICpcbiAgICogQHBhcmFtIGN0eCBUaGUgY2FudmFzIGNvbnRleHQuXG4gICAqL1xuICBwdWJsaWMgZHJhdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgucmVjdCh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgMjAsIDIwKTtcbiAgICBjdHguZmlsbFN0eWxlID0gXCIjRkYwMDAwXCI7XG4gICAgY3R4LmZpbGwoKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgR2FtZUFjdG9yIH0gZnJvbSAnLi9HYW1lQWN0b3InO1xuaW1wb3J0IHtcbiAgRXZlbnRDb21wb25lbnQsXG4gIExpZmVmb3JjZUNvbXBvbmVudCxcbiAgTW92ZW1lbnRDb21wb25lbnRcbn0gZnJvbSAnLi4vLi4vQ29tcG9uZW50JztcblxuaW1wb3J0IHsgUGxheWVyRGVhdGhFdmVudCB9IGZyb20gJy4uLy4uL0V2ZW50JztcblxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgW1tQbGF5ZXJdXSBjbGFzcy5cbiAqXG4gKiBAaW50ZXJmYWNlIElQbGF5ZXJcbiAqL1xuaW50ZXJmYWNlIElQbGF5ZXIge1xuXG4gIC8qKlxuICAgKiBNb3ZlIHRoZSBQbGF5ZXIgbm9ydGguXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgZ2FtZSdzIGRlbHRhIGJldHdlZW4gZnJhbWVzLlxuICAgKi9cbiAgbW92ZU4oZGVsdGE6IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIE1vdmUgdGhlIFBsYXllciBzb3V0aC5cbiAgICpcbiAgICogQHBhcmFtIGRlbHRhIFRoZSBnYW1lJ3MgZGVsdGEgYmV0d2VlbiBmcmFtZXMuXG4gICAqL1xuICBtb3ZlUyhkZWx0YTogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogTW92ZSB0aGUgUGxheWVyIGVhc3QuXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgZ2FtZSdzIGRlbHRhIGJldHdlZW4gZnJhbWVzLlxuICAgKi9cbiAgbW92ZUUoZGVsdGE6IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIE1vdmUgdGhlIFBsYXllciB3ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIGdhbWUncyBkZWx0YSBiZXR3ZWVuIGZyYW1lcy5cbiAgICovXG4gIG1vdmVXKGRlbHRhOiBudW1iZXIpOiB2b2lkO1xufVxuXG4vKipcbiAqIFRoZSBQbGF5ZXIgY2xhc3MuIEtlZXBzIHRyYWNrIG9mIHRoZSBzdGF0ZSBvZiB0aGUgcGxheWVyIGluY2x1ZGluZyBhbGxcbiAqIGF0dHJpYnV0ZXMgYW5kIHN0YXRzLlxuICpcbiAqIEBhYnN0cmFjdFxuICogQGV4dGVuZHMgW1tHYW1lQWN0b3JdXSBUaGUgR2FtZU9iamVjdCBiYXNlIGFic3RyYWN0IGNsYXNzLlxuICogQGltcGxlbWVudHMgW1tJUGxheWVyXV1cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXllciBleHRlbmRzIEdhbWVBY3RvciBpbXBsZW1lbnRzIElQbGF5ZXIge1xuXG4gIHByaXZhdGUgX2V2ZW50Q29tcG9uZW50OiBFdmVudENvbXBvbmVudDtcbiAgcHJpdmF0ZSBfbGlmZWZvcmNlQ29tcG9uZW50OiBMaWZlZm9yY2VDb21wb25lbnQ7XG4gIHByaXZhdGUgX21vdmVtZW50Q29tcG9uZW50OiBNb3ZlbWVudENvbXBvbmVudDtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSBwb3NpdGlvbiBUaGUgc3RhcnRpbmcgcG9zaXRpb24gb2YgdGhlIFBsYXllci5cbiAgICovXG4gICBjb25zdHJ1Y3Rvcihwb3NpdGlvbjogQ29vcmRpbmF0ZSkge1xuICAgIHN1cGVyKHBvc2l0aW9uKTtcblxuICAgIHRoaXMuX2xpZmVmb3JjZUNvbXBvbmVudCA9IG5ldyBMaWZlZm9yY2VDb21wb25lbnQoKTtcbiAgICB0aGlzLl9tb3ZlbWVudENvbXBvbmVudCA9IG5ldyBNb3ZlbWVudENvbXBvbmVudCgpO1xuXG4gICAgdGhpcy5fZXZlbnRDb21wb25lbnQgPSBuZXcgRXZlbnRDb21wb25lbnQoKTtcbiAgICB0aGlzLl9ldmVudENvbXBvbmVudC5hdHRhY2goUGxheWVyRGVhdGhFdmVudC5jcmVhdGUodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIFBsYXllcidzIHN0YXRlLiBJbnRlbmRlZCB0byBiZSBydW4gaW4gdGhlIG1haW4gZ2FtZSBsb29wLlxuICAgKlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIHRpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIGZyYW1lcy4gUHJvdmlkZWQgYnkgdGhlIGdhbWUnc1xuICAgKiBtYWluIGdhbWUgbG9vcC5cbiAgICogQHNlZSBGaWVuZEdhbWUubWFpbigpXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9saWZlZm9yY2VDb21wb25lbnQudXBkYXRlKHRoaXMpO1xuICAgIC8vIHRoaXMuX2V2ZW50Q29tcG9uZW50LmVtaXQoJ3BsYXllcl9kaWVkJyk7XG4gICAgLy8gVE9ETzogY29uc29sZS5sb2coJ3RoaXMucG9zaXRpb24gOicsIHRoaXMucG9zaXRpb24pO1xuICB9XG5cblxuICAvKipcbiAgICogRHJhd3MgdGhlIFBsYXllciBlbnRpdHlcbiAgICpcbiAgICogQHBhcmFtIGN0eCBUaGUgY2FudmFzIGNvbnRleHQuXG4gICAqL1xuICAgcHVibGljIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgMTAsIDAsIE1hdGguUEkqMik7XG4gICAgY3R4LmZpbGxTdHlsZSA9IFwiIzAwOTVERFwiO1xuICAgIGN0eC5maWxsKCk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICB9XG5cblxuICAvKipcbiAgICogICAgfCAgICAgICAgICAgICAgIC4gICAgfHxcbiAgICogICB8fHwgICAgICAuLi4uICAufHwuICAuLi4gICAgLi4uICAgLi4gLi4uICAgIC4uLi5cbiAgICogIHwgIHx8ICAgLnwgICAnJyAgfHwgICAgfHwgIC58ICAnfC4gIHx8ICB8fCAgfHwuICdcbiAgICogIC4nJycnfC4gIHx8ICAgICAgIHx8ICAgIHx8ICB8fCAgIHx8ICB8fCAgfHwgIC4gJ3wuLlxuICAgKiAufC4gIC58fC4gICd8Li4uJyAgJ3wuJyAufHwuICAnfC4ufCcgLnx8LiB8fC4gfCcuLnwnXG4gICAqL1xuXG4gIC8qKlxuICAgKiBNb3ZlIHRoZSBQbGF5ZXIgbm9ydGguXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgZ2FtZSdzIGRlbHRhIGJldHdlZW4gZnJhbWVzLlxuICAgKi9cbiAgcHVibGljIG1vdmVOKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9tb3ZlbWVudENvbXBvbmVudC5tb3ZlTih0aGlzLCBkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIEFQSSBmb3IgdGhlIE1vdmVtZW50Q29tcG9uZW50XG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgZ2FtZSdzIGRlbHRhIGJldHdlZW4gZnJhbWVzLlxuICAgKi9cbiAgcHVibGljIG1vdmVTKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9tb3ZlbWVudENvbXBvbmVudC5tb3ZlUyh0aGlzLCBkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0aGUgUGxheWVyIGVhc3QuXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgZ2FtZSdzIGRlbHRhIGJldHdlZW4gZnJhbWVzLlxuICAgKi9cbiAgcHVibGljIG1vdmVFKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9tb3ZlbWVudENvbXBvbmVudC5tb3ZlRSh0aGlzLCBkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0aGUgUGxheWVyIHdlc3QuXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgZ2FtZSdzIGRlbHRhIGJldHdlZW4gZnJhbWVzLlxuICAgKi9cbiAgcHVibGljIG1vdmVXKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9tb3ZlbWVudENvbXBvbmVudC5tb3ZlVyh0aGlzLCBkZWx0YSk7XG4gIH1cblxufVxuXG4iLCIvKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBbW0dhbWVPYmplY3RdXSBjbGFzcy5cbiAqXG4gKiBAaW50ZXJmYWNlIElHYW1lT2JqZWN0XG4gKi9cbmludGVyZmFjZSBJR2FtZU9iamVjdCB7XG5cbiAgLyoqXG4gICAqIEFjY2Vzc29yIGZvciB0aGUgcHJpdmF0ZSBtZW1iZXIgYGlkYC5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGlkIG9mIHRoZSBHYW1lT2JqZWN0XG4gICAqL1xuICAgZ2V0SWQoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzaWduYXR1cmUgZm9yIHRoZSB1cGRhdGUgbWV0aG9kIGZvciB0aGUgR2FtZUFjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0gZGVsdGEgVGhlIHRpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIGZyYW1lcy4gUHJvdmlkZWQgYnkgdGhlIGdhbWUnc1xuICAgKiBtYWluIGdhbWUgbG9vcC5cbiAgICogQHNlZSBGaWVuZEdhbWUubWFpbigpXG4gICAqL1xuICB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQ7XG59XG5cbi8qKlxuICogVGhlIEdhbWVPYmplY3QgYWJzdHJhY3QgY2xhc3MuIEFsbCBnYW1lIGVudGl0aWVzIGluaGVyaXQgZnJvbSB0aGlzIGNsYXNzLlxuICogT24gaW5zdGFudGlhdGlvbiwgdGhlIGNsYXNzIHdpbGwgZ2VuZXJhdGUgYW4gYXV0by1pbmNyZW1lbnRpbmcgaWQgZm9yIHVzZVxuICogaW4gaWRlbnRpZnlpbmcgdGhlIG5ld2x5LWNyZWF0ZWQgR2FtZU9iamVjdC5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEdhbWVPYmplY3QgaW1wbGVtZW50cyBJR2FtZU9iamVjdCB7XG5cbiAgLyoqXG4gICAqIEB2YXIgaWRJbmNyZW1lbnRvciBLZWVwcyB0cmFjayBvZiB0aGUgYGlkYCBvZiB0aGUgbGFzdCBHYW1lT2JqZWN0XG4gICBpbnN0YW50aWF0ZWQuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGlkSW5jcmVtZW50b3I6IG51bWJlciA9IDE7XG5cbiAgLyoqXG4gICAqIEB2YXIgaWQgVGhlIGlkIG9mIHRoZSBpbnN0YW5jZSBvZiB0aGUgR2FtZU9iamVjdC5cbiAgICovXG4gIHByaXZhdGUgaWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEF1dG8taW5jcmVtZW50cyB0aGUgR2FtZU9qZWN0IGlkIGZvciB0aGUgbmV3IEdhbWVPYmplY3QgYmVpbmcgY3JlYXRlZC5cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmlkID0gR2FtZU9iamVjdC5pZEluY3JlbWVudG9yKys7XG4gIH1cblxuICAvKipcbiAgICogQWNjZXNzb3IgZm9yIHRoZSBwcml2YXRlIG1lbWJlciBgaWRgLlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgaWQgb2YgdGhlIEdhbWVPYmplY3RcbiAgICovXG4gIHB1YmxpYyBnZXRJZCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmlkO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIEdhbWVPYmplY3QncyBzdGF0ZS4gSW50ZW5kZWQgdG8gYmUgcnVuIGluIHRoZSBtYWluIGdhbWUgbG9vcC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSBkZWx0YSBUaGUgdGltZSBkaWZmZXJlbmNlIGJldHdlZW4gZnJhbWVzLiBQcm92aWRlZCBieSB0aGUgZ2FtZSdzXG4gICAqIG1haW4gZ2FtZSBsb29wLlxuICAgKiBAc2VlIEZpZW5kR2FtZS5tYWluKClcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQ7XG5cbn1cbiIsIi8qKlxuICogQGZpbGUgVGhlIEdhbWVPYmplY3QgQmFycmVsLiBSZS1leHBvcnRzIEdhbWVPYmplY3QgZmlsZXMgZm9yIGVhc2llciBpbXBvcnRcbiAqIGVsc2V3aGVyZS5cbiAqIEBzZWUgQGxpbmsgaHR0cHM6Ly9iYXNhcmF0LmdpdGJvb2tzLmlvL3R5cGVzY3JpcHQvZG9jcy90aXBzL2JhcnJlbC5odG1sXG4gKi9cblxuLyoqXG4gKiBQcm9nZW5pdG9yIGNsYXNzZXMgZm9yIGFsbCBlbnRpdGllcyBpbiB0aGUgZ2FtZS5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9HYW1lT2JqZWN0JztcblxuLyoqXG4gKiBUaGUgYmFzZSBHYW1lQWN0b3IgY2xhc3MuIEFsbCBHYW1lT2JqZWN0cyB0aGF0IGNhbiBpbmZsdWVuY2UgdGhpbmdzIGluIHRoZVxuICogZW52aXJvbm1lbnQgd2lsbCBkZXJpdmUgZnJvbSB0aGUgR2FtZUFjdG9yIGNsYXNzLlxuICovXG5leHBvcnQgKiBmcm9tICcuL0dhbWVBY3Rvci9HYW1lQWN0b3InO1xuXG4vKipcbiAqIFRoZSBiYXNlIE5wYyBjbGFzcy5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9HYW1lQWN0b3IvTnBjJztcblxuLyoqXG4gKiBUaGUgb3JkaW5hcnkgZm9sayBucGMgY2xhc3MuXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vR2FtZUFjdG9yL09yZGluYXJ5Rm9sayc7XG5cbi8qKlxuICogVGhlIHBsYXllciBjaGFyYWN0ZXIgY2xhc3MuXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vR2FtZUFjdG9yL1BsYXllcic7XG5cbi8qKlxuICogVGhlIGJhc2UgQWN0b3IgZmFjdG9yeSBjbGFzcy5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9HYW1lQWN0b3IvQWN0b3JGYWN0b3J5L0FjdG9yRmFjdG9yeSc7XG5cbi8qKlxuICogVGhlIE9yZGluYXJ5Rm9sayBmYWN0b3J5IGNsYXNzLlxuICovXG5leHBvcnQgKiBmcm9tICcuL0dhbWVBY3Rvci9BY3RvckZhY3RvcnkvT3JkaW5hcnlGb2xrRmFjdG9yeSc7XG4iLCJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcIi4uL0NvbW1hbmRcIjtcbmltcG9ydCB7IEdhbWVBY3RvciB9IGZyb20gJy4uL0dhbWVPYmplY3QnO1xuXG5pbXBvcnQgeyBOdWxsQ29tbWFuZCB9IGZyb20gXCIuLi9Db21tYW5kXCI7XG5pbXBvcnQgeyBNb3ZlTm9ydGhDb21tYW5kIH0gZnJvbSBcIi4uL0NvbW1hbmRcIjtcbmltcG9ydCB7IE1vdmVTb3V0aENvbW1hbmQgfSBmcm9tIFwiLi4vQ29tbWFuZFwiO1xuaW1wb3J0IHsgTW92ZUVhc3RDb21tYW5kIH0gZnJvbSBcIi4uL0NvbW1hbmRcIjtcbmltcG9ydCB7IE1vdmVXZXN0Q29tbWFuZCB9IGZyb20gXCIuLi9Db21tYW5kXCI7XG5cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIElucHV0SGFuZGxlclxuICovXG5pbnRlcmZhY2UgSUlucHV0SGFuZGxlciB7XG5cbiAgLyoqXG4gICAqIEJpbmRzIGFuIGlucHV0IHRvIGEgY29tbWFuZC5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IFRoZSB1c2VyIGludGVyYWN0aW9uIHdpdGggYSBrZXlib2FyZC5cbiAgICogQHBhcmFtIGNvbW1hbmRcbiAgICovXG4gIGtleUJpbmQoZXZlbnQ6IEtleWJvYXJkRXZlbnQsIGNvbW1hbmQ6IENvbW1hbmQpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGFueSBpbnB1dCBpZiBhIG1hcHBlZCBidXR0b24gaXMgcHJlc3NlZC4gUnVuIG9uY2UgcGVyIGdhbWUgdXBkYXRlXG4gICAqIHRpY2suXG4gICAqXG4gICAqIEBwYXJhbSBhY3RvciBUaGUgZ2FtZSBhY3RvciBlbnRpdHkgdG8gaGFuZGxlIGlucHV0LiBNb3N0IGxpa2VseSB3aWxsIGJlIHRoZVxuICAgKiBQbGF5ZXIocykuXG4gICAqIEBwYXJhbSBkZWx0YSBUaGVcbiAgICovXG4gIGhhbmRsZUlucHV0KGFjdG9yOiBHYW1lQWN0b3IsIGRlbHRhOiBudW1iZXIpOiB2b2lkO1xufVxuXG4vKipcbiAqIFRoZSBJSW5wdXRNYXAgaW50ZXJmYWNlLlxuICogQGtleXNcbiAqIFtrZXldOiBUaGUgbmFtZSBvZiB0aGUga2V5IHByZXNzZWQsIHNlbnQgYnkgdGhlIGJyb3dzZXIuaGVhZGVyXG4gKiBbY29tbWFuZF06IFRoZSBtYXBwZWQgY29tbWFuZCB0byBiZSBleGVjdXRlZC5cbiAqIFtzdGF0dXNdOiBUaGUgYnV0dG9uJ3MgY3VycmVudCBzdGF0dXNcbiAqL1xuaW50ZXJmYWNlIElJbnB1dE1hcCB7XG4gIFtrZXk6IHN0cmluZ106IHtcbiAgICBjb21tYW5kOiBDb21tYW5kLFxuICAgIHN0YXR1czogQnV0dG9uU3RhdHVzXG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgYnVpbHQtaW4gY29udHJvbCBzY2hlbWUgdHlwZXMuIEFsbG93cyBhIHVzZXIgdG8gY2hhbmdlIHRoZSBjb250cm9sIHNjaGVtZVxuICogd2l0aG91dCByZW1hcHBpbmcgYWxsIHRoZSBrZXlzIGluZGl2aWR1YWxseS5cbiAqXG4gKiBAdHlwZSB7ZW51bX0gQ29udHJvbFNjaGVtZXNcbiAqL1xuZW51bSBDb250cm9sU2NoZW1lcyB7XG4gIERFRkFVTFQsXG4gIEZQUyxcbiAgT05FSEFOREVEX1JJR0hULFxuICBPTkVIQU5ERURfTEVGVCxcbn1cblxuLyoqXG4gKiBNYXBzIGEgYnV0dG9uIHRvIGEga2V5Ym9hcmQgaW5wdXQga2V5LlxuICpcbiAqIEB0eXBlIHtlbnVtfSBCdXR0b25cbiAqL1xuZW51bSBCdXR0b24ge1xuICBVUCA9IFwiQXJyb3dVcFwiLFxuICBET1dOID0gXCJBcnJvd0Rvd25cIixcbiAgTEVGVCA9IFwiQXJyb3dMZWZ0XCIsXG4gIFJJR0hUID0gXCJBcnJvd1JpZ2h0XCIsXG4gIEUgPSBcImVcIixcbiAgUSA9IFwicVwiLFxuICBCU1BBQ0UgPSBcIkJhY2tzcGFjZVwiLFxuICBFTlRFUiA9IFwiRW50ZXJcIixcbiAgU0hJRlQgPSBcIlNoaWZ0XCIsXG59XG5cbi8qKlxuICogVGhlIEJ1dHRvblN0YXR1cyBlbnVtLlxuICogQHZhbHVlc1xuICogW1BSRVNTRURdOiBUaGUgYnV0dG9uIGlzIHByZXNzZWQuXG4gKiBbUkFJU0VEXTogVGhlIGJ1dHRvbiBpcyBOT1QgcHJlc3NlZCwgaXQgaXMgcmFpc2VkLiBBbHNvIGNhbiBiZSBjb25zaWRlcmVkXG4gKiBcInVudG91Y2hlZFwiIGJ5IHRoZSBwbGF5ZXIuXG4gKiBbSEVMRF06IFRoZSBidXR0b24gaXMgaGVsZCBkb3duLlxuICogW1JFTEVBU0VEXTogVGhlIGJ1dHRvbiBoYXMgYmVlbiByZWxlYXNlZCBmcm9tIGEgcHJlc3NlZCBzdGF0ZS5cbiAqIFtESVNBQkxFRF06IFRoZSBidXR0b24gaGFzIGJlZW4gZGlzYWJsZWQgYW5kIHdpbGwgbm90IGZpcmUgZXZlbnRzLlxuICpcbiAqIEB0eXBlIHtlbnVtfSBCdXR0b25TdGF0dXNcbiAqL1xuIGVudW0gQnV0dG9uU3RhdHVzIHtcbiAgUFJFU1NFRCxcbiAgUkFJU0VELFxuICBIRUxELFxuICBSRUxFQVNFRCxcbiAgRElTQUJMRUQsXG59XG5cbi8qKlxuICogVGhlIElucHV0SGFuZGxlciBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIElucHV0SGFuZGxlciBpbXBsZW1lbnRzIElJbnB1dEhhbmRsZXIge1xuXG4gIC8qKlxuICAgKiBUT0RPIFN0cnVjdHVyZSBzaG91bGQgYWRkIFtcImNvbnRleHRcIl0gc28gd2UgY2FuIGhhdmUgY29udGV4dC1pbmRlcGVuZGVudFxuICAgKiBidXR0b25zXG4gICAqIEB0eXBlIHtJSW5wdXRNYXB9IFRoZSBpbnB1dE1hcCBpbnN0YW5jZS5cbiAgICovXG4gIHByaXZhdGUgaW5wdXRNYXA6IElJbnB1dE1hcDtcblxuICAvKipcbiAgICogVGhlIElucHV0SGFuZGxlciBjb25zdHJ1Y3Rvci5cbiAgICogQXR0YWNoZXMgdGhlIGtleWRvd24gYW5kIGtleXVwIEtleWJvYXJkRXZlbnQgdG8gdGhlIGRvY3VtZW50LlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1wYW5lJykuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdrZXlkb3duJywgKGV2ZW50KSA9PiB0aGlzLmJ1dHRvblByZXNzZWQoZXZlbnQpLCBmYWxzZVxuICAgICk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1wYW5lJykuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdrZXl1cCcsIChldmVudCkgPT4gdGhpcy5idXR0b25SZWxlYXNlZChldmVudCksIGZhbHNlXG4gICAgKTtcblxuICAgIHRoaXMuaW5wdXRNYXAgPSB0aGlzLmluaXRJbnB1dE1hcCgpO1xuXG4gICAgLy8gVE9ETzogVGhpcyBzaG91bGQgcmVhZCBpbiB1c2VyLWRlZmluZWQgaW5wdXQgbWFwcGluZ3MsIG90aGVyaXdzZSBsb2FkXG4gICAgLy8gZGVmYXVsdCBzZXR0aW5ncy4gKGlmIHVzZXIgaGFzIHNhdmVkIGNvbnRyb2wgc2NoZW1lLCBlbHNlIGxvYWQgZGVmYXVsdClcbiAgICB0aGlzLmxvYWRDb250cm9sU2NoZW1lKENvbnRyb2xTY2hlbWVzLkRFRkFVTFQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIGFuIGlucHV0IHRvIGEgY29tbWFuZC5cbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCBUaGUga2V5IHRvIGJpbmQgdGhlIGV2ZW50IHRvXG4gICAqIEBwYXJhbSB7Q29tbWFuZH0gY29tbWFuZCBUaGUgY29tbWFuZCB0byBiaW5kIHRvIHRoZSBidXR0b25cbiAgICovXG4gIHB1YmxpYyBrZXlCaW5kKGV2ZW50OiBLZXlib2FyZEV2ZW50LCBjb21tYW5kOiBDb21tYW5kKTogdm9pZCB7XG4gICAgdGhpcy5pbnB1dE1hcFtldmVudC5rZXldLmNvbW1hbmQgPSBjb21tYW5kO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWlucyBpZiBhIGJ1dHRvbiB3YXMgcHJlc3NlZC4gQ2FsbGJhY2sgZm9yIHdoZW4gYSBidXR0b24gaXMgcHJlc3NlZCBieVxuICAgKiB0aGUgdXNlci5cbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCBUaGUgdXNlciBpbnRlcmFjdGlvbiB3aXRoIGEga2V5Ym9hcmQuXG4gICAqL1xuICBwdWJsaWMgYnV0dG9uUHJlc3NlZChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAodGhpcy5pbnB1dE1hcFtldmVudC5rZXldKSB7XG4gICAgICB0aGlzLmlucHV0TWFwW2V2ZW50LmtleV0uc3RhdHVzID0gQnV0dG9uU3RhdHVzLlBSRVNTRUQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZvciB3aGVuIGEgYnV0dG9uIGlzIHJlbGVhc2VkIGJ5IHRoZSB1c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IFRoZSB1c2VyIGludGVyYWN0aW9uIHdpdGggYSBrZXlib2FyZC5cbiAgICovXG4gIHB1YmxpYyBidXR0b25SZWxlYXNlZChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAodGhpcy5pbnB1dE1hcFtldmVudC5rZXldKSB7XG4gICAgICB0aGlzLmlucHV0TWFwW2V2ZW50LmtleV0uc3RhdHVzID0gQnV0dG9uU3RhdHVzLlJBSVNFRDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB1c2VyIGlucHV0LiBSdW5zIG9uY2UgcGVyIGdhbWUgbG9vcC5cbiAgICovXG4gIHB1YmxpYyBoYW5kbGVJbnB1dChhY3RvcjogR2FtZUFjdG9yLCBkZWx0YTogbnVtYmVyKTogdm9pZCB7XG5cbiAgICBpZiAodGhpcy5pbnB1dE1hcFtCdXR0b24uVVBdLnN0YXR1cyA9PT0gQnV0dG9uU3RhdHVzLlBSRVNTRUQpIHtcbiAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLlVQXS5jb21tYW5kLmV4ZWN1dGUoYWN0b3IsIGRlbHRhKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXRNYXBbQnV0dG9uLkRPV05dLnN0YXR1cyA9PT0gQnV0dG9uU3RhdHVzLlBSRVNTRUQpIHtcbiAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLkRPV05dLmNvbW1hbmQuZXhlY3V0ZShhY3RvciwgZGVsdGEpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pbnB1dE1hcFtCdXR0b24uTEVGVF0uc3RhdHVzID09PSBCdXR0b25TdGF0dXMuUFJFU1NFRCkge1xuICAgICAgdGhpcy5pbnB1dE1hcFtCdXR0b24uTEVGVF0uY29tbWFuZC5leGVjdXRlKGFjdG9yLCBkZWx0YSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlucHV0TWFwW0J1dHRvbi5SSUdIVF0uc3RhdHVzID09PSBCdXR0b25TdGF0dXMuUFJFU1NFRCkge1xuICAgICAgdGhpcy5pbnB1dE1hcFtCdXR0b24uUklHSFRdLmNvbW1hbmQuZXhlY3V0ZShhY3RvciwgZGVsdGEpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pbnB1dE1hcFtCdXR0b24uRV0uc3RhdHVzID09PSBCdXR0b25TdGF0dXMuUFJFU1NFRCkge1xuICAgICAgdGhpcy5pbnB1dE1hcFtCdXR0b24uRV0uY29tbWFuZC5leGVjdXRlKGFjdG9yLCBkZWx0YSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlucHV0TWFwW0J1dHRvbi5RXS5zdGF0dXMgPT09IEJ1dHRvblN0YXR1cy5QUkVTU0VEKSB7XG4gICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5RXS5jb21tYW5kLmV4ZWN1dGUoYWN0b3IsIGRlbHRhKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXRNYXBbQnV0dG9uLkJTUEFDRV0uc3RhdHVzID09PSBCdXR0b25TdGF0dXMuUFJFU1NFRCkge1xuICAgICAgdGhpcy5pbnB1dE1hcFtCdXR0b24uQlNQQUNFXS5jb21tYW5kLmV4ZWN1dGUoYWN0b3IsIGRlbHRhKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXRNYXBbQnV0dG9uLkVOVEVSXS5zdGF0dXMgPT09IEJ1dHRvblN0YXR1cy5QUkVTU0VEKSB7XG4gICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5FTlRFUl0uY29tbWFuZC5leGVjdXRlKGFjdG9yLCBkZWx0YSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlucHV0TWFwW0J1dHRvbi5TSElGVF0uc3RhdHVzID09PSBCdXR0b25TdGF0dXMuUFJFU1NFRCkge1xuICAgICAgdGhpcy5pbnB1dE1hcFtCdXR0b24uU0hJRlRdLmNvbW1hbmQuZXhlY3V0ZShhY3RvciwgZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBhbiBpbnB1dCBtYXAgc28gdGhlIHN0cnVjdHVyZSBpcyBhdmFpbGFibGUgd2hlbiBuZWVkZWQuXG4gICAqXG4gICAqIEByZXR1cm4ge0lJbnB1dE1hcH0gVGhlIElJbnB1dE1hcCBpbnRlcmZhY2UuXG4gICAqL1xuICBwcml2YXRlIGluaXRJbnB1dE1hcCgpOiBJSW5wdXRNYXAge1xuICAgIGxldCBpcCA9IHt9O1xuXG4gICAgZm9yKGxldCBidXR0b25LZXkgaW4gQnV0dG9uKSB7XG4gICAgICBpcFtCdXR0b25bYnV0dG9uS2V5XV0gPSB7XG4gICAgICAgIGNvbW1hbmQ6IE51bGxDb21tYW5kLFxuICAgICAgICBzdGF0dXM6IEJ1dHRvblN0YXR1cy5SQUlTRURcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXA7XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgYSBjb250cm9sIHNjaGVtZSB3aGVuIHRoZSBnYW1lIGZpcnN0IGluaXRpYWxpemVzLCBzbyB0aGUgcGxheWVyIGNhblxuICAgKiBoYXZlIHNvbWUgaW5wdXQuIFN1cHBvcnRzIG11bHRpcGxlIGNvbnRyb2wgc2NoZW1lcyBzbyBwbGF5ZXJzIGNhbiByZS1tYXBcbiAgICogY29udHJvbHMgd2l0aG91dCBoYXZpbmcgdG8gcmUtbWFwIGVhY2ggYnV0dG9uIGluZGl2aWR1YWxseS5cbiAgICpcbiAgICogQHBhcmFtIGNvbnRyb2xTY2hlbWVcbiAgICovXG4gIHByaXZhdGUgbG9hZENvbnRyb2xTY2hlbWUoY29udHJvbFNjaGVtZTogQ29udHJvbFNjaGVtZXMpOiB2b2lkIHtcbiAgICBzd2l0Y2goY29udHJvbFNjaGVtZSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIHRoaXMuaW5wdXRNYXBbQnV0dG9uLlVQXS5jb21tYW5kID0gbmV3IE1vdmVOb3J0aENvbW1hbmQocGxheWVyOiBHYW1lQWN0b3IpO1xuICAgICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5VUF0uY29tbWFuZCA9IG5ldyBNb3ZlTm9ydGhDb21tYW5kKCk7XG4gICAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLkRPV05dLmNvbW1hbmQgPSBuZXcgTW92ZVNvdXRoQ29tbWFuZCgpO1xuICAgICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5MRUZUXS5jb21tYW5kID0gbmV3IE1vdmVXZXN0Q29tbWFuZCgpO1xuICAgICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5SSUdIVF0uY29tbWFuZCA9IG5ldyBNb3ZlRWFzdENvbW1hbmQoKTtcbiAgICAgICAgdGhpcy5pbnB1dE1hcFtCdXR0b24uRV0uY29tbWFuZCA9IG5ldyBOdWxsQ29tbWFuZCgpO1xuICAgICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5RXS5jb21tYW5kID0gbmV3IE51bGxDb21tYW5kKCk7XG4gICAgICAgIHRoaXMuaW5wdXRNYXBbQnV0dG9uLkJTUEFDRV0uY29tbWFuZCA9IG5ldyBOdWxsQ29tbWFuZCgpO1xuICAgICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5FTlRFUl0uY29tbWFuZCA9IG5ldyBOdWxsQ29tbWFuZCgpO1xuICAgICAgICB0aGlzLmlucHV0TWFwW0J1dHRvbi5TSElGVF0uY29tbWFuZCA9IG5ldyBOdWxsQ29tbWFuZCgpO1xuICAgIH1cbiAgfVxufVxuXG4vLyB2YXIga2V5ID0ge1xuLy8gICBCQUNLU1BBQ0U6IDgsXG4vLyAgIFRBQjogICAgICAgOSxcbi8vICAgUkVUVVJOOiAgIDEzLFxuLy8gICBFU0M6ICAgICAgMjcsXG4vLyAgIFNQQUNFOiAgICAzMixcbi8vICAgUEFHRVVQOiAgIDMzLFxuLy8gICBQQUdFRE9XTjogMzQsXG4vLyAgIEVORDogICAgICAzNSxcbi8vICAgSE9NRTogICAgIDM2LFxuLy8gICBMRUZUOiAgICAgMzcsXG4vLyAgIFVQOiAgICAgICAzOCxcbi8vICAgUklHSFQ6ICAgIDM5LFxuLy8gICBET1dOOiAgICAgNDAsXG4vLyAgIElOU0VSVDogICA0NSxcbi8vICAgREVMRVRFOiAgIDQ2LFxuLy8gICBaRVJPOiAgICAgNDgsIE9ORTogNDksIFRXTzogNTAsIFRIUkVFOiA1MSwgRk9VUjogNTIsIEZJVkU6IDUzLCBTSVg6IDU0LCBTRVZFTjogNTUsIEVJR0hUOiA1NiwgTklORTogNTcsXG4vLyAgIEE6ICAgICAgICA2NSwgQjogNjYsIEM6IDY3LCBEOiA2OCwgRTogNjksIEY6IDcwLCBHOiA3MSwgSDogNzIsIEk6IDczLCBKOiA3NCwgSzogNzUsIEw6IDc2LCBNOiA3NywgTjogNzgsIE86IDc5LCBQOiA4MCwgUTogODEsIFI6IDgyLCBTOiA4MywgVDogODQsIFU6IDg1LCBWOiA4NiwgVzogODcsIFg6IDg4LCBZOiA4OSwgWjogOTAsXG4vLyAgIFRJTERBOiAgICAxOTJcbi8vIH07XG4iLCJpbnRlcmZhY2UgSUNhbWVyYSB7XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSBjYW1lcmEuXG4gICAqL1xuICBwb3NpdGlvbjogQ29vcmRpbmF0ZTtcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBDYW1lcmEncyB2aWV3cG9ydC5cbiAgICovXG4gIHdpZHRoOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgdGhlIENhbWVyYSdzIHZpZXdwb3J0LlxuICAgKi9cbiAgaGVpZ2h0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBsaW1pdCBmb3IgdGhlIGNhbWVyYSdzIHBvc2l0aW9uIOKAlCBUaGUgbG93ZXIgbGltaXQgd2lsbCBuZWFybHkgYWx3YXlzIGJlXG4gICAqICgwLDApLiBUaGUgdXBwZXIgbGltaXQgaXMgZXF1YWwgdG8gdGhlIHNpemUgb2YgdGhlIHdvcmxkIG1pbnVzIHRoZSBzaXplIG9mXG4gICAqIHRoZSBjYW1lcmEncyB2aWV3cG9ydC5cbiAgICovXG4gIG1heFg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGxpbWl0IGZvciB0aGUgY2FtZXJhJ3MgcG9zaXRpb24g4oCUIFRoZSBsb3dlciBsaW1pdCB3aWxsIG5lYXJseSBhbHdheXMgYmVcbiAgICogKDAsMCkuIFRoZSB1cHBlciBsaW1pdCBpcyBlcXVhbCB0byB0aGUgc2l6ZSBvZiB0aGUgd29ybGQgbWludXMgdGhlIHNpemUgb2ZcbiAgICogdGhlIGNhbWVyYSdzIHZpZXdwb3J0LlxuICAgKi9cbiAgbWF4WTogbnVtYmVyO1xuXG59XG5cbmV4cG9ydCBjbGFzcyBDYW1lcmEgaW1wbGVtZW50cyBJQ2FtZXJhIHtcblxuICBwb3NpdGlvbjogQ29vcmRpbmF0ZTtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIG1heFg6IG51bWJlcjtcbiAgbWF4WTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxufVxuIiwiaW1wb3J0IHsgTWFwQmFzZSB9IGZyb20gXCIuLi8uLi9hdGxhc2VzL01hcEJhc2VcIjtcbmltcG9ydCB7IE92ZXJ3b3JsZCB9IGZyb20gXCIuLi8uLi9hdGxhc2VzL092ZXJ3b3JsZFwiO1xuXG5leHBvcnQgY2xhc3MgUmVuZGVyZXIge1xuXG4gIEVNUFRZX1RJTEU6IG51bWJlcjtcbiAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gIHBpeGVsczogbnVtYmVyO1xuICBzY2FsZTogbnVtYmVyO1xuICBzY2VuZVdpZHRoOiBudW1iZXI7XG4gIHNjZW5lSGVpZ2h0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRPRE86IENoYW5nZSB0aGlzIHRvIGJlIHRoZSBzY2VuZS4gUmVjcmVhdGUgdGhlIFJlbmRlcmVyIHdoZW4gYSBuZXcgc2NlbmVcbiAgICogaXMgbG9hZGVkLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9jdXJyZW50TWFwOiBNYXBCYXNlO1xuXG4gIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcblxuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNhbnZhcyBjb250ZXh0LlxuICAgICAqXG4gICAgICogQHZhciB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfVxuICAgICAqL1xuICAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50IGFudGktYWxpYXNpbmcgaW4gdGhlIGV2ZW50IGEgdGlsZSBnZXRzIHNjYWxlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJELmltYWdlU21vb3RoaW5nRW5hYmxlZH1cbiAgICAgKi9cbiAgICAgdGhpcy5jdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZW1wdHkgdGlsZSB2YWx1ZS4gSWYgdGhpcyB2YWx1ZSBpcyBzZXQgZm9yIGEgcG9zaXRpb24gaW4gYSBtYXAnc1xuICAgICAqIGFycmF5LCBpdCB3aWxsIG5vdCBiZSByZW5kZXJlZC5cbiAgICAgKiBUT0RPOiBNb3ZlIHRoaXMgdG8gdGhlIFNjZW5lLlxuICAgICAqXG4gICAgICogQHZhciB7aW50ZWdlcn1cbiAgICAgKi9cbiAgICB0aGlzLkVNUFRZX1RJTEUgPSAwO1xuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllciBmb3IgeCx5IHBvc2l0aW9uIHRvIHBpeGVscy4gV2hhdCBzaXplIHRoZSB0aWxlcyBmb3IgdGhlIGdhbWVcbiAgICAgKiB3aWxsIGJlIHJlbmRlcmVkIGF0LiBBbHdheXMgdXNlIGEgcG93ZXIgb2YgMiBzbyB0aGUgc2NhbGluZyBwcmV2ZW50c1xuICAgICAqIGJsdXJyaW5nLlxuICAgICAqXG4gICAgICogQHZhciB7aW50ZWdlcn1cbiAgICAgKi9cbiAgICB0aGlzLnBpeGVscyA9IDMyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjYWxlIGF0IHdoaWNoIHRoZSB0aWxlIHdpbGwgYmUgcmVuZGVyZWQuIDEgPSAxeCBzY2FsaW5nLCAyID0gMnhcbiAgICAgKiBzY2FsaW5nLCBldGMuXG4gICAgICpcbiAgICAgKiBAdmFyIHtpbnRlZ2VyfVxuICAgICAqL1xuICAgIHRoaXMuc2NhbGUgPSAxO1xuXG4gICAgdGhpcy5fY3VycmVudE1hcCA9IG5ldyBPdmVyd29ybGQoKTtcbiAgfVxuXG4gIGRyYXcoZ2FtZU9iamVjdENvdW50OiBudW1iZXIsIGdhbWVPYmplY3RzOiBBcnJheTxhbnk+KSB7XG5cbiAgICAvLyBDbGVhciB0aGUgc2NyZWVuXG4gICAgLy8gVE9ETzogUHVsbCB0aGlzIG91dC4gUHV0IGluIHJlbmRlcmVyLlxuICAgIHRoaXMuY3R4LmNsZWFyUmVjdChcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgdGhpcy5jYW52YXMud2lkdGgsXG4gICAgICB0aGlzLmNhbnZhcy5oZWlnaHRcbiAgICApO1xuXG4gICAgLy8gQWx3YXlzIHN0b3JlIHRoZSB0ZXh0dXJlIGluIGEgdmFyIHNvIHdlIGRvbid0IGNhbGwgXCJuZXcgRm9vKClcIiBtdWx0aXBsZVxuICAgIC8vIHRpbWVzIGEgc2Vjb25kLlxuICAgIHRoaXMuZHJhd1RpbGVNYXAodGhpcy5fY3VycmVudE1hcCk7XG5cbiAgICBmb3IgKGxldCBpPTA7IGk8Z2FtZU9iamVjdENvdW50OyBpKyspIHtcbiAgICAgIGdhbWVPYmplY3RzW2ldLmRyYXcodGhpcy5jdHgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgbWFwIGFjY29yZGluZyB0byB0aGUgY29vcmRpbmF0ZXMgZ2l2ZW4gaW4gdGhlIG1hcCdzIGZpbGUgYnlcbiAgICogdHJhbnNsYXRpbmcgdGhlIGNvb3JkaW5hdGVzIHRvIGEgc3ByaXRlc2hlZXQuXG4gICAqXG4gICAqIElmIGEgdGlsZSBpcyAzMngzMiBwaXhlbHMsIHRoZSAxc3QgdGlsZSB3aWxsIHN0YXJ0IGF0ICgwLDApIG9uXG4gICAqIHRoZSBzcHJpdGVzaGVldCwgdGhlIDJuZCB0aWxlIHdpbGwgc3RhcnQgYXQgKDMyLDApLCB0aGUgMzRkIGF0ICg2NCwwKSBhbmRcbiAgICogc28gb24uXG4gICAqXG4gICAqICstLS0rLS0tKy0tLSstLS0rXG4gICAqIHwgMSB8IDIgfCAzIHwgNCB8XG4gICAqICstLS0rLS0tKy0tLSstLS0rXG4gICAqIHwgNSB8IDYgfCA3IHwgOCB8XG4gICAqICstLS0rLS0tKy0tLSstLS0rXG4gICAqXG4gICAqICdzb3VyY2UgeCcgYW5kICdzb3VyY2UgeScgd2lsbCBnZXQgdGhlIGNvcnJlY3QgY29vcmRzIGluIHRoZSBpbWFnZSBmaWxlLlxuICAgKiBTbyBmb3Igb3VyIGZpcnN0IHRpbGUsICcxJywgZHJhd0ltYWdlIHdpbGwgZ3JhYiB0aGUgc3ViaW1hZ2UgYXQgKDMyLDApLlxuICAgKiBkcmF3SW1hZ2Ugd291bGQgZ2V0IHRoZSBzdWJpbWFnZSBhdCAoNjQsMzIpIGZvciB0aWxlICc3Jy5cbiAgICpcbiAgICogVE9ETyAgaHR0cHM6Ly9oYXNocm9ja2V0LmNvbS9ibG9nL3Bvc3RzL3VzaW5nLXRpbGVkLWFuZC1jYW52YXMtdG8tcmVuZGVyLWdhbWUtc2NyZWVuc1xuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwICBUaGUgbWFwIG9iamVjdCB0aGF0IGV4dGVuZHMgTWFwQmFzZS5cbiAgICovXG4gIGRyYXdUaWxlTWFwKG1hcDogTWFwQmFzZSk6IHZvaWQge1xuICAgIGZvciAobGV0IHg9MDsgeDxtYXAuY29sczsgeCsrKSB7XG4gICAgICBmb3IgKGxldCB5PTA7IHk8bWFwLnJvd3M7IHkrKykge1xuICAgICAgICBsZXQgdGlsZSA9IG1hcC5nZXRUaWxlKHgsIHkpO1xuXG4gICAgICAgIC8vIExldCdzIHNraXAgcmVuZGVyaW5nIGVtcHR5IHRpbGVzLlxuICAgICAgICBpZiAodGlsZSAhPT0gdGhpcy5FTVBUWV9USUxFKSB7XG4gICAgICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgLy8gSW1hZ2UgU291cmNlXG4gICAgICAgICAgICBtYXAuU00sXG4gICAgICAgICAgICAvLyBTb3VyY2UgeCAoU2VlIGV4YW1wbGUgaW4gY29tbWVudCBibG9jaylcbiAgICAgICAgICAgICgodGlsZSAtIDEpICUgbWFwLmNvbHMpICogdGhpcy5waXhlbHMsXG4gICAgICAgICAgICAvLyBTb3VyY2UgeSAoU2VlIGV4YW1wbGUgaW4gY29tbWVudCBibG9jaylcbiAgICAgICAgICAgIE1hdGguZmxvb3IoKCh0aWxlIC0gMSkgLyBtYXAucm93cykpICogdGhpcy5waXhlbHMsXG4gICAgICAgICAgICAvLyBTb3VyY2Ugd2lkdGhcbiAgICAgICAgICAgIHRoaXMucGl4ZWxzLFxuICAgICAgICAgICAgLy8gU291cmNlIGhlaWdodFxuICAgICAgICAgICAgdGhpcy5waXhlbHMsXG4gICAgICAgICAgICAvLyBUYXJnZXQgeFxuICAgICAgICAgICAgeCAqICh0aGlzLnBpeGVscyAqIHRoaXMuc2NhbGUpLFxuICAgICAgICAgICAgLy8gVGFyZ2V0IHlcbiAgICAgICAgICAgIHkgKiAodGhpcy5waXhlbHMgKiB0aGlzLnNjYWxlKSxcbiAgICAgICAgICAgIC8vIFRhcmdldCB3aWR0aFxuICAgICAgICAgICAgdGhpcy5waXhlbHMgKiB0aGlzLnNjYWxlLFxuICAgICAgICAgICAgIC8vIFRhcmdldCBoZWlnaHRcbiAgICAgICAgICAgIHRoaXMucGl4ZWxzICogdGhpcy5zY2FsZSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBGaWVuZEdhbWUgfSBmcm9tIFwiLi9lbmdpbmUvRmllbmRHYW1lXCI7XG5pbXBvcnQgeyBBc3NldExvYWRlciB9IGZyb20gXCIuL2VuZ2luZS9Bc3NldExvYWRlclwiO1xuXG4vKipcbiAqIFdlIG5lZWQgc29tZSBnbG9iYWwgdmFyaWFibGVzIHNvIHdlIGNhbiBsb2FkIHRoZSBnYW1lIGFuZCB0aGUgYXNzZXRzLiBMZXQnc1xuICogY29uc2lkZXIgbW92aW5nIHRoZSBGX0xPQURFUiB0byBpdCdzIG93biBjbGFzcyBzbyB3ZSBkb24ndCBuZWVkIGEgZ2xvYmFsIGZvclxuICogdGhlIGFzc2V0cy5cbiAqL1xuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBGX0xPQURFUjogQXNzZXRMb2FkZXI7XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgRmllbmRHYW1lLCB3aGljaCBsb2FkcyB0aGUgZ2FtZS5cbiAqL1xuZnVuY3Rpb24gaW5pdCgpIHtcblxuICAvLyBJbml0IGZ1bmN0aW9uYWxpdHksIGZvciBub3cuXG4gIG5ldyBGaWVuZEdhbWUoNjQwLCA0ODApO1xuICAvLyBGb2N1cyB0aGUgZ2FtZSBwYW5lIG9uIHBhZ2UgbG9hZC5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWUtcGFuZScpLmZvY3VzKCk7XG59O1xuXG4vKipcbiAqIEVuc3VyZSB0aGUgYXNzZXRzIGFyZSBsb2FkZWQgYmVmb3JlIHdlIGluaXRpYWxpemUgdGhlIGdhbWUuIFdlIGRvIHRoaXMgd2l0aCBhXG4gKiBwcm9taXNlIHRvIGVuc3VyZSBhbGwgdGhlIGltYWdlcyBhcmUgbG9hZGVkIGFuZCByZWFkeSB0byBiZSB1c2VkLlxuICogVE9ETyBNYWtlIHRoaXMgYmV0dGVyLCBtb3JlIFR5cGVTY3JpcHQteS5cbiAqL1xuIHdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICB3aW5kb3cuRl9MT0FERVIgPSBuZXcgQXNzZXRMb2FkZXIoKTtcbiAgdmFyIHAgPSB3aW5kb3cuRl9MT0FERVIuaW5pdEFzc2V0cygpO1xuICBQcm9taXNlLmFsbChwKS50aGVuKCAoKSA9PiB7XG4gICAgaW5pdCgpO1xuICB9KTtcbn1cbiJdfQ=="}
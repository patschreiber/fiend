{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/atlases/MapBase.ts","src/atlases/Overworld.ts","src/engine/AssetLoader.ts","src/engine/Command/Command.ts","src/engine/Command/MoveEastCommand.ts","src/engine/Command/MoveNorthCommand.ts","src/engine/Command/MoveSouthCommand.ts","src/engine/Command/MoveWestCommand.ts","src/engine/Command/NullCommand.ts","src/engine/Command/index.ts","src/engine/Component/Component.ts","src/engine/Component/EventComponent.ts","src/engine/Component/LifeforceComponent.ts","src/engine/Component/MovementComponent.ts","src/engine/Component/index.ts","src/engine/Event/PlayerDeathEvent.ts","src/engine/Event/index.ts","src/engine/FiendGame.ts","src/engine/GameObject/GameActor/ActorFactory/ActorFactory.ts","src/engine/GameObject/GameActor/ActorFactory/OrdinaryFolkFactory.ts","src/engine/GameObject/GameActor/ActorFactory/PlayerFactory.ts","src/engine/GameObject/GameActor/GameActor.ts","src/engine/GameObject/GameActor/Npc.ts","src/engine/GameObject/GameActor/OrdinaryFolk.ts","src/engine/GameObject/GameActor/Player.ts","src/engine/GameObject/GameObject.ts","src/engine/GameObject/index.ts","src/engine/Input/InputHandler.ts","src/engine/Render/Camera/Camera.ts","src/engine/Render/Renderer.ts","src/main.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class MapBase {\n  SM: HTMLImageElement;\n  cols: number;\n  rows: number;\n  tsize: number;\n  tiles: Array<any>;\n  \n  constructor() {\n    this.cols = 0;\n    this.rows = 0;\n    this.tsize = 0;\n    this.tiles = null;\n  }\n\n  /**\n   * Gets the tile value located by the column and row (x,y) coordinates.\n   * This is trivial with a 2D array, but this method allows us to use a 1D\n   * array instead.\n   *\n   * @param {integer} x   The x-axis position of the requested tile.\n   * @param {integer} y   The y-axis position of the requested tile.\n   */\n  getTile(x: number, y: number): number {\n    if (\n      this.cols === 0\n      || this.rows === 0\n      || this.tsize === 0\n    ) {\n      throw new Error(\"Map size needs to have proper dimensions.\");\n    }\n\n    return this.tiles[y * this.cols + x];\n  }\n}\n","import { MapBase } from \"./MapBase\";\n\nexport class Overworld extends MapBase {\n  SM: HTMLImageElement;\n  tiles: Array<any>;\n  layers: Array<any>;\n  cols: number;\n  rows: number;\n  tsize: number;\n  \n  constructor() {\n    super();\n\n    /**\n     * The spritemap to be used.\n     * @var {HTMLImageElement}\n     */\n    this.SM = window.F_LOADER.getImage('TESTNUMBERED');\n\n    this.cols = 20;\n    this.rows = 15;\n    this.tsize = 300;\n    this.tiles = [\n        1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n       21,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n        8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,\n    ];\n    this.layers = [\n      [\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n      ], [\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n      ]\n    ]\n  }\n\n}\n","export class AssetLoader {\n  private _assetList: Array<any>;\n\n  constructor() {\n    this._assetList = [];\n  }\n\n  public initAssets(): Array<any> {\n    return [\n      this.loadImage(\"testTileset\", \"./DAT/1bittest.png\"),\n      this.loadImage(\"testTileset2\", \"./DAT/psychic-swamp.png\"),\n      this.loadImage(\"TESTORIG\", \"./DAT/low-res-spritesheet.png\"),\n      this.loadImage(\"TESTNUMBERED\", \"./DAT/pixel_art_tileset_test.png\"),\n    ];\n  }\n\n  public loadImage(key: string, src: string) {\n    let img = new Image();\n\n    let d = new Promise(function (resolve, reject) {\n      img.onload = function () {\n        this._assetList[key] = img;\n        resolve(img);\n      }.bind(this);\n\n      img.onerror = function () {\n        reject('Could not load image: ' + src);\n      };\n    }.bind(this));\n  \n    img.src = src;\n  \n    return d;\n  }\n\n  public getImage(key: string): HTMLImageElement {\n    return (key in this._assetList) ? this._assetList[key] : null;\n  };\n}","import { GameActor } from \"../GameObject\";\n\n/**\n * The Command class.\n * @abstract\n */\nexport abstract class Command {\n\n  /**\n   * Executes the command.\n   *\n   * @param actor The GameActor to command.\n   * @param delta The game's delta between frames.\n   */\n  public abstract execute(actor: GameActor, delta: number): void;\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveEastCommand class.\n */\nexport class MoveEastCommand extends Command {\n\n  /**\n   * Executes the command.\n   *\n   * @param actor The GameActor to command.\n   * @param delta The game's delta between frames.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveE(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveNorthCommand class.\n */\nexport class MoveNorthCommand extends Command {\n\n  /**\n   * Executes the command.\n   *\n   * @param actor The GameActor to command.\n   * @param delta The game's delta between frames.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveN(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveSouthCommand class.\n */\nexport class MoveSouthCommand extends Command {\n\n  /**\n   * Executes the command.\n   *\n   * @param actor The GameActor to command.\n   * @param delta The game's delta between frames.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveS(delta);\n  }\n}\n","import { Command } from \"./Command\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The MoveWestCommand class.\n */\nexport class MoveWestCommand extends Command {\n\n  /**\n   * Executes the command.\n   *\n   * @param actor The GameActor to command.\n   * @param delta The game's delta between frames.\n   */\n  public execute(actor: GameActor, delta: number): void {\n    actor.moveW(delta);\n  }\n}\n","import { Command } from \"./Command\";\n\n/**\n * The NullCommand class.\n * This class is special in that it intentionally doesn't execute anything, in\n * so if a user doesn't have a mapped button, we don't have to check fo `null`.\n */\nexport class NullCommand extends Command {\n\n  /**\n   * Executes the command.\n   */\n  public execute(): void {}\n}\n","/**\n * @file The Command Barrel. Re-exports Command files for easier import\n * elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * The base command class.\n */\nexport * from './Command';\n\nexport * from './NullCommand';\n\nexport * from './MoveNorthCommand';\n\nexport * from './MoveSouthCommand';\n\nexport * from './MoveEastCommand';\n\nexport * from './MoveWestCommand';\n\n","/**\n * The Component interface.\n */\ninterface IComponent {}\n\n/**\n * The Component class\n * @abstract\n */\nexport abstract class Component {\n\n  /**\n   * @var typeId The type of the component.\n   */\n  protected typeId: string;\n\n  /**\n   * Accessor for the private member `typeId`.\n   *\n   * @returns The type id the Component.\n   */\n  public getTypeId(): string {\n    return this.typeId;\n  }\n\n}\n","import { EventContainer } from \"../types/globals\";\nimport { Component } from './Component';\n\n/**\n * The EventComponent interface.\n */\n interface IEventComponent {\n\n  /**\n   * The list of ES6 Events or CustomEvents that can be emitted.\n   */\n  attachedEvents: EventContainer;\n\n  /**\n   * Adds DOM Events to this component via an array of events.\n   *\n   * @param events The array of events to add.\n   */\n  attachMultiple(eventList: Array<Event|CustomEvent>): void;\n\n  /**\n   * Attaches a single event to this component. Attached components can be\n   * emitted.\n   *\n   * @param event An `Event` or `CustomEvent` that this EventComponent knows\n   * about.\n   */\n  attach(event: Event|CustomEvent): void;\n\n  /**\n   * Emits an event via the `game-pane` DOM element. Uses the string name of the\n   * event to lookup if it's in the attachedEvent member.\n   *\n   * @param eventName The event to emit.\n   */\n  emit(eventName: string): void;\n}\n\n/**\n * The EventComponent class.\n * @implements [[IEventComponent]]\n */\nexport class EventComponent extends Component implements IEventComponent {\n\n  /**\n   * @var attachedEvents The list of events that can be emitted.\n   */\n  public attachedEvents: EventContainer;\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    super();\n\n    this.typeId = \"EventComponent\";\n\n    // We need to declare this as an object otherwise we get a reference error\n    // when we try and assign events to it in the `attach` and `attachMultiple`\n    // methods.\n    this.attachedEvents = {};\n  }\n\n  /**\n   * Attaches a single event to this component. Attached components can be\n   * emitted.\n   *\n   * @param event An `Event` or `CustomEvent` that this EventComponent knows\n   * about.\n   */\n  public attach(event: Event|CustomEvent): void {\n    this.attachedEvents[event.type] = event;\n  }\n\n  /**\n   * Adds DOM Events to this component via an array of events.\n   *\n   * @param events The array of events to add.\n   */\n  public attachMultiple(eventList: Array<Event|CustomEvent>): void {\n    for (let event of eventList) {\n      this.attach(event);\n    }\n  }\n\n  /**\n   * Emits an event via the `game-pane` DOM element. Uses the string name of the\n   * event to lookup if it's in the attachedEvent member.\n   *\n   * @param eventName The event to emit.\n   */\n  public emit(eventName: string): void {\n    document.getElementById('game-pane')\n      .dispatchEvent(this.attachedEvents[eventName]);\n  }\n\n}\n","import { GameObject } from '../GameObject/GameObject';\nimport { Component } from './Component';\n\n/**\n * The Lifeforce component. Adds health to a GameObject. Adds life, health\n * regeneration, and death.\n *\n * This component is required for entities to be alive or dead, as well as take\n * damage.\n *\n * @extends [[Component]]\n */\nexport class LifeforceComponent extends Component implements Component {\n\n  /**\n   * The current HP of the GameObject.\n   */\n  private currentHP: number;\n\n  /**\n   * The maximum HP of the GameObject.\n   */\n  private maxHP: number;\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    super();\n\n    this.typeId = \"LifeforceComponent\";\n  }\n\n  /**\n   * Update is intended to be run once per frame.\n   *\n   * @param GO The GameObject this component belongs to.\n   */\n  public update(GO: GameObject): void {}\n\n}\n","import { Component } from \"./Component\";\nimport { GameActor } from \"../GameObject\";\n\n/**\n * The Movement component. Adds movement to a GameObject.\n *\n * This component is required for entities to be able to move around the world.\n *\n * @extends [[Component]]\n */\nexport class MovementComponent extends Component {\n\n  /**\n   * The speed at which the GameObject can move.\n   */\n  public speed: number;\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    super();\n\n    this.typeId = \"MovementComponent\";\n\n    this.speed = 100;\n  }\n\n  /**\n   * Move the Actor north.\n   * @param delta The game's delta between frames.\n   */\n   public moveN(actor: GameActor, delta: number): void {\n    // Decrementing {y} makes the actor move south, since we're dealing with a\n    // 2D array and not an actual mathematical grid plane.\n    actor.position.y -= this.speed * delta;\n  }\n\n  /**\n   * Move the Actor south.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveS(actor: GameActor, delta: number): void {\n    // Increasing {y} makes the actor move south, since we're dealing with a 2D\n    // array and not an actual mathematical grid plane.\n    actor.position.y += this.speed * delta;\n  }\n\n  /**\n   * Move the Actor east.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveE(actor: GameActor, delta: number): void {\n    actor.position.x += this.speed * delta;\n  }\n\n  /**\n   * Move the Actor west.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveW(actor: GameActor, delta: number): void {\n    actor.position.x -= this.speed * delta;\n  }\n\n}\n","/**\n * @file The Component Barrel. Re-exports Component files for easier import\n * elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * Progenitor classes for all Component classes in the game.\n */\nexport * from './Component';\n\n/**\n * The Event component. Allows an entiy to emit and/or listen for events.\n */\n export * from './EventComponent';\n\n/**\n * The Lifeforce component. Adds health and all that comes with it when attached\n * to an entity.\n */\nexport * from './LifeforceComponent';\n\n/**\n * The Movement component. Adds movement to a GameObject.\n */\n export * from './MovementComponent';\n","import { GameObject } from '../GameObject';\n\n/**\n * The PlayerDeathEvent class.\n */\nexport class PlayerDeathEvent {\n\n  /**\n   * Retrieves the native ES6 CustomEvent. [[CustomEvent]] allows the attachment\n   * of data via the `CustomEventInit` dictionary.\n   *\n   * @param player The player GameObject.\n   *\n   * @emits `player_died`\n   */\n  public static create(player: GameObject): CustomEvent {\n\n    let event = new CustomEvent('player_died', {\n      detail: {\n        'go_id': player.getId(),\n      }\n    });\n\n    return event;\n  }\n}\n","/**\n * @file The Event Barrel. Re-exports Event files for easier import elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * Progenitor classes for all entities in the game.\n */\n export * from './PlayerDeathEvent';\n","import { InputHandler } from \"./Input/InputHandler\";\nimport { Camera } from \"./Render/Camera/Camera\";\nimport { Renderer } from \"./Render/Renderer\";\n\n// Player\nimport { Player } from './GameObject';\n\n// Factories\n// TODO: Actor factories should be loaded per Scene, once the scene\n// functionality is created!\nimport {\n  PlayerFactory,\n  OrdinaryFolkFactory\n} from './GameObject';\n\n// Factories\n\n/**\n * The Game superclass. Operations to act upon the main game thread are found\n * here.\n */\nexport class FiendGame {\n\n  /**\n   * The input handler that accepts player input.\n   */\n  public InputHandler: InputHandler;\n\n  /**\n   * The renderer responsible for drawing to the screen.\n   */\n  public Renderer: Renderer;\n\n  /**\n   * The main camera\n   */\n  public Camera: Camera;\n\n  /**\n   * The canvas in the DOM. What the game is rendered on.\n   */\n  public canvas: HTMLCanvasElement;\n\n  /**\n   * The number of currently-active game objects.\n   *\n   * @type {number}\n   */\n  public gameObjectCount: number;\n\n  /**\n   * The list of active game objects. Every game object in this list will have\n   * their state updated every frame, if possible.\n   */\n  public gameObjects: Array<any>;\n\n  // TODO: This is a test! Actor factories should be loaded per Scene, once the\n  // scene functionality is created!\n  public OrdinaryFolkFactory: OrdinaryFolkFactory;\n  public PlayerFactory: PlayerFactory;\n\n  /**\n   * The instance of the Player's character.\n   */\n  public Player: Player;\n\n  /**\n   * The max amount of active game objects that can be present in the game.\n   * TODO: Figure out what happens if this limit is reached.\n   * @internal This could be an \"importance weight\" where less important game\n   * objects are purged.\n   */\n  public maxEntities: number;\n\n  /**\n   * The HTML wrapper for the game. Assume everything in this container is part\n   * of the game.\n   */\n  public container: HTMLElement;\n\n  /**\n   * How frequently the game state updates, ideally. Defaults to 60 Hz, 16.6\n   * frames-per-second.\n   */\n  public tickLength: number;\n\n  /**\n   * The most recently elapsed tick of the game clock.\n   */\n  public lastFrameTime: number;\n\n  /**\n   * The ID returned from our main loop's most recent call to\n   * requestAnimationFrame(). The token can then be used when we call\n   * cancelAnimationFrame() to stop the main loop by telling the browser to\n   * cancel the request that corresponds to our token.\n   */\n  public stopToken: number|null;\n\n  constructor(gamePaneWidth: number, gamePaneHeight: number) {\n\n    /**\n     * Create the game pane and canvas.\n     */\n    this.canvas = this.genCanvas(gamePaneWidth, gamePaneHeight);\n    this.container = document.getElementById(\"fiend-game\");\n    this.container.insertBefore(this.canvas, this.container.firstChild);\n\n    // TODO: This is a test to test event emission.\n    document.getElementById('game-pane').addEventListener(\n      'player_died',\n      (event: CustomEvent) => this.respondToGameObjectCreation(event),\n      false\n    );\n\n    this.stopToken = null;\n\n    this.tickLength = 60;\n\n    this.lastFrameTime = 0;\n\n    this.maxEntities = 1000;\n\n    this.Renderer = new Renderer(this.canvas);\n\n    this.InputHandler = new InputHandler();\n\n    this.Camera = new Camera();\n\n    this.gameObjectCount = 0;\n\n    // Instantiate Actor factories here as a test. We want to instantiate the\n    // factory so the memory is allocated when the Scene is loaded.\n    // TODO: Actor factories should be loaded per Scene, once the scene\n    // functionality is created!\n    this.OrdinaryFolkFactory = new OrdinaryFolkFactory();\n    this.PlayerFactory = new PlayerFactory();\n    this.Player = this.PlayerFactory.spawn({x:125,y:125});\n\n    this.gameObjects = [\n      // TODO This is a test, do should be empty on init.\n      this.Player,\n      this.OrdinaryFolkFactory.spawn({x:200,y:100}),\n    ];\n\n    console.log('this.gameObjects :', this.gameObjects);\n\n    // Let's kick off the game loop!\n    this.main(performance.now());\n  }\n\n  /**\n   * Generates a new canvas DOM canvas element. The game will run in this\n   * canvas.\n   *\n   * @param {number} w The width of the canvas, in pixels.\n   * @param {number} h The height of the canvas, in pixels.\n   */\n  private genCanvas(w: number, h: number): HTMLCanvasElement {\n    let canvas = document.createElement('canvas');\n    canvas.id = \"game-pane\";\n    canvas.width = w;\n    canvas.height = h;\n    canvas.tabIndex = 1;\n\n    return canvas;\n  }\n\n  public respondToGameObjectCreation(event: CustomEvent) {\n    console.log('event.detail.go_id :', event.detail.go_id);\n  }\n\n  /**\n   * Calculates the game state as of a given point in time. It is the authority\n   * for game state. The delta should be used in calculations to make the game\n   * simulation framerate independent.\n   *\n   * @param {float} delta  The difference in time between this frame and last\n   * frame, in seconds.\n   */\n  private _update(delta: number): void {\n    // TODO Remove clog.\n    // console.log('delta :', delta);\n    for (let i=0; i<this.gameObjectCount; i++) {\n      this.gameObjects[i].update(delta);\n    }\n\n    this.gameObjectCount = this.gameObjects.length;\n  }\n\n  /**\n   * Responsible for drawing the current game state to the screen.\n   */\n  private _draw(): void {\n\n    // Draw the scene.\n    this.Renderer.draw(this.gameObjectCount, this.gameObjects);\n  }\n\n  /**\n   * Stops the main game loop.\n   */\n  private stopMainLoop(): void {\n    window.cancelAnimationFrame(this.stopToken);\n    console.log(\"Goodbye...\");\n  }\n\n  /**\n   * Attempts to gracefully tear down the game.\n   */\n  public shutdownGame(): void {\n    this.stopMainLoop();\n  }\n\n/**\n  * The main game loop. We use requestAnimationFrame to be thread-safe and not\n  * dominate the browser when the player blurs focus on our tab.\n  *\n  * render() is passed tFrame because it is assumed that the render method will\n  *          calculate how long it has been since the most recently passed\n  *          update tick for extrapolation (purely cosmetic for fast devices).\n  *          It draws the scene.\n  *\n  * update() calculates the game state as of a given point in time.\n  *\n  * init()   Performs whatever tasks are needed before the main loop can run.\n  *\n  *\n  * @param {DOMHighResTimeStamp} tFrame The number of milliseconds since\n  * navigationStart (when the previous document is unloaded.\n  * window.requestAnimationFrame() always provides a DOMHighResTimeStamp to\n  * callbacks as an argument when they are executed.\n  */\n  public main(tFrame: DOMHighResTimeStamp): void {\n    // Store the ID returned from our main loop's most recent call to\n    // requestAnimationFrame().\n    this.stopToken = window.requestAnimationFrame(this.main.bind(this));\n\n    // Delta should be in seconds, not ms, so we divide by 1000.\n    let delta = (tFrame - this.lastFrameTime) / 1000.0;\n    // Keep track of when the last frame happened.\n    this.lastFrameTime = tFrame;\n\n    this.InputHandler.handleInput(this.Player, delta);\n    this._update(delta);\n    this._draw();\n  }\n\n}\n","import { GameActor } from \"../GameActor\";\nimport { Coordinate } from \"../../../types/globals\";\n\n/**\n * The ActorFactory class. Used for common actors such as common enemies,\n * wildlife, generic NPCs, etc. Allows us to implement the \"Type Object\"\n * pattern.\n *\n * The benefit here is twofold:\n * 1) We can define the Actor's properties in an external file, say, JSON, then\n * create a new Actor with those properties when a Scene is loaded.\n * 2) We can change the type of the Actor on the fly without recreating it.\n */\nexport abstract class ActorFactory {\n\n  /**\n   * The string unique label for the Actor type.\n   */\n  public label: string;\n\n  /**\n   * Factory method for creating a new Npc of a specific type.\n   * For reference, check out the Type Object (factory) pattern.\n   *\n   * @param position The starting position of the spawned Actor.\n   *\n   * @return The spawned GameActor.\n   */\n  protected abstract spawn(position: Coordinate): GameActor;\n}\n","import {\n  ActorFactory,\n  OrdinaryFolk\n} from '../../../GameObject';\n\nimport {\n  LifeforceComponent,\n  MovementComponent\n} from \"../../../Component\";\n\nimport { Coordinate } from '../../../types/globals';\n\n/**\n * The OrdinaryFolkFactory class. This is used to spawn non-unique,\n * humanoid-like GameActors aka \"Folks.\"\n */\nexport class OrdinaryFolkFactory extends ActorFactory {\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    super();\n\n    this.label = \"ordinary_folk\";\n  }\n\n  /**\n   * Factory method for creating a new Npc of type OrdinaryFolk.\n   * For reference, check out the Type Object (factory) pattern.\n   *\n   * @param position The starting position of the spawned Actor.\n   *\n   * @return The spawned GameActor.\n   */\n  public spawn(position: Coordinate): OrdinaryFolk {\n    let npc = new OrdinaryFolk(this, position);\n\n    npc.addComponent(new MovementComponent());\n    npc.addComponent(new LifeforceComponent());\n\n    return npc;\n  }\n}\n","import {\n  ActorFactory,\n  Player\n} from '../../../GameObject';\n\n\nimport {\n  LifeforceComponent,\n  MovementComponent,\n  EventComponent\n} from \"../../../Component\";\n\nimport { Coordinate } from '../../../types/globals';\nimport { PlayerDeathEvent } from '../../../Event';\n\n/**\n * The Player class. This is used to spawn a Player character.\n */\nexport class PlayerFactory extends ActorFactory {\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    super();\n\n    this.label = \"player_1\";\n  }\n\n  /**\n   * Factory method for creating a new Npc of type OrdinaryFolk.\n   * For reference, check out the Type Object (factory) pattern.\n   *\n   * @param position The starting position of the spawned Actor.\n   *\n   * @return The spawned GameActor.\n   */\n  public spawn(position: Coordinate): Player {\n    let player = new Player(this, position);\n\n    player.addComponent(new EventComponent());\n    player.addComponent(new LifeforceComponent());\n    player.addComponent(new MovementComponent());\n\n    // Attach some Player-specific events.\n    player.getComponent(\"EventComponent\")\n      .attach(PlayerDeathEvent.create(player));\n\n    return player;\n  }\n}\n","import { GameObject } from '../../GameObject';\nimport { Component } from '../../Component';\nimport { ComponentContainer, Coordinate } from '../../types/globals';\n\n/**\n * The interface for the [[GameActor]] class.\n *\n * @interface IGameActor\n */\ninterface IGameActor {\n\n  /**\n   * The position member. Signifies the location of the of the GameObject.\n   */\n  position: Coordinate;\n\n  /**\n   * Defines the signature for the update method for the GameActor.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  update(delta: number): void;\n\n  /**\n   * Attaches a Component to a `GameActor` instance.\n   *\n   * @param component The Component to be attached.\n   *\n   * @return If the Component was successfully attached or not.\n   */\n  addComponent(component: Component): boolean;\n\n  /**\n   * Removes a Component from a `GameActor` instance.\n   *\n   * @param key The lookup key for the Component to be removed from this\n   * GameActor. Usually this is the Component's `typeId` as a string.\n   *\n   * @return If the Component was successfully removed or not.\n   */\n  removeComponent(key: string): boolean;\n\n  /**\n   * Checks to see if a Component is attached to a `GameActor` instance.\n   *\n   * @param key The key to use as a look up. Usually this is the Component's\n   * `typeId` as a string.\n   *\n   * @return If the Component is attached to this GameActor.\n   */\n  hasComponent(key: string): boolean;\n\n  /**\n   *  Gets a Component attached to a `GameActor` instance.\n   *\n   * @param key The key to use as a look up. Usually this is the Component's\n   * `typeId` as a string.\n   *\n   * @return The desired attached Component, or null if it's not attached.\n   */\n  getComponent(key: string): Component|null;\n\n  /**\n   * Retrieves the list of Components attached to a `GameActor` instance.\n   *\n   * @return The list of attached Components.\n   */\n  listComponents(): Array<string>;\n\n}\n\n/**\n * The base GameActor class. All GameObjects that can influence things in the\n * environment will derive from the GameActor class.\n * @abstract\n * @extends [[GameObject]] The GameObject base abstract class.\n * @implements [[IGameActor]]\n */\nexport abstract class GameActor extends GameObject implements IGameActor {\n\n  /**\n   * @var position The position of the GameObject.\n   */\n  public position: Coordinate;\n\n  /**\n   * @var components The container for all the actor's components.\n   */\n  protected components: ComponentContainer;\n\n  /**\n   * @constructor\n   *\n   * @param position The starting position of the spawned Actor.\n   */\n  constructor(position: Coordinate) {\n    super();\n\n    this.position = position;\n\n    // We need to declare this as an object otherwise we get a reference error\n    // when we try and assign Components to it with addComponent().\n    this.components = {};\n  }\n\n  /**\n   * Adds a Component to the GameActor's `ComponentContainer`, if it's not\n   * already attached.\n   *\n   * @param component The Component to be attached.\n   *\n   * @return If the Component was successfully attached or not.\n   */\n  public addComponent<K extends keyof ComponentContainer>(component: ComponentContainer[K]): boolean {\n    let typeId = component.getTypeId();\n\n    if (this.hasComponent(typeId)) {\n      // TODO: Make this a real exception.\n      console.log('addComponentError :', `A ${typeId} Component is already attached to this GameActor(id:${this.getId()})`);\n      return false;\n    }\n\n    this.components[typeId] = component;\n    return true;\n  }\n\n  /**\n   * Removes a Component from the GameActor's `ComponentContainer`, if it's\n   * attached.\n   *\n   * @param key The lookup key for the Component to be removed from this\n   * GameActor. Usually this is the Component's `typeId` as a string.\n   *\n   * @return If the Component was successfully removed or not.\n   */\n  public removeComponent(key: string): boolean {\n\n    if (this.hasComponent(key)) {\n      delete this.components[key];\n      return true;\n    }\n\n    // TODO: Make this a real exception.\n    console.log('removeComponentError :', `Cannot remove Component ${key} since one's not attached to this GameActor(id:${this.getId()})`);\n  }\n\n  /**\n   * Checks to see if a Component is attached to this GameActor via the\n   * `ComponentContainer` list.\n   *\n   * @param key The key to use as a look up. Usually this is the Component's\n   * `typeId` as a string.\n   *\n   * @return If the Component is attached to this GameActor.\n   */\n  public hasComponent(key: string): boolean {\n    return this.components[key] === undefined ? false : true;\n  }\n\n  /**\n   * Gets a Component attached to this GameActor.\n   *\n   * @see https://stackoverflow.com/questions/58573975\n   *\n   * @param key The key to use as a look up. Usually this is the Component's\n   * `typeId` as a string. It must be a key defined in the `ComponentContainer`\n   * type.\n   *\n   * @return The desired attached Component, or null if it's not attached.\n   */\n  public getComponent<K extends keyof ComponentContainer>(\n    key: K\n  ): ComponentContainer[K] {\n    if (this.hasComponent(key)) {\n      return this.components[key];\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieves the list of Components attached to this GameActor.\n   *\n   * @return The list of attached Components.\n   */\n  public listComponents(): Array<string> {\n    return Object.keys(this.components);\n  }\n\n  /**\n   * The update method for the abstract GameActor class.\n   *\n   * @abstract\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public abstract update(delta: number): void;\n\n  // TODO: Make a subclass that has movement. Not all actors will, I dont think.\n  public moveN(delta: number): void {}\n  public moveS(delta: number): void {}\n  public moveE(delta: number): void {}\n  public moveW(delta: number): void {}\n}\n","import { GameActor } from './GameActor';\nimport { ActorFactory } from '../../GameObject';\nimport { Coordinate } from '../../types/globals';\n\n/**\n * The Npc class. All non-player characters are Npcs, unlike some games where\n * there is a `Monster` class for all hostile actors.The reasoning is that in\n * Fiend, any non-player character can be a friend or foe, depending on how the\n * player acts.\n */\nexport class Npc extends GameActor {\n\n  /**\n   * The actor's type.\n   */\n  protected _type: ActorFactory;\n\n  /**\n   * @constructor\n   *\n   * @param actorType The Actor's type.\n   * @param position The starting position of the spawned Actor.\n   */\n  public constructor(actorType: ActorFactory, position: Coordinate) {\n    super(position);\n\n    this._type = actorType;\n  }\n\n  /**\n   * The update method for the Npc class.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public update(delta: number): void {}\n\n}\n","import {\n  ActorFactory,\n  Npc\n} from '../../GameObject';\n\nimport { Coordinate } from '../../types/globals';\n\n/**\n * The OrdinaryFolk class. Ordinary Folks are generally benign NPCs to populate\n * the world.\n */\nexport class OrdinaryFolk extends Npc {\n\n  /**\n   * @constructor\n   *\n   * @param actorType The Actor's type.\n   * @param position The starting position of the spawned Actor.\n   */\n  public constructor(actorType: ActorFactory, position: Coordinate) {\n    super(actorType, position);\n  }\n\n  /**\n   * The update method for the Npc class.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public update(delta: number): void {}\n\n  /**\n   * Draws the NPC entity.\n   * TODO: This should be moved to the Render component once it's done.\n   *\n   * @param ctx The canvas context.\n   */\n  public draw(ctx: CanvasRenderingContext2D): void {\n    ctx.beginPath();\n    ctx.rect(this.position.x, this.position.y, 20, 20);\n    ctx.fillStyle = \"#FF0000\";\n    ctx.fill();\n    ctx.closePath();\n  }\n\n}\n","import {\n  GameActor,\n  ActorFactory\n} from '../../GameObject';\nimport { Coordinate } from '../../types/globals';\n\n/**\n * The interface for the [[Player]] class.\n *\n * @interface IPlayer\n */\ninterface IPlayer {\n\n  /**\n   * Move the Player north.\n   *\n   * @param delta The game's delta between frames.\n   */\n  moveN(delta: number): void;\n\n  /**\n   * Move the Player south.\n   *\n   * @param delta The game's delta between frames.\n   */\n  moveS(delta: number): void;\n\n  /**\n   * Move the Player east.\n   *\n   * @param delta The game's delta between frames.\n   */\n  moveE(delta: number): void;\n\n  /**\n   * Move the Player west.\n   *\n   * @param delta The game's delta between frames.\n   */\n  moveW(delta: number): void;\n}\n\n/**\n * The Player class. Keeps track of the state of the player including all\n * attributes and stats.\n *\n * @abstract\n * @extends [[GameActor]] The GameObject base abstract class.\n * @implements [[IPlayer]]\n */\nexport class Player extends GameActor implements IPlayer {\n\n  /**\n   * The actor's type.\n   */\n  protected _type: ActorFactory;\n\n  /**\n   * @constructor\n   *\n   * @param actorType The Actor's type.\n   * @param position The starting position of the Player.\n   */\n   constructor(actorType: ActorFactory, position: Coordinate) {\n    super(position);\n\n    this._type = actorType;\n  }\n\n  /**\n   * Updates the Player's state. Intended to be run in the main game loop.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public update(delta: number): void {\n    // this._eventComponent.emit('player_died');\n    // TODO: console.log('this.position :', this.position);\n  }\n\n  /**\n   * Draws the Player entity\n   *\n   * @param ctx The canvas context.\n   */\n   public draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(this.position.x, this.position.y, 10, 0, Math.PI*2);\n    ctx.fillStyle = \"#0095DD\";\n    ctx.fill();\n    ctx.closePath();\n  }\n\n\n  /**\n   *    |               .    ||\n   *   |||      ....  .||.  ...    ...   .. ...    ....\n   *  |  ||   .|   ''  ||    ||  .|  '|.  ||  ||  ||. '\n   *  .''''|.  ||       ||    ||  ||   ||  ||  ||  . '|..\n   * .|.  .||.  '|...'  '|.' .||.  '|..|' .||. ||. |'..|'\n   */\n\n  /**\n   * Move the Player north.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveN(delta: number): void {\n    if (this.hasComponent(\"MovementComponent\")) {\n      this.getComponent(\"MovementComponent\").moveN(this, delta);\n    }\n  }\n\n  /**\n   * Public API for the MovementComponent\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveS(delta: number): void {\n    if (this.hasComponent(\"MovementComponent\")) {\n      this.getComponent(\"MovementComponent\").moveS(this, delta);\n    }\n  }\n\n  /**\n   * Move the Player east.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveE(delta: number): void {\n    if (this.hasComponent(\"MovementComponent\")) {\n      this.getComponent(\"MovementComponent\").moveE(this, delta);\n    }\n  }\n\n  /**\n   * Move the Player west.\n   *\n   * @param delta The game's delta between frames.\n   */\n  public moveW(delta: number): void {\n    if (this.hasComponent(\"MovementComponent\")) {\n      this.getComponent(\"MovementComponent\").moveW(this, delta);\n    }\n  }\n\n}\n","/**\n * The interface for the [[GameObject]] class.\n *\n * @interface IGameObject\n */\ninterface IGameObject {\n\n  /**\n   * Accessor for the private member `id`.\n   *\n   * @returns The id of the GameObject\n   */\n   getId(): number;\n\n  /**\n   * Defines the signature for the update method for the GameActor.\n   *\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  update(delta: number): void;\n}\n\n/**\n * The GameObject abstract class. All game entities inherit from this class.\n * On instantiation, the class will generate an auto-incrementing id for use\n * in identifying the newly-created GameObject.\n *\n * @abstract\n */\nexport abstract class GameObject implements IGameObject {\n\n  /**\n   * @var idIncrementor Keeps track of the `id` of the last GameObject\n   instantiated.\n   *\n   * @static\n   */\n  private static idIncrementor: number = 1;\n\n  /**\n   * @var id The id of the instance of the GameObject.\n   */\n  private id: number;\n\n  /**\n   * @constructor\n   * Auto-increments the GameOject id for the new GameObject being created.\n   */\n  public constructor() {\n    this.id = GameObject.idIncrementor++;\n  }\n\n  /**\n   * Accessor for the private member `id`.\n   *\n   * @returns The id of the GameObject\n   */\n  public getId(): number {\n    return this.id;\n  }\n\n  /**\n   * Updates the GameObject's state. Intended to be run in the main game loop.\n   *\n   * @abstract\n   * @param delta The time difference between frames. Provided by the game's\n   * main game loop.\n   * @see FiendGame.main()\n   */\n  public abstract update(delta: number): void;\n\n}\n","/**\n * @file The GameObject Barrel. Re-exports GameObject files for easier import\n * elsewhere.\n * @see @link https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\n */\n\n/**\n * Progenitor classes for all entities in the game.\n */\nexport * from './GameObject';\n\n/**\n * The base GameActor class. All GameObjects that can influence things in the\n * environment will derive from the GameActor class.\n */\nexport * from './GameActor/GameActor';\n\n/**\n * The base Npc class.\n */\nexport * from './GameActor/Npc';\n\n/**\n * The ordinary folk npc class.\n */\nexport * from './GameActor/OrdinaryFolk';\n\n/**\n * The player character class.\n */\nexport * from './GameActor/Player';\n\n/**\n * The base Actor factory class.\n */\nexport * from './GameActor/ActorFactory/ActorFactory';\n\n/**\n * The OrdinaryFolk factory class.\n */\nexport * from './GameActor/ActorFactory/OrdinaryFolkFactory';\n\n/**\n * The Player factory class.\n */\nexport * from './GameActor/ActorFactory/PlayerFactory';\n","import { Command } from \"../Command\";\nimport { GameActor } from '../GameObject';\n\nimport { NullCommand } from \"../Command\";\nimport { MoveNorthCommand } from \"../Command\";\nimport { MoveSouthCommand } from \"../Command\";\nimport { MoveEastCommand } from \"../Command\";\nimport { MoveWestCommand } from \"../Command\";\n\n/**\n * The interface for the InputHandler\n */\ninterface IInputHandler {\n\n  /**\n   * Binds an input to a command.\n   *\n   * @param event The user interaction with a keyboard.\n   * @param command\n   */\n  keyBind(event: KeyboardEvent, command: Command): void;\n\n  /**\n   * Handles any input if a mapped button is pressed. Run once per game update\n   * tick.\n   *\n   * @param actor The game actor entity to handle input. Most likely will be the\n   * Player(s).\n   * @param delta The\n   */\n  handleInput(actor: GameActor, delta: number): void;\n}\n\n/**\n * The IInputMap interface.\n * @keys\n * [key]: The name of the key pressed, sent by the browser.header\n * [command]: The mapped command to be executed.\n * [status]: The button's current status\n */\ninterface IInputMap {\n  [key: string]: {\n    command: Command,\n    status: ButtonStatus\n  }\n}\n\n/**\n * The built-in control scheme types. Allows a user to change the control scheme\n * without remapping all the keys individually.\n *\n * @type {enum} ControlSchemes\n */\nenum ControlSchemes {\n  DEFAULT,\n  FPS,\n  ONEHANDED_RIGHT,\n  ONEHANDED_LEFT,\n}\n\n/**\n * Maps a button to a keyboard input key.\n *\n * @type {enum} Button\n */\nenum Button {\n  UP = \"ArrowUp\",\n  DOWN = \"ArrowDown\",\n  LEFT = \"ArrowLeft\",\n  RIGHT = \"ArrowRight\",\n  E = \"e\",\n  Q = \"q\",\n  BSPACE = \"Backspace\",\n  ENTER = \"Enter\",\n  SHIFT = \"Shift\",\n}\n\n/**\n * The ButtonStatus enum.\n * @values\n * [PRESSED]: The button is pressed.\n * [RAISED]: The button is NOT pressed, it is raised. Also can be considered\n * \"untouched\" by the player.\n * [HELD]: The button is held down.\n * [RELEASED]: The button has been released from a pressed state.\n * [DISABLED]: The button has been disabled and will not fire events.\n *\n * @type {enum} ButtonStatus\n */\n enum ButtonStatus {\n  PRESSED,\n  RAISED,\n  HELD,\n  RELEASED,\n  DISABLED,\n}\n\n/**\n * The InputHandler class.\n */\nexport class InputHandler implements IInputHandler {\n\n  /**\n   * TODO Structure should add [\"context\"] so we can have context-independent\n   * buttons\n   * @type {IInputMap} The inputMap instance.\n   */\n  private inputMap: IInputMap;\n\n  /**\n   * The InputHandler constructor.\n   * Attaches the keydown and keyup KeyboardEvent to the document.\n   */\n  constructor() {\n\n    document.getElementById('game-pane').addEventListener(\n      'keydown', (event) => this.buttonPressed(event), false\n    );\n\n    document.getElementById('game-pane').addEventListener(\n      'keyup', (event) => this.buttonReleased(event), false\n    );\n\n    this.inputMap = this.initInputMap();\n\n    // TODO: This should read in user-defined input mappings, otheriwse load\n    // default settings. (if user has saved control scheme, else load default)\n    this.loadControlScheme(ControlSchemes.DEFAULT);\n  }\n\n  /**\n   * Binds an input to a command.\n   *\n   * @param {KeyboardEvent} event The key to bind the event to\n   * @param {Command} command The command to bind to the button\n   */\n  public keyBind(event: KeyboardEvent, command: Command): void {\n    this.inputMap[event.key].command = command;\n  }\n\n  /**\n   * Determins if a button was pressed. Callback for when a button is pressed by\n   * the user.\n   *\n   * @param {KeyboardEvent} event The user interaction with a keyboard.\n   */\n  public buttonPressed(event: KeyboardEvent): void {\n    event.preventDefault();\n\n    if (this.inputMap[event.key]) {\n      this.inputMap[event.key].status = ButtonStatus.PRESSED;\n    }\n  }\n\n  /**\n   * Callback for when a button is released by the user.\n   *\n   * @param {KeyboardEvent} event The user interaction with a keyboard.\n   */\n  public buttonReleased(event: KeyboardEvent): void {\n    event.preventDefault();\n\n    if (this.inputMap[event.key]) {\n      this.inputMap[event.key].status = ButtonStatus.RAISED;\n    }\n  }\n\n  /**\n   * Handles user input. Runs once per game loop.\n   */\n  public handleInput(actor: GameActor, delta: number): void {\n\n    if (this.inputMap[Button.UP].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.UP].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.DOWN].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.DOWN].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.LEFT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.LEFT].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.RIGHT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.RIGHT].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.E].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.E].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.Q].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.Q].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.BSPACE].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.BSPACE].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.ENTER].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.ENTER].command.execute(actor, delta);\n    }\n    if (this.inputMap[Button.SHIFT].status === ButtonStatus.PRESSED) {\n      this.inputMap[Button.SHIFT].command.execute(actor, delta);\n    }\n  }\n\n  /**\n   * Initializes an input map so the structure is available when needed.\n   *\n   * @return {IInputMap} The IInputMap interface.\n   */\n  private initInputMap(): IInputMap {\n    let ip = {};\n\n    for(let buttonKey in Button) {\n      ip[Button[buttonKey]] = {\n        command: NullCommand,\n        status: ButtonStatus.RAISED\n      }\n    }\n\n    return ip;\n  }\n\n  /**\n   * Loads a control scheme when the game first initializes, so the player can\n   * have some input. Supports multiple control schemes so players can re-map\n   * controls without having to re-map each button individually.\n   *\n   * @param controlScheme\n   */\n  private loadControlScheme(controlScheme: ControlSchemes): void {\n    switch(controlScheme) {\n      case 1:\n        break;\n      default:\n        // this.inputMap[Button.UP].command = new MoveNorthCommand(player: GameActor);\n        this.inputMap[Button.UP].command = new MoveNorthCommand();\n        this.inputMap[Button.DOWN].command = new MoveSouthCommand();\n        this.inputMap[Button.LEFT].command = new MoveWestCommand();\n        this.inputMap[Button.RIGHT].command = new MoveEastCommand();\n        this.inputMap[Button.E].command = new NullCommand();\n        this.inputMap[Button.Q].command = new NullCommand();\n        this.inputMap[Button.BSPACE].command = new NullCommand();\n        this.inputMap[Button.ENTER].command = new NullCommand();\n        this.inputMap[Button.SHIFT].command = new NullCommand();\n    }\n  }\n}\n\n// var key = {\n//   BACKSPACE: 8,\n//   TAB:       9,\n//   RETURN:   13,\n//   ESC:      27,\n//   SPACE:    32,\n//   PAGEUP:   33,\n//   PAGEDOWN: 34,\n//   END:      35,\n//   HOME:     36,\n//   LEFT:     37,\n//   UP:       38,\n//   RIGHT:    39,\n//   DOWN:     40,\n//   INSERT:   45,\n//   DELETE:   46,\n//   ZERO:     48, ONE: 49, TWO: 50, THREE: 51, FOUR: 52, FIVE: 53, SIX: 54, SEVEN: 55, EIGHT: 56, NINE: 57,\n//   A:        65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90,\n//   TILDA:    192\n// };\n","import { Coordinate } from \"../../types/globals\";\n\ninterface ICamera {\n\n  /**\n   * The current position of the camera.\n   */\n  position: Coordinate;\n\n  /**\n   * The width of the Camera's viewport.\n   */\n  width: number;\n\n  /**\n   * The height of the Camera's viewport.\n   */\n  height: number;\n\n  /**\n   * The limit for the camera's position — The lower limit will nearly always be\n   * (0,0). The upper limit is equal to the size of the world minus the size of\n   * the camera's viewport.\n   */\n  maxX: number;\n\n  /**\n   * The limit for the camera's position — The lower limit will nearly always be\n   * (0,0). The upper limit is equal to the size of the world minus the size of\n   * the camera's viewport.\n   */\n  maxY: number;\n\n}\n\nexport class Camera implements ICamera {\n\n  position: Coordinate;\n  width: number;\n  height: number;\n  maxX: number;\n  maxY: number;\n\n  constructor() {}\n\n}\n","import { MapBase } from \"../../atlases/MapBase\";\nimport { Overworld } from \"../../atlases/Overworld\";\n\nexport class Renderer {\n\n  EMPTY_TILE: number;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  pixels: number;\n  scale: number;\n  sceneWidth: number;\n  sceneHeight: number;\n\n  /**\n   * TODO: Change this to be the scene. Recreate the Renderer when a new scene\n   * is loaded.\n   */\n  protected _currentMap: MapBase;\n\n  constructor(canvas: HTMLCanvasElement) {\n\n    this.canvas = canvas;\n\n    /**\n     * The canvas context.\n     *\n     * @var {CanvasRenderingContext2D}\n     */\n     this.ctx = this.canvas.getContext('2d');\n\n    /**\n     * Prevent anti-aliasing in the event a tile gets scaled.\n     *\n     * @property {CanvasRenderingContext2D.imageSmoothingEnabled}\n     */\n     this.ctx.imageSmoothingEnabled = false;\n\n    /**\n     * The empty tile value. If this value is set for a position in a map's\n     * array, it will not be rendered.\n     * TODO: Move this to the Scene.\n     *\n     * @var {integer}\n     */\n    this.EMPTY_TILE = 0;\n\n    /**\n     * Multiplier for x,y position to pixels. What size the tiles for the game\n     * will be rendered at. Always use a power of 2 so the scaling prevents\n     * blurring.\n     *\n     * @var {integer}\n     */\n    this.pixels = 32;\n\n    /**\n     * The scale at which the tile will be rendered. 1 = 1x scaling, 2 = 2x\n     * scaling, etc.\n     *\n     * @var {integer}\n     */\n    this.scale = 1;\n\n    this._currentMap = new Overworld();\n  }\n\n  draw(gameObjectCount: number, gameObjects: Array<any>) {\n\n    // Clear the screen\n    // TODO: Pull this out. Put in renderer.\n    this.ctx.clearRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height\n    );\n\n    // Always store the texture in a var so we don't call \"new Foo()\" multiple\n    // times a second.\n    this.drawTileMap(this._currentMap);\n\n    for (let i=0; i<gameObjectCount; i++) {\n      gameObjects[i].draw(this.ctx);\n    }\n  }\n\n  /**\n   * Renders a map according to the coordinates given in the map's file by\n   * translating the coordinates to a spritesheet.\n   *\n   * If a tile is 32x32 pixels, the 1st tile will start at (0,0) on\n   * the spritesheet, the 2nd tile will start at (32,0), the 34d at (64,0) and\n   * so on.\n   *\n   * +---+---+---+---+\n   * | 1 | 2 | 3 | 4 |\n   * +---+---+---+---+\n   * | 5 | 6 | 7 | 8 |\n   * +---+---+---+---+\n   *\n   * 'source x' and 'source y' will get the correct coords in the image file.\n   * So for our first tile, '1', drawImage will grab the subimage at (32,0).\n   * drawImage would get the subimage at (64,32) for tile '7'.\n   *\n   * TODO  https://hashrocket.com/blog/posts/using-tiled-and-canvas-to-render-game-screens\n   *\n   * @param {Object} map  The map object that extends MapBase.\n   */\n  drawTileMap(map: MapBase): void {\n    for (let x=0; x<map.cols; x++) {\n      for (let y=0; y<map.rows; y++) {\n        let tile = map.getTile(x, y);\n\n        // Let's skip rendering empty tiles.\n        if (tile !== this.EMPTY_TILE) {\n          this.ctx.drawImage(\n            // Image Source\n            map.SM,\n            // Source x (See example in comment block)\n            ((tile - 1) % map.cols) * this.pixels,\n            // Source y (See example in comment block)\n            Math.floor(((tile - 1) / map.rows)) * this.pixels,\n            // Source width\n            this.pixels,\n            // Source height\n            this.pixels,\n            // Target x\n            x * (this.pixels * this.scale),\n            // Target y\n            y * (this.pixels * this.scale),\n            // Target width\n            this.pixels * this.scale,\n             // Target height\n            this.pixels * this.scale,\n          );\n        }\n      }\n    }\n  }\n}\n","import { FiendGame } from \"./engine/FiendGame\";\nimport { AssetLoader } from \"./engine/AssetLoader\";\n\n/**\n * We need some global variables so we can load the game and the assets. Let's\n * consider moving the F_LOADER to it's own class so we don't need a global for\n * the assets.\n */\ndeclare global {\n  interface Window {\n    F_LOADER: AssetLoader;\n  }\n}\n\n/**\n * Create a new instance of FiendGame, which loads the game.\n */\nfunction init() {\n\n  // Init functionality, for now.\n  new FiendGame(640, 480);\n  // Focus the game pane on page load.\n  document.getElementById('game-pane').focus();\n};\n\n/**\n * Ensure the assets are loaded before we initialize the game. We do this with a\n * promise to ensure all the images are loaded and ready to be used.\n * TODO Make this better, more TypeScript-y.\n */\n window.onload = function() {\n\n  window.F_LOADER = new AssetLoader();\n  var p = window.F_LOADER.initAssets();\n  Promise.all(p).then( () => {\n    init();\n  });\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
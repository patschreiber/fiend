{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/engine/FiendGame.ts","src/engine/Renderer/Renderer.ts","src/entities/Enemy.ts","src/main.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { Enemy } from \"../entities/Enemy\";\n\n/**\n * The Game superclass. Operations to act upon the main game thread are found\n * here.\n */\nexport class FiendGame {\n\n  public canvas: HTMLCanvasElement;\n  public gameObjectCount: number;\n  public gameObjects: Array<Enemy>;\n\n  public ctx: CanvasRenderingContext2D;\n  \n  protected container: HTMLElement;\n  stopToken: number|null;\n  tickLength: number;\n  lastFrameTime: number;\n  maxEntities: number;\n\n  constructor(gamePaneWidth: number, gamePaneHeight: number) {\n\n    /**\n     * \n     */\n    this.canvas = this.genCanvas(gamePaneWidth, gamePaneHeight);\n    this.container = document.getElementById(\"fiend-game\");\n    this.container.insertBefore(this.canvas, this.container.firstChild);\n    this.ctx = this.canvas.getContext('2d');\n\n    /**t\n     * Prevent anti-aliasing in the event a tile gets scaled.\n     * \n     * @property {CanvasRenderingContext2D.imageSmoothingEnabled}\n     */\n    this.ctx.imageSmoothingEnabled = false;\n\n    /**\n     * The ID returned from our main loop's most recent call to\n     * requestAnimationFrame(). The token can then be used when we call\n     * cancelAnimationFrame() to stop the main loop by telling the browser to\n     * cancel the request that corresponds to our token.\n     * @type {number}\n     */\n    this.stopToken = null;\n\n    /**\n     * How frequently the game state updates. It is 16.66 Hz (60ms)\n     * @type {number}\n     */\n    this.tickLength = 60;\n\n    /**\n     * The most recently elapsed tick of the game clock.\n     * @type {double} DOMHighResTimeStamp\n     */\n    this.lastFrameTime = 0;\n\n    this.maxEntities = 1000;\n\n    this.gameObjectCount = 0;\n\n    /**\n     * The list of active game objects to be updated each framr\n     */\n    this.gameObjects = [\n      new Enemy(),\n    ];\n  }\n\n  /**\n   * \n   * @param {integer} w The width of the canvas, in pixels. \n   * @param {integer} h The height of the canvas, in pixels.\n   */\n  genCanvas(w: number, h: number): HTMLCanvasElement {\n    let canvas = document.createElement('canvas');\n    canvas.id = \"game-pane\";\n    canvas.width = w;\n    canvas.height = h;\n\n    return canvas;\n  }\n\n  /**\n   * Calculates the game state as of a given point in time. It is the authority\n   * for game state. The delta should be used in calculations to make the game\n   * simulation framerate independent.\n   *\n   * @param {float} delta  The difference in time between this frame and last\n   * frame, in seconds.\n   */\n  update(delta: number): void {\n    for (let i=0; i<this.gameObjectCount; i++) {\n      this.gameObjects[i].update(delta);\n    }\n\n    this.gameObjectCount = this.gameObjects.length;\n  }\n\n  /**\n   * Stops the main game loop.\n   */\n  stopMainLoop(): void {\n    window.cancelAnimationFrame(this.stopToken);\n    console.log(\"Goodbye...\");\n  }\n\n  /**\n   * Attempts to gracefully tear down the game.\n   */\n  shutdownGame(): void {\n\n  }\n}\n","export class Renderer {\n\n  EMPTY_TILE: number;\n  ctx: CanvasRenderingContext2D;\n  pixels: number;\n  scale: number;\n\n  constructor(context) {\n    /**\n     * The empty tile value. If this value is set for a position in a map's \n     * array, it will not be rendered. \n     * \n     * @var {integer} \n     */\n    this.EMPTY_TILE = 0;\n\n    /**\n     * The canvas context.\n     * \n     * @var {CanvasRenderingContext2D}\n     */\n    this.ctx = context;\n\n    /**\n     * Multiplier for x,y position to pixels. What size the tiles for the game\n     * will be rendered at. Always use a power of 2 so the scaling prevents\n     * blurring.\n     * \n     * @var {integer}\n     */\n    this.pixels = 32;\n\n    /**\n     * The scale at which the tile will be rendered. 1 = 1x scaling, 2 = 2x \n     * scaling, etc.\n     * \n     * @var {integer}\n     */\n    this.scale = 1;\n  }\n\n  draw() {\n    // Clear the screen\n    window.FG.ctx.clearRect(\n      0, \n      0, \n      window.FG.canvas.width, \n      window.FG.canvas.height\n    );\n\n    this.drawTileMap(new Overworld());\n    \n    for (let i=0; i<window.FG.gameObjectCount; i++) {\n      window.FG.gameObjects[i].draw();\n    }\n  }\n\n  /**\n   * Renders a map according to the coordinates given in the map's file by\n   * translating the coordinates to a spritesheet. \n   * \n   * If a tile is 32x32 pixels, the 1st tile will start at (0,0) on \n   * the spritesheet, the 2nd tile will start at (32,0), the 34d at (64,0) and \n   * so on.\n   * \n   * +---+---+---+---+\n   * | 1 | 2 | 3 | 4 |\n   * +---+---+---+---+\n   * | 5 | 6 | 7 | 8 |\n   * +---+---+---+---+\n   * \n   * 'source x' and 'source y' will get the correct coords in the image file.\n   * So for our first tile, '1', drawImage will grab the subimage at (32,0).\n   * drawImage would get the subimage at (64,32) for tile '7'.\n   * \n   * TODO  https://hashrocket.com/blog/posts/using-tiled-and-canvas-to-render-game-screens\n   *\n   * @param {Object} map  The map object that extends MapBase.\n   */\n  drawTileMap(map): void {\n    for (let x=0; x<map.cols; x++) {\n      for (let y=0; y<map.rows; y++) {\n        let tile = map.getTile(x, y);\n\n        // Let's skip rendering empty tiles.\n        if (tile !== this.EMPTY_TILE) { \n          this.ctx.drawImage(\n            // Image Source\n            map.SM, \n            // Source x (See example in comment block)\n            ((tile - 1) % map.cols) * this.pixels, \n            // Source y (See example in comment block)\n            Math.floor(((tile - 1) / map.rows)) * this.pixels,  \n            // Source width\n            this.pixels, \n            // Source height\n            this.pixels, \n            // Target x\n            x * (this.pixels * this.scale), \n            // Target y\n            y * (this.pixels * this.scale),\n            // Target width \n            this.pixels * this.scale,\n             // Target height\n            this.pixels * this.scale,\n          );\n        }\n      }\n    }\n  }\n}\n","// import { FiendGame as FG } from \"../engine/FiendGame\";\n\nexport class Enemy {\n  public HP: number;\n  public ATK: number;\n  public speed: number;\n  public position: { x: number, y: number };\n\n  constructor() {\n    this.HP = 100;\n    this.ATK = 1;\n    this.speed = 100;\n    this.position = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  update(delta: number) {\n    this.position.x += this.speed * delta;\n    this.position.y += this.speed * delta;\n  }\n\n  draw() {\n    window.FG.ctx.beginPath();\n    window.FG.ctx.arc(this.position.x, this.position.y, 10, 0, Math.PI*2);\n    window.FG.ctx.fillStyle = \"#0095DD\";\n    window.FG.ctx.fill();\n    window.FG.ctx.closePath();\n  }\n}\n","import { Enemy } from \"./entities/Enemy\";\nimport { FiendGame } from \"./engine/FiendGame\";\nimport { Renderer } from \"./engine/Renderer/Renderer\";\n\ndeclare global {\n  interface Window { \n    FG: FiendGame,\n    R: Renderer,\n  }\n}\n\n/**\n * Starting with the semicolon is in case whatever line of code above this\n * example relied on automatic semicolon insertion (ASI). The browser could\n * accidentally think this whole example continues from the previous line. The\n * leading semicolon marks the beginning of our new line if the previous one was\n * not empty or terminated.\n */\n function init() {\n\n  // init functionality, for now\n  window.FG = new FiendGame(640, 480);\n  window.R = new Renderer(window.FG.ctx);\n\n  main(performance.now());\n\n};\n\n/**\n * Ensure the assets are loaded before we initialize the game. We do this with a\n * promise to ensure all the images are loaded and ready to be used.\n */\n window.onload = function() {\n  var p = F_LOADER.initAssets();\n  Promise.all(p).then(function () {\n    init();\n  }.bind(this));\n}\n\n/**\n  * The main game loop. We use requestAnimationFrame to be thread-safe and not\n  * dominate the browser when the player blurs focus on our tab.\n  *\n  * render() is passed tFrame because it is assumed that the render method will\n  *          calculate how long it has been since the most recently passed\n  *          update tick for extrapolation (purely cosmetic for fast devices).\n  *          It draws the scene.\n  *\n  * update() calculates the game state as of a given point in time.\n  *\n  * init()   Performs whatever tasks are needed before the main loop can run.\n  *\n  *\n  * @param {DOMHighResTimeStamp} tFrame The number of milliseconds since\n  * navigationStart (when the previous document is unloaded.\n  * window.requestAnimationFrame() always provides a DOMHighResTimeStamp to\n  * callbacks as an argument when they are executed.\n  */\n  function main(tFrame) {\n  // Store the ID returned from our main loop's most recent call to\n  // requestAnimationFrame().\n  window.FG.stopToken = window.requestAnimationFrame(main);\n\n  // Delta should be in seconds, not ms, so we divide by 1000.\n  let delta = (tFrame - window.FG.lastFrameTime) / 1000.0;\n  // Keep track of when the last frame happened.\n  window.FG.lastFrameTime = tFrame;\n\n  // TODO processInput();\n  window.FG.update(delta);\n  window.R.draw();\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}